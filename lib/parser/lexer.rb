# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-

# line 1 "lib/parser/lexer.rl"

# line 3 "lib/parser/lexer.rl"
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source_buffer.slice(@ts...@te)
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#

class Parser::Lexer

  
# line 85 "lib/parser/lexer.rb"
class << self
	attr_accessor :_lex_trans_keys
	private :_lex_trans_keys, :_lex_trans_keys=
end
self._lex_trans_keys = [
	0, 0, 101, 101, 103, 103, 
	105, 105, 110, 110, 69, 
	69, 78, 78, 68, 68, 
	95, 95, 95, 95, 0, 26, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 45, 0, 77, 
	0, 77, 0, 92, 0, 
	26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 99, 
	45, 45, 0, 92, 0, 
	77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 26, 0, 
	127, 58, 58, 58, 58, 
	0, 127, 58, 58, 60, 60, 
	62, 62, 10, 10, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 115, 115, 
	99, 99, 117, 117, 101, 101, 
	108, 116, 101, 101, 115, 
	115, 115, 115, 105, 105, 
	108, 108, 105, 105, 108, 108, 
	58, 58, 0, 127, 10, 
	10, 0, 127, 58, 58, 
	98, 98, 101, 101, 103, 103, 
	105, 105, 110, 110, 0, 
	122, 61, 61, 9, 92, 
	9, 92, 9, 92, 9, 92, 
	9, 92, 10, 10, 0, 
	127, 0, 127, 61, 126, 
	0, 127, 0, 127, 93, 93, 
	0, 127, 0, 127, 10, 
	10, 34, 34, 10, 10, 
	39, 39, 0, 127, 96, 96, 
	0, 45, 0, 77, 0, 
	77, 0, 92, 0, 26, 
	0, 26, 0, 45, 0, 99, 
	0, 26, 67, 99, 45, 
	45, 0, 92, 0, 77, 
	0, 102, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 58, 58, 
	58, 58, 0, 127, 43, 57, 
	48, 57, 48, 57, 48, 
	57, 48, 57, 0, 127, 
	58, 58, 9, 92, 9, 92, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 60, 60, 
	10, 10, 9, 46, 46, 46, 
	0, 95, 9, 32, 0, 
	0, 10, 10, 10, 10, 
	98, 98, 9, 32, 10, 10, 
	95, 95, 0, 92, 9, 
	32, 36, 123, 0, 127, 
	48, 57, 0, 120, 0, 0, 
	0, 0, 48, 55, 48, 
	55, 0, 0, 0, 0, 
	0, 92, 0, 0, 0, 0, 
	0, 0, 0, 92, 45, 
	45, 0, 0, 0, 0, 
	0, 0, 0, 92, 0, 45, 
	0, 92, 0, 92, 0, 
	0, 0, 0, 0, 92, 
	0, 45, 10, 10, 0, 92, 
	48, 123, 48, 102, 48, 
	102, 48, 102, 0, 0, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 0, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 0, 0, 0, 48, 102, 
	0, 0, 0, 92, 36, 
	123, 0, 127, 48, 57, 
	0, 120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 
	0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 0, 45, 0, 92, 
	0, 92, 0, 0, 0, 
	0, 0, 92, 0, 45, 
	10, 10, 0, 92, 48, 123, 
	48, 102, 48, 102, 48, 
	102, 0, 0, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 0, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 0, 
	0, 0, 48, 102, 0, 0, 
	0, 92, 9, 32, 0, 
	26, 0, 92, 0, 26, 
	0, 35, 36, 123, 0, 127, 
	48, 57, 0, 26, 0, 
	35, 9, 32, 36, 123, 
	0, 127, 48, 57, 0, 32, 
	9, 32, 65, 122, 65, 
	122, 36, 64, 0, 127, 
	48, 57, 0, 127, 0, 127, 
	0, 127, 0, 127, 9, 
	32, 0, 0, 61, 126, 
	10, 10, 10, 10, 0, 127, 
	0, 127, 48, 57, 115, 
	115, 38, 38, 42, 42, 
	64, 64, 58, 58, 60, 61, 
	62, 62, 61, 126, 61, 
	61, 61, 62, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 93, 93, 10, 10, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	124, 124, 0, 127, 0, 
	127, 9, 32, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 61, 
	61, 0, 0, 9, 32, 
	0, 0, 61, 126, 10, 10, 
	10, 10, 38, 38, 42, 
	42, 64, 64, 60, 61, 
	62, 62, 61, 126, 61, 61, 
	61, 62, 0, 127, 93, 
	93, 10, 10, 124, 124, 
	0, 126, 0, 127, 0, 61, 
	9, 61, 9, 61, 0, 
	0, 9, 61, 9, 62, 
	46, 46, 46, 46, 58, 58, 
	9, 32, 0, 0, 0, 
	127, 0, 0, 9, 124, 
	0, 0, 10, 10, 10, 10, 
	0, 0, 9, 61, 58, 
	58, 60, 60, 62, 62, 
	9, 32, 10, 10, 0, 127, 
	102, 102, 101, 101, 110, 
	110, 104, 104, 0, 127, 
	0, 127, 0, 127, 0, 0, 
	0, 127, 10, 10, 0, 
	123, 9, 32, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	111, 111, 0, 0, 0, 
	127, 0, 127, 9, 32, 
	0, 0, 10, 10, 10, 10, 
	10, 10, 0, 0, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 58, 61, 
	0, 0, 61, 126, 61, 61, 
	0, 0, 0, 0, 0, 
	0, 9, 32, 61, 61, 
	9, 32, 61, 126, 10, 10, 
	10, 10, 65, 122, 0, 
	122, 38, 61, 0, 0, 
	42, 61, 61, 61, 9, 92, 
	9, 92, 9, 92, 46, 
	46, 46, 46, 0, 26, 
	0, 127, 0, 127, 61, 61, 
	0, 0, 61, 126, 61, 
	62, 0, 0, 0, 0, 
	0, 0, 0, 0, 61, 126, 
	0, 127, 48, 57, 38, 
	38, 42, 42, 64, 64, 
	60, 61, 62, 62, 61, 61, 
	61, 62, 124, 124, 60, 
	61, 0, 0, 62, 62, 
	61, 126, 61, 62, 0, 122, 
	0, 0, 0, 127, 0, 
	127, 0, 120, 0, 0, 
	0, 0, 48, 55, 48, 55, 
	0, 0, 0, 0, 0, 
	92, 0, 0, 0, 0, 
	0, 0, 0, 92, 45, 45, 
	0, 0, 0, 0, 0, 
	0, 0, 92, 0, 45, 
	0, 92, 0, 92, 0, 0, 
	0, 0, 0, 92, 0, 
	45, 10, 10, 0, 92, 
	48, 123, 48, 102, 48, 102, 
	48, 102, 0, 0, 0, 
	125, 0, 125, 0, 0, 
	0, 125, 0, 0, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 0, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 0, 48, 102, 0, 
	0, 0, 127, 0, 127, 
	0, 127, 0, 0, 10, 10, 
	0, 0, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	61, 126, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 0, 
	61, 124, 0, 92, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 61, 
	61, 0, 0, 9, 32, 
	0, 0, 61, 126, 10, 10, 
	10, 10, 0, 127, 0, 
	127, 48, 57, 61, 61, 
	38, 61, 0, 0, 0, 0, 
	42, 61, 61, 62, 46, 
	57, 46, 46, 48, 101, 
	48, 95, 46, 120, 48, 114, 
	43, 57, 48, 105, 0, 
	0, 105, 105, 0, 0, 
	48, 114, 48, 114, 48, 114, 
	48, 114, 105, 114, 0, 
	0, 105, 105, 0, 0, 
	48, 114, 48, 114, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 48, 114, 48, 114, 
	46, 114, 48, 114, 46, 114, 
	48, 114, 58, 58, 60, 
	61, 62, 62, 61, 126, 
	61, 61, 61, 62, 0, 127, 
	0, 127, 0, 0, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 0, 10, 10, 0, 
	0, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	9, 92, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	0, 61, 124, 0, 0, 
	9, 46, 9, 46, 46, 46, 
	10, 61, 10, 10, 10, 
	101, 10, 110, 10, 100, 
	10, 10, 0
]

class << self
	attr_accessor :_lex_key_spans
	private :_lex_key_spans, :_lex_key_spans=
end
self._lex_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 27, 128, 128, 128, 128, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 46, 78, 78, 93, 27, 27, 46, 
	100, 27, 33, 1, 93, 78, 103, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 27, 128, 1, 1, 
	128, 1, 1, 1, 1, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 9, 1, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 128, 1, 
	1, 1, 1, 1, 1, 123, 1, 84, 
	84, 84, 84, 84, 1, 128, 128, 66, 
	128, 128, 1, 128, 128, 1, 1, 1, 
	1, 128, 1, 46, 78, 78, 93, 27, 
	27, 46, 100, 27, 33, 1, 93, 78, 
	103, 128, 128, 128, 128, 128, 128, 1, 
	1, 128, 15, 10, 10, 10, 10, 128, 
	1, 84, 84, 84, 84, 84, 84, 1, 
	1, 38, 1, 96, 24, 0, 1, 1, 
	1, 24, 1, 1, 93, 24, 88, 128, 
	10, 121, 0, 0, 8, 8, 0, 0, 
	93, 0, 0, 0, 93, 1, 0, 0, 
	0, 93, 46, 93, 93, 0, 0, 93, 
	46, 1, 93, 76, 55, 55, 55, 0, 
	126, 126, 0, 126, 0, 126, 126, 126, 
	126, 0, 126, 126, 126, 126, 126, 126, 
	0, 0, 55, 0, 93, 88, 128, 10, 
	121, 0, 0, 8, 8, 0, 0, 93, 
	0, 0, 0, 93, 1, 0, 0, 0, 
	93, 46, 93, 93, 0, 0, 93, 46, 
	1, 93, 76, 55, 55, 55, 0, 126, 
	126, 0, 126, 0, 126, 126, 126, 126, 
	0, 126, 126, 126, 126, 126, 126, 0, 
	0, 55, 0, 93, 24, 27, 93, 27, 
	36, 88, 128, 10, 27, 36, 24, 88, 
	128, 10, 33, 24, 58, 58, 29, 128, 
	10, 128, 128, 128, 128, 24, 0, 66, 
	1, 1, 128, 128, 10, 1, 1, 1, 
	1, 1, 2, 1, 66, 1, 2, 128, 
	128, 128, 128, 128, 128, 128, 1, 1, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 128, 128, 24, 1, 
	1, 1, 0, 128, 128, 1, 0, 24, 
	0, 66, 1, 1, 1, 1, 1, 2, 
	1, 66, 1, 2, 128, 1, 1, 1, 
	127, 128, 62, 53, 53, 0, 53, 54, 
	1, 1, 1, 24, 0, 128, 0, 116, 
	0, 1, 1, 0, 53, 1, 1, 1, 
	24, 1, 128, 1, 1, 1, 1, 128, 
	128, 128, 0, 128, 1, 124, 24, 1, 
	1, 1, 0, 1, 0, 128, 128, 24, 
	0, 1, 1, 1, 0, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 4, 
	0, 66, 1, 0, 0, 0, 24, 1, 
	24, 66, 1, 1, 58, 123, 24, 0, 
	20, 1, 84, 84, 84, 1, 1, 27, 
	128, 128, 1, 0, 66, 2, 0, 0, 
	0, 0, 66, 128, 10, 1, 1, 1, 
	2, 1, 1, 2, 1, 2, 0, 1, 
	66, 2, 123, 0, 128, 128, 121, 0, 
	0, 8, 8, 0, 0, 93, 0, 0, 
	0, 93, 1, 0, 0, 0, 93, 46, 
	93, 93, 0, 0, 93, 46, 1, 93, 
	76, 55, 55, 55, 0, 126, 126, 0, 
	126, 0, 126, 126, 126, 126, 0, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 0, 0, 55, 0, 128, 128, 
	128, 0, 1, 0, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	66, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 0, 64, 93, 24, 0, 1, 
	1, 1, 0, 128, 128, 24, 0, 1, 
	1, 1, 0, 128, 128, 1, 0, 24, 
	0, 66, 1, 1, 128, 128, 10, 1, 
	24, 0, 0, 20, 2, 12, 1, 54, 
	48, 75, 67, 15, 58, 0, 1, 0, 
	67, 67, 67, 67, 10, 0, 1, 0, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	69, 67, 69, 67, 1, 2, 1, 66, 
	1, 2, 128, 128, 0, 128, 128, 128, 
	128, 128, 128, 0, 1, 0, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 84, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 0, 64, 0, 
	38, 38, 1, 52, 1, 92, 101, 91, 
	1
]

class << self
	attr_accessor :_lex_index_offsets
	private :_lex_index_offsets, :_lex_index_offsets=
end
self._lex_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 46, 175, 304, 433, 562, 
	609, 688, 767, 861, 889, 917, 964, 1065, 
	1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 
	1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 
	2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 
	2895, 3024, 3153, 3282, 3411, 3540, 3669, 3798, 
	3927, 4056, 4185, 4314, 4443, 4471, 4600, 4602, 
	4604, 4733, 4735, 4737, 4739, 4741, 4870, 4999, 
	5128, 5257, 5386, 5515, 5644, 5773, 5902, 6031, 
	6160, 6289, 6418, 6547, 6676, 6805, 6934, 7063, 
	7065, 7067, 7069, 7071, 7081, 7083, 7085, 7087, 
	7089, 7091, 7093, 7095, 7097, 7226, 7228, 7357, 
	7359, 7361, 7363, 7365, 7367, 7369, 7493, 7495, 
	7580, 7665, 7750, 7835, 7920, 7922, 8051, 8180, 
	8247, 8376, 8505, 8507, 8636, 8765, 8767, 8769, 
	8771, 8773, 8902, 8904, 8951, 9030, 9109, 9203, 
	9231, 9259, 9306, 9407, 9435, 9469, 9471, 9565, 
	9644, 9748, 9877, 10006, 10135, 10264, 10393, 10522, 
	10524, 10526, 10655, 10671, 10682, 10693, 10704, 10715, 
	10844, 10846, 10931, 11016, 11101, 11186, 11271, 11356, 
	11358, 11360, 11399, 11401, 11498, 11523, 11524, 11526, 
	11528, 11530, 11555, 11557, 11559, 11653, 11678, 11767, 
	11896, 11907, 12029, 12030, 12031, 12040, 12049, 12050, 
	12051, 12145, 12146, 12147, 12148, 12242, 12244, 12245, 
	12246, 12247, 12341, 12388, 12482, 12576, 12577, 12578, 
	12672, 12719, 12721, 12815, 12892, 12948, 13004, 13060, 
	13061, 13188, 13315, 13316, 13443, 13444, 13571, 13698, 
	13825, 13952, 13953, 14080, 14207, 14334, 14461, 14588, 
	14715, 14716, 14717, 14773, 14774, 14868, 14957, 15086, 
	15097, 15219, 15220, 15221, 15230, 15239, 15240, 15241, 
	15335, 15336, 15337, 15338, 15432, 15434, 15435, 15436, 
	15437, 15531, 15578, 15672, 15766, 15767, 15768, 15862, 
	15909, 15911, 16005, 16082, 16138, 16194, 16250, 16251, 
	16378, 16505, 16506, 16633, 16634, 16761, 16888, 17015, 
	17142, 17143, 17270, 17397, 17524, 17651, 17778, 17905, 
	17906, 17907, 17963, 17964, 18058, 18083, 18111, 18205, 
	18233, 18270, 18359, 18488, 18499, 18527, 18564, 18589, 
	18678, 18807, 18818, 18852, 18877, 18936, 18995, 19025, 
	19154, 19165, 19294, 19423, 19552, 19681, 19706, 19707, 
	19774, 19776, 19778, 19907, 20036, 20047, 20049, 20051, 
	20053, 20055, 20057, 20060, 20062, 20129, 20131, 20134, 
	20263, 20392, 20521, 20650, 20779, 20908, 21037, 21039, 
	21041, 21170, 21299, 21428, 21557, 21686, 21815, 21944, 
	22073, 22202, 22331, 22460, 22589, 22718, 22847, 22976, 
	23105, 23234, 23363, 23492, 23621, 23750, 23879, 24008, 
	24137, 24266, 24395, 24524, 24653, 24782, 24911, 25040, 
	25169, 25298, 25427, 25556, 25685, 25814, 25943, 26072, 
	26201, 26330, 26459, 26588, 26717, 26846, 26975, 27104, 
	27233, 27362, 27491, 27620, 27749, 27878, 28007, 28136, 
	28265, 28394, 28523, 28652, 28781, 28910, 29039, 29168, 
	29297, 29426, 29555, 29684, 29813, 29942, 30071, 30200, 
	30329, 30458, 30587, 30716, 30845, 30974, 31103, 31232, 
	31361, 31490, 31619, 31748, 31750, 31879, 32008, 32033, 
	32035, 32037, 32039, 32040, 32169, 32298, 32300, 32301, 
	32326, 32327, 32394, 32396, 32398, 32400, 32402, 32404, 
	32407, 32409, 32476, 32478, 32481, 32610, 32612, 32614, 
	32616, 32744, 32873, 32936, 32990, 33044, 33045, 33099, 
	33154, 33156, 33158, 33160, 33185, 33186, 33315, 33316, 
	33433, 33434, 33436, 33438, 33439, 33493, 33495, 33497, 
	33499, 33524, 33526, 33655, 33657, 33659, 33661, 33663, 
	33792, 33921, 34050, 34051, 34180, 34182, 34307, 34332, 
	34334, 34336, 34338, 34339, 34341, 34342, 34471, 34600, 
	34625, 34626, 34628, 34630, 34632, 34633, 34762, 34891, 
	35020, 35149, 35278, 35407, 35536, 35665, 35794, 35923, 
	36052, 36181, 36310, 36439, 36568, 36697, 36826, 36955, 
	36960, 36961, 37028, 37030, 37031, 37032, 37033, 37058, 
	37060, 37085, 37152, 37154, 37156, 37215, 37339, 37364, 
	37365, 37386, 37388, 37473, 37558, 37643, 37645, 37647, 
	37675, 37804, 37933, 37935, 37936, 38003, 38006, 38007, 
	38008, 38009, 38010, 38077, 38206, 38217, 38219, 38221, 
	38223, 38226, 38228, 38230, 38233, 38235, 38238, 38239, 
	38241, 38308, 38311, 38435, 38436, 38565, 38694, 38816, 
	38817, 38818, 38827, 38836, 38837, 38838, 38932, 38933, 
	38934, 38935, 39029, 39031, 39032, 39033, 39034, 39128, 
	39175, 39269, 39363, 39364, 39365, 39459, 39506, 39508, 
	39602, 39679, 39735, 39791, 39847, 39848, 39975, 40102, 
	40103, 40230, 40231, 40358, 40485, 40612, 40739, 40740, 
	40867, 40994, 41121, 41248, 41375, 41502, 41629, 41756, 
	41883, 42010, 42137, 42264, 42391, 42518, 42645, 42772, 
	42899, 43026, 43153, 43154, 43155, 43211, 43212, 43341, 
	43470, 43599, 43600, 43602, 43603, 43732, 43861, 43990, 
	44119, 44248, 44377, 44506, 44635, 44764, 44893, 45022, 
	45151, 45280, 45409, 45538, 45667, 45796, 45925, 46054, 
	46183, 46312, 46441, 46570, 46699, 46828, 46957, 47086, 
	47215, 47344, 47473, 47602, 47731, 47860, 47989, 48118, 
	48247, 48376, 48505, 48634, 48763, 48892, 49021, 49150, 
	49279, 49408, 49537, 49666, 49795, 49924, 50053, 50182, 
	50311, 50440, 50569, 50698, 50827, 50956, 51085, 51214, 
	51343, 51410, 51539, 51668, 51797, 51926, 52055, 52184, 
	52313, 52442, 52571, 52700, 52829, 52958, 53087, 53216, 
	53345, 53474, 53603, 53732, 53861, 53990, 54119, 54248, 
	54377, 54506, 54635, 54636, 54701, 54795, 54820, 54821, 
	54823, 54825, 54827, 54828, 54957, 55086, 55111, 55112, 
	55114, 55116, 55118, 55119, 55248, 55377, 55379, 55380, 
	55405, 55406, 55473, 55475, 55477, 55606, 55735, 55746, 
	55748, 55773, 55774, 55775, 55796, 55799, 55812, 55814, 
	55869, 55918, 55994, 56062, 56078, 56137, 56138, 56140, 
	56141, 56209, 56277, 56345, 56413, 56424, 56425, 56427, 
	56428, 56496, 56564, 56632, 56700, 56768, 56836, 56904, 
	56972, 57042, 57110, 57180, 57248, 57250, 57253, 57255, 
	57322, 57324, 57327, 57456, 57585, 57586, 57715, 57844, 
	57973, 58102, 58231, 58360, 58361, 58363, 58364, 58493, 
	58622, 58751, 58880, 59009, 59138, 59267, 59396, 59525, 
	59654, 59783, 59912, 60041, 60170, 60299, 60428, 60557, 
	60686, 60815, 60944, 61073, 61202, 61331, 61460, 61589, 
	61718, 61847, 61976, 62105, 62234, 62363, 62492, 62621, 
	62750, 62879, 63008, 63137, 63222, 63351, 63480, 63609, 
	63738, 63867, 63996, 64125, 64254, 64383, 64512, 64641, 
	64770, 64899, 65028, 65157, 65286, 65415, 65544, 65673, 
	65802, 65931, 66060, 66189, 66318, 66447, 66576, 66705, 
	66834, 66963, 67092, 67221, 67350, 67479, 67608, 67737, 
	67866, 67995, 68124, 68253, 68382, 68511, 68640, 68769, 
	68898, 69027, 69156, 69285, 69414, 69543, 69672, 69801, 
	69930, 70059, 70188, 70317, 70446, 70575, 70704, 70833, 
	70962, 71091, 71220, 71349, 71478, 71607, 71608, 71673, 
	71674, 71713, 71752, 71754, 71807, 71809, 71902, 72004, 
	72096
]

class << self
	attr_accessor :_lex_indicies
	private :_lex_indicies, :_lex_indicies=
end
self._lex_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 10, 0, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 12, 14, 12, 14, 14, 12, 12, 
	14, 14, 14, 15, 14, 14, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	14, 14, 14, 14, 14, 14, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 14, 12, 12, 13, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 12, 12, 14, 12, 13, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 12, 12, 12, 12, 12, 12, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 14, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 12, 14, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 12, 12, 12, 12, 12, 12, 
	17, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 13, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	13, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	13, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 13, 18, 19, 19, 19, 18, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 18, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 20, 
	19, 18, 21, 21, 21, 18, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 23, 21, 
	18, 21, 21, 21, 18, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 18, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 24, 21, 18, 
	25, 25, 25, 18, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 18, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 18, 28, 28, 
	28, 18, 28, 28, 28, 28, 28, 29, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 18, 
	28, 18, 28, 28, 28, 18, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 18, 28, 18, 19, 19, 
	19, 18, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 18, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 30, 19, 18, 31, 31, 31, 
	18, 31, 31, 31, 31, 31, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 18, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 33, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	34, 31, 31, 31, 31, 31, 31, 35, 
	31, 18, 31, 31, 31, 18, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 18, 31, 36, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 37, 18, 37, 
	18, 18, 38, 38, 38, 18, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 18, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 40, 38, 18, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 22, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 18, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 24, 21, 18, 41, 
	41, 41, 18, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	18, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 43, 45, 43, 45, 45, 43, 43, 
	45, 45, 45, 46, 45, 45, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	45, 45, 45, 45, 45, 45, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 45, 43, 43, 44, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 43, 43, 45, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 43, 43, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 45, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 43, 45, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 43, 43, 43, 43, 43, 43, 
	48, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 44, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	44, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	43, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	44, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	43, 44, 49, 50, 50, 50, 49, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 49, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 51, 
	50, 49, 52, 52, 52, 49, 52, 52, 
	52, 52, 52, 53, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	49, 52, 52, 52, 49, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 49, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 55, 52, 49, 
	56, 56, 56, 49, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 49, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 49, 59, 59, 
	59, 49, 59, 59, 59, 59, 59, 60, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 49, 
	59, 49, 59, 59, 59, 49, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 49, 59, 49, 50, 50, 
	50, 49, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 49, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 61, 50, 49, 62, 62, 62, 
	49, 62, 62, 62, 62, 62, 63, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 49, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	65, 62, 62, 62, 62, 62, 62, 66, 
	62, 49, 62, 62, 62, 49, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 49, 62, 67, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 68, 49, 68, 
	49, 49, 69, 69, 69, 49, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 49, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 49, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 53, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 49, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 55, 52, 49, 72, 
	72, 72, 49, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	49, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 74, 76, 74, 76, 76, 74, 74, 
	76, 76, 76, 77, 76, 76, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 76, 74, 74, 75, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 74, 74, 76, 74, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 74, 74, 74, 74, 74, 74, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 76, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 74, 76, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 74, 74, 74, 74, 74, 74, 
	79, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 75, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	74, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	75, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	74, 75, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 82, 82, 80, 82, 80, 
	82, 82, 80, 80, 82, 82, 82, 83, 
	82, 82, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 82, 82, 82, 82, 
	82, 82, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 80, 82, 80, 
	80, 81, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 80, 80, 80, 
	82, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 80, 80, 80, 
	80, 80, 80, 80, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 80, 80, 
	80, 80, 82, 80, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 80, 80, 
	80, 80, 80, 82, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 80, 80, 
	80, 80, 80, 80, 85, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 81, 80, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 80, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 80, 80, 80, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	80, 80, 80, 80, 81, 80, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	80, 80, 80, 80, 80, 81, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 87, 
	87, 88, 87, 88, 87, 87, 88, 88, 
	87, 87, 87, 89, 87, 87, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	87, 87, 87, 87, 87, 87, 87, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 88, 87, 88, 88, 86, 87, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 88, 88, 88, 87, 88, 86, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 88, 88, 88, 88, 88, 88, 88, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 88, 88, 88, 88, 87, 88, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 88, 88, 88, 88, 88, 87, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 88, 88, 88, 88, 88, 88, 
	92, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 88, 88, 88, 88, 91, 
	88, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 88, 88, 88, 88, 88, 
	91, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 88, 88, 88, 88, 88, 
	88, 88, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 88, 88, 88, 88, 
	93, 88, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 88, 88, 88, 88, 
	88, 93, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 94, 94, 94, 94, 
	94, 94, 94, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 94, 94, 94, 
	94, 95, 94, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 94, 94, 94, 
	94, 94, 95, 96, 97, 97, 97, 96, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 96, 97, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	100, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 101, 98, 98, 98, 98, 100, 98, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 98, 98, 98, 98, 99, 98, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 98, 98, 98, 98, 98, 99, 
	101, 98, 98, 102, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 106, 103, 
	103, 103, 103, 105, 103, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 104, 103, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 104, 106, 103, 108, 
	107, 109, 107, 110, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 112, 107, 
	112, 112, 112, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 112, 107, 107, 
	107, 107, 113, 114, 107, 115, 107, 116, 
	117, 118, 119, 120, 113, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 121, 
	107, 122, 118, 123, 124, 107, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	125, 126, 118, 127, 111, 107, 111, 111, 
	111, 111, 111, 111, 111, 111, 128, 111, 
	111, 111, 111, 111, 111, 111, 111, 129, 
	111, 111, 130, 111, 131, 111, 111, 111, 
	132, 133, 107, 127, 107, 111, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 134, 
	107, 134, 134, 134, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 134, 107, 
	107, 107, 107, 135, 136, 107, 137, 107, 
	138, 139, 140, 141, 142, 135, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	143, 107, 144, 140, 145, 146, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 147, 148, 140, 109, 104, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 149, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	150, 104, 104, 151, 104, 152, 104, 104, 
	104, 153, 154, 107, 109, 107, 104, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	105, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 106, 107, 107, 107, 107, 105, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 104, 107, 
	104, 104, 104, 104, 104, 155, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 107, 104, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 105, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 106, 107, 107, 107, 107, 105, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 104, 
	107, 104, 104, 104, 104, 156, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 107, 
	104, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 105, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 106, 107, 107, 107, 107, 
	105, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	104, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 157, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	107, 104, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 105, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 106, 107, 107, 107, 
	107, 105, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 104, 107, 104, 104, 158, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 107, 104, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 105, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 106, 107, 107, 
	107, 107, 105, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 107, 107, 
	107, 107, 104, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	159, 104, 104, 104, 104, 104, 107, 107, 
	107, 107, 107, 104, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 105, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 106, 107, 
	107, 107, 107, 105, 107, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 107, 
	107, 107, 107, 104, 107, 104, 104, 104, 
	104, 155, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 107, 
	107, 107, 107, 107, 104, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 105, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 106, 
	107, 107, 107, 107, 105, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	107, 107, 107, 107, 104, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 160, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	107, 107, 107, 107, 107, 104, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 105, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	106, 107, 107, 107, 107, 105, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 107, 107, 107, 107, 104, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 161, 104, 104, 104, 104, 104, 
	104, 104, 162, 104, 104, 104, 104, 104, 
	104, 107, 107, 107, 107, 107, 104, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	105, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 106, 107, 107, 107, 107, 105, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 104, 107, 
	104, 104, 104, 104, 163, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 107, 104, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 105, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 106, 107, 107, 107, 107, 105, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 104, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 164, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 107, 
	104, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 105, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 106, 107, 107, 107, 107, 
	105, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	104, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 155, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	107, 104, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 105, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 106, 107, 107, 107, 
	107, 105, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 104, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 165, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 107, 104, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 105, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 106, 107, 107, 
	107, 107, 105, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 107, 107, 
	107, 107, 104, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 155, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 107, 107, 
	107, 107, 107, 104, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 105, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 106, 107, 
	107, 107, 107, 105, 107, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 107, 
	107, 107, 107, 104, 107, 104, 104, 104, 
	104, 104, 104, 104, 166, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 107, 
	107, 107, 107, 107, 104, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 105, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 106, 
	107, 107, 107, 107, 105, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	107, 107, 107, 107, 104, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 167, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	107, 107, 107, 107, 107, 104, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 105, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	106, 107, 107, 107, 107, 105, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 107, 107, 107, 107, 104, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 159, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 107, 107, 107, 107, 107, 104, 169, 
	168, 170, 168, 171, 168, 140, 168, 172, 
	168, 168, 168, 168, 168, 168, 168, 173, 
	168, 174, 168, 175, 168, 140, 168, 176, 
	168, 140, 168, 177, 168, 171, 168, 179, 
	178, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 182, 180, 182, 182, 182, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 182, 180, 180, 180, 180, 180, 180, 
	180, 183, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 180, 184, 180, 180, 
	181, 180, 181, 181, 181, 185, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 180, 180, 180, 180, 
	180, 181, 186, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 188, 180, 188, 
	188, 188, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 188, 180, 180, 180, 
	180, 180, 180, 180, 189, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 180, 
	190, 180, 180, 187, 180, 187, 187, 187, 
	191, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 180, 
	180, 180, 180, 180, 187, 192, 193, 195, 
	194, 196, 194, 197, 194, 198, 194, 199, 
	194, 200, 201, 201, 201, 200, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 200, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 201, 201, 201, 201, 
	201, 201, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 201, 203, 192, 204, 
	205, 204, 204, 204, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 204, 192, 
	192, 206, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 208, 192, 209, 210, 209, 209, 
	209, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 209, 192, 192, 211, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 213, 
	192, 215, 216, 215, 215, 215, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	215, 214, 214, 217, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 219, 214, 221, 222, 
	221, 221, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 221, 220, 220, 
	223, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 225, 220, 221, 226, 221, 221, 221, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 221, 220, 220, 223, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 225, 220, 
	205, 192, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 229, 229, 227, 229, 227, 
	229, 229, 227, 227, 229, 229, 229, 230, 
	229, 229, 231, 231, 231, 231, 231, 231, 
	231, 231, 231, 231, 229, 229, 229, 229, 
	229, 229, 229, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 227, 229, 227, 
	227, 228, 229, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 227, 227, 227, 
	229, 227, 228, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 227, 227, 227, 
	227, 227, 227, 227, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 227, 227, 
	227, 227, 229, 227, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 227, 227, 
	227, 227, 227, 229, 232, 229, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 229, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 233, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 227, 227, 227, 227, 228, 227, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 227, 227, 227, 227, 227, 228, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 227, 227, 227, 227, 228, 
	227, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 227, 227, 227, 227, 227, 
	228, 232, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 235, 227, 227, 
	227, 227, 236, 227, 227, 227, 227, 227, 
	237, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	203, 227, 227, 227, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 227, 227, 
	227, 227, 234, 238, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 227, 227, 
	227, 237, 227, 234, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 241, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 240, 240, 
	240, 240, 240, 240, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 240, 
	240, 240, 240, 239, 240, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 240, 
	240, 240, 240, 240, 239, 243, 242, 244, 
	235, 241, 240, 244, 236, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 235, 
	227, 227, 227, 227, 236, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	227, 227, 227, 227, 234, 238, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	234, 234, 234, 234, 234, 234, 234, 234, 
	227, 227, 227, 227, 227, 234, 244, 238, 
	245, 246, 246, 246, 245, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 245, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 247, 246, 245, 
	248, 248, 248, 245, 248, 248, 248, 248, 
	248, 249, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 245, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 250, 248, 245, 248, 
	248, 248, 245, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	245, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 251, 248, 245, 252, 252, 
	252, 245, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 245, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 253, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 254, 252, 245, 255, 255, 255, 245, 
	255, 255, 255, 255, 255, 256, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 245, 255, 245, 
	255, 255, 255, 245, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 255, 
	255, 245, 255, 245, 246, 246, 246, 245, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 245, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	257, 246, 245, 258, 258, 258, 245, 258, 
	258, 258, 258, 258, 259, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 245, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 260, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 261, 258, 
	258, 258, 258, 258, 258, 262, 258, 245, 
	258, 258, 258, 245, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 245, 258, 263, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 264, 245, 264, 245, 245, 
	265, 265, 265, 245, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 245, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 266, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 267, 265, 245, 248, 248, 
	248, 245, 248, 248, 248, 248, 248, 249, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 245, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 251, 248, 245, 268, 268, 268, 
	245, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 245, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 269, 269, 269, 269, 
	269, 269, 269, 269, 269, 269, 268, 268, 
	268, 268, 268, 268, 268, 269, 269, 269, 
	269, 269, 269, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 269, 269, 269, 
	269, 269, 269, 268, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 271, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 272, 192, 
	192, 273, 192, 271, 192, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 192, 
	192, 192, 192, 270, 192, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 192, 
	192, 192, 192, 192, 270, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 271, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 272, 
	227, 227, 273, 227, 271, 227, 270, 270, 
	270, 270, 270, 270, 274, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	227, 227, 227, 227, 270, 227, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	227, 227, 227, 227, 227, 270, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 271, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	272, 227, 227, 273, 227, 271, 227, 270, 
	270, 270, 270, 270, 270, 270, 270, 275, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 227, 227, 227, 227, 270, 227, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 227, 227, 227, 227, 227, 270, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	271, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 272, 227, 227, 273, 227, 271, 227, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 276, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 227, 227, 227, 227, 270, 227, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 227, 227, 227, 227, 227, 270, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 271, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 272, 227, 227, 273, 227, 271, 
	227, 270, 270, 270, 276, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 227, 227, 227, 227, 270, 
	227, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 227, 227, 227, 227, 227, 
	270, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 277, 279, 277, 277, 277, 277, 277, 
	277, 277, 277, 277, 277, 277, 277, 277, 
	277, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 280, 277, 277, 277, 277, 
	279, 277, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 277, 277, 277, 277, 
	278, 277, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 277, 277, 277, 277, 
	277, 278, 280, 277, 277, 281, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	282, 282, 282, 282, 282, 282, 282, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 282, 282, 282, 282, 283, 282, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 282, 282, 282, 282, 282, 283, 285, 
	284, 285, 284, 284, 286, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 284, 286, 
	286, 286, 286, 286, 286, 286, 286, 286, 
	286, 284, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 284, 289, 289, 289, 
	289, 289, 289, 289, 289, 289, 289, 288, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 288, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	282, 282, 282, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 282, 282, 282, 
	282, 282, 282, 282, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 282, 282, 
	282, 282, 291, 282, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 282, 282, 
	282, 282, 282, 291, 292, 288, 293, 294, 
	293, 293, 293, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 293, 288, 288, 
	295, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 296, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 297, 288, 298, 299, 298, 298, 298, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 298, 288, 288, 300, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 301, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 302, 288, 
	304, 305, 304, 304, 304, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 304, 
	303, 303, 306, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 307, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 308, 303, 310, 311, 310, 
	310, 310, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 310, 309, 309, 312, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	313, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	314, 309, 310, 311, 310, 310, 310, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 310, 309, 309, 312, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 315, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 314, 309, 310, 
	316, 310, 310, 310, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 310, 309, 
	309, 312, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 313, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 314, 309, 317, 288, 294, 288, 
	319, 318, 319, 319, 319, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 319, 
	318, 318, 318, 318, 318, 320, 318, 318, 
	318, 318, 318, 318, 318, 321, 318, 322, 
	318, 324, 323, 323, 323, 324, 323, 323, 
	323, 323, 325, 326, 325, 325, 325, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 324, 323, 323, 323, 323, 
	323, 325, 323, 323, 327, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 328, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 329, 323, 323, 
	330, 323, 325, 331, 325, 325, 325, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 331, 331, 331, 331, 331, 331, 331, 
	331, 325, 331, 332, 333, 334, 335, 336, 
	338, 337, 340, 341, 340, 340, 340, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 339, 339, 339, 339, 339, 339, 339, 
	339, 340, 339, 326, 337, 342, 337, 344, 
	343, 343, 343, 344, 343, 343, 343, 343, 
	345, 346, 345, 345, 345, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 344, 343, 343, 343, 343, 343, 345, 
	343, 343, 347, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 343, 343, 343, 343, 343, 
	343, 343, 343, 348, 343, 345, 349, 345, 
	345, 345, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 345, 349, 351, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 352, 350, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 350, 350, 350, 350, 353, 350, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 354, 354, 354, 354, 354, 354, 354, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 354, 354, 354, 354, 13, 354, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 354, 354, 354, 354, 354, 13, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 354, 357, 356, 356, 356, 357, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 357, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 358, 358, 358, 358, 358, 
	358, 358, 358, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 359, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	360, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 361, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	362, 356, 356, 363, 356, 364, 365, 367, 
	367, 367, 367, 367, 367, 367, 367, 366, 
	368, 368, 368, 368, 368, 368, 368, 368, 
	366, 366, 369, 369, 38, 38, 38, 369, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 369, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 39, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 370, 
	38, 371, 372, 373, 373, 38, 38, 38, 
	373, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 373, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 39, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	374, 38, 37, 373, 375, 376, 377, 377, 
	25, 25, 25, 377, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 377, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 378, 25, 373, 19, 19, 
	19, 373, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 373, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 379, 19, 369, 25, 25, 25, 
	369, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 369, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 26, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	27, 25, 369, 380, 380, 380, 369, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 369, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 381, 380, 
	382, 383, 383, 380, 380, 380, 383, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 383, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 380, 384, 380, 
	383, 19, 19, 19, 383, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 383, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 379, 19, 385, 
	383, 383, 25, 25, 25, 383, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 383, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 27, 25, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 386, 386, 386, 386, 386, 386, 386, 
	387, 387, 387, 387, 387, 387, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	387, 387, 387, 387, 387, 387, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 388, 386, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 386, 386, 
	386, 386, 386, 386, 386, 389, 389, 389, 
	389, 389, 389, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 389, 389, 389, 
	389, 389, 389, 386, 390, 390, 390, 390, 
	390, 390, 390, 390, 390, 390, 386, 386, 
	386, 386, 386, 386, 386, 390, 390, 390, 
	390, 390, 390, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 390, 390, 390, 
	390, 390, 390, 386, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 386, 386, 
	386, 386, 386, 386, 386, 391, 391, 391, 
	391, 391, 391, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 391, 391, 391, 
	391, 391, 391, 386, 392, 395, 394, 394, 
	394, 395, 394, 394, 394, 394, 396, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 395, 
	394, 394, 394, 394, 394, 396, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 397, 394, 
	394, 394, 394, 394, 394, 394, 397, 397, 
	397, 397, 397, 397, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 397, 397, 
	397, 397, 397, 397, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 398, 394, 395, 394, 394, 394, 
	395, 394, 394, 394, 394, 393, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 395, 394, 
	394, 394, 394, 394, 393, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 394, 394, 
	394, 394, 394, 394, 394, 399, 399, 399, 
	399, 399, 399, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 399, 399, 399, 
	399, 399, 399, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 400, 394, 393, 395, 399, 399, 399, 
	395, 399, 399, 399, 399, 393, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 395, 399, 
	399, 399, 399, 399, 393, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 393, 399, 401, 395, 402, 402, 402, 
	395, 402, 402, 402, 402, 396, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 395, 402, 
	402, 402, 402, 402, 396, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 397, 397, 397, 397, 
	397, 397, 397, 397, 397, 397, 402, 402, 
	402, 402, 402, 402, 402, 397, 397, 397, 
	397, 397, 397, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 397, 397, 397, 
	397, 397, 397, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 393, 402, 395, 402, 402, 402, 395, 
	402, 402, 402, 402, 393, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 395, 402, 402, 
	402, 402, 402, 393, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 399, 402, 402, 402, 
	402, 402, 402, 402, 399, 399, 399, 399, 
	399, 399, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 399, 399, 399, 399, 
	399, 399, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	395, 402, 395, 402, 402, 402, 395, 402, 
	402, 402, 402, 403, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 395, 402, 402, 402, 
	402, 402, 403, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 402, 402, 402, 402, 
	402, 402, 402, 404, 404, 404, 404, 404, 
	404, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 404, 404, 404, 404, 404, 
	404, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 405, 
	402, 395, 402, 402, 402, 395, 402, 402, 
	402, 402, 403, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 395, 402, 402, 402, 402, 
	402, 403, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 402, 402, 402, 402, 402, 
	402, 402, 397, 397, 397, 397, 397, 397, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 397, 397, 397, 397, 397, 397, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 405, 402, 
	406, 395, 402, 402, 402, 395, 402, 402, 
	402, 402, 403, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 395, 402, 402, 402, 402, 
	402, 403, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 407, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 402, 402, 402, 402, 402, 
	402, 402, 407, 407, 407, 407, 407, 407, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 407, 407, 407, 407, 407, 407, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 405, 402, 
	395, 402, 402, 402, 395, 402, 402, 402, 
	402, 403, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 395, 402, 402, 402, 402, 402, 
	403, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 402, 402, 402, 402, 402, 402, 
	402, 408, 408, 408, 408, 408, 408, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 408, 408, 408, 408, 408, 408, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 405, 402, 395, 
	402, 402, 402, 395, 402, 402, 402, 402, 
	403, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 395, 402, 402, 402, 402, 402, 403, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 409, 
	409, 409, 409, 409, 409, 409, 409, 409, 
	409, 402, 402, 402, 402, 402, 402, 402, 
	409, 409, 409, 409, 409, 409, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	409, 409, 409, 409, 409, 409, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 405, 402, 395, 402, 
	402, 402, 395, 402, 402, 402, 402, 403, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	395, 402, 402, 402, 402, 402, 403, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 410, 410, 
	410, 410, 410, 410, 410, 410, 410, 410, 
	402, 402, 402, 402, 402, 402, 402, 410, 
	410, 410, 410, 410, 410, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 410, 
	410, 410, 410, 410, 410, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 405, 402, 395, 402, 402, 
	402, 395, 402, 402, 402, 402, 403, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 395, 
	402, 402, 402, 402, 402, 403, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 411, 411, 411, 
	411, 411, 411, 411, 411, 411, 411, 402, 
	402, 402, 402, 402, 402, 402, 411, 411, 
	411, 411, 411, 411, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 411, 411, 
	411, 411, 411, 411, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 405, 402, 395, 402, 402, 402, 
	395, 402, 402, 402, 402, 393, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 395, 402, 
	402, 402, 402, 402, 393, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 411, 411, 411, 411, 
	411, 411, 411, 411, 411, 411, 402, 402, 
	402, 402, 402, 402, 402, 411, 411, 411, 
	411, 411, 411, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 411, 411, 411, 
	411, 411, 411, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 393, 402, 412, 413, 415, 415, 415, 
	415, 415, 415, 415, 415, 415, 415, 414, 
	414, 414, 414, 414, 414, 414, 415, 415, 
	415, 415, 415, 415, 414, 414, 414, 414, 
	414, 414, 414, 414, 414, 414, 414, 414, 
	414, 414, 414, 414, 414, 414, 414, 414, 
	414, 414, 414, 414, 414, 414, 415, 415, 
	415, 415, 415, 415, 414, 414, 417, 416, 
	416, 416, 417, 416, 416, 416, 416, 416, 
	418, 416, 416, 416, 416, 416, 416, 416, 
	416, 416, 416, 416, 416, 416, 416, 416, 
	417, 416, 416, 416, 416, 416, 416, 416, 
	416, 419, 416, 416, 416, 416, 416, 416, 
	416, 416, 416, 416, 416, 416, 416, 416, 
	416, 416, 416, 416, 416, 416, 416, 416, 
	416, 416, 416, 416, 416, 416, 416, 416, 
	416, 416, 416, 416, 416, 416, 416, 416, 
	416, 416, 416, 416, 416, 416, 416, 416, 
	416, 416, 416, 416, 416, 416, 416, 416, 
	416, 416, 420, 416, 422, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 421, 421, 
	423, 421, 421, 421, 421, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 421, 421, 
	421, 421, 421, 421, 421, 421, 421, 421, 
	421, 421, 421, 424, 421, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 425, 425, 425, 
	425, 425, 425, 425, 425, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 425, 
	425, 425, 425, 425, 425, 425, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	425, 425, 425, 425, 44, 425, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	425, 425, 425, 425, 425, 44, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	425, 428, 427, 427, 427, 428, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 428, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 429, 429, 429, 429, 429, 429, 429, 
	429, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 430, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 431, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 432, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 433, 427, 
	427, 434, 427, 435, 436, 438, 438, 438, 
	438, 438, 438, 438, 438, 437, 439, 439, 
	439, 439, 439, 439, 439, 439, 437, 437, 
	440, 440, 69, 69, 69, 440, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 440, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 441, 69, 442, 
	443, 444, 444, 69, 69, 69, 444, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 444, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 70, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 445, 69, 
	68, 444, 446, 447, 448, 448, 56, 56, 
	56, 448, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 448, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 57, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 449, 56, 444, 50, 50, 50, 444, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 444, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	450, 50, 440, 56, 56, 56, 440, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 440, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 57, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 58, 56, 
	440, 451, 451, 451, 440, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 440, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 452, 451, 453, 454, 
	454, 451, 451, 451, 454, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 454, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 455, 451, 454, 50, 
	50, 50, 454, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	454, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 450, 50, 456, 454, 454, 
	56, 56, 56, 454, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 454, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 457, 
	457, 457, 457, 457, 457, 457, 458, 458, 
	458, 458, 458, 458, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 458, 458, 
	458, 458, 458, 458, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	459, 457, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 457, 457, 457, 457, 
	457, 457, 457, 460, 460, 460, 460, 460, 
	460, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 460, 460, 460, 460, 460, 
	460, 457, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 457, 457, 457, 457, 
	457, 457, 457, 461, 461, 461, 461, 461, 
	461, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 461, 461, 461, 461, 461, 
	461, 457, 462, 462, 462, 462, 462, 462, 
	462, 462, 462, 462, 457, 457, 457, 457, 
	457, 457, 457, 462, 462, 462, 462, 462, 
	462, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 457, 462, 462, 462, 462, 462, 
	462, 457, 463, 466, 465, 465, 465, 466, 
	465, 465, 465, 465, 467, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 466, 465, 465, 
	465, 465, 465, 467, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 465, 465, 465, 
	465, 465, 465, 465, 468, 468, 468, 468, 
	468, 468, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 468, 468, 468, 468, 
	468, 468, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	469, 465, 466, 465, 465, 465, 466, 465, 
	465, 465, 465, 464, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 466, 465, 465, 465, 
	465, 465, 464, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 465, 465, 465, 465, 
	465, 465, 465, 470, 470, 470, 470, 470, 
	470, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 470, 470, 470, 470, 470, 
	470, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 465, 471, 
	465, 464, 466, 470, 470, 470, 466, 470, 
	470, 470, 470, 464, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 466, 470, 470, 470, 
	470, 470, 464, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 464, 
	470, 472, 466, 473, 473, 473, 466, 473, 
	473, 473, 473, 467, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 466, 473, 473, 473, 
	473, 473, 467, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 473, 473, 473, 473, 
	473, 473, 473, 468, 468, 468, 468, 468, 
	468, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 468, 468, 468, 468, 468, 
	468, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 464, 
	473, 466, 473, 473, 473, 466, 473, 473, 
	473, 473, 464, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 466, 473, 473, 473, 473, 
	473, 464, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 473, 473, 473, 473, 473, 
	473, 473, 470, 470, 470, 470, 470, 470, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 470, 470, 470, 470, 470, 470, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 466, 473, 
	466, 473, 473, 473, 466, 473, 473, 473, 
	473, 474, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 466, 473, 473, 473, 473, 473, 
	474, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	475, 475, 475, 475, 475, 475, 475, 475, 
	475, 475, 473, 473, 473, 473, 473, 473, 
	473, 475, 475, 475, 475, 475, 475, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 475, 475, 475, 475, 475, 475, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 476, 473, 466, 
	473, 473, 473, 466, 473, 473, 473, 473, 
	474, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 466, 473, 473, 473, 473, 473, 474, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 473, 473, 473, 473, 473, 473, 473, 
	468, 468, 468, 468, 468, 468, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	468, 468, 468, 468, 468, 468, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 476, 473, 477, 466, 
	473, 473, 473, 466, 473, 473, 473, 473, 
	474, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 466, 473, 473, 473, 473, 473, 474, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 478, 
	478, 478, 478, 478, 478, 478, 478, 478, 
	478, 473, 473, 473, 473, 473, 473, 473, 
	478, 478, 478, 478, 478, 478, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	478, 478, 478, 478, 478, 478, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 476, 473, 466, 473, 
	473, 473, 466, 473, 473, 473, 473, 474, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	466, 473, 473, 473, 473, 473, 474, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	473, 473, 473, 473, 473, 473, 473, 479, 
	479, 479, 479, 479, 479, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 479, 
	479, 479, 479, 479, 479, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 476, 473, 466, 473, 473, 
	473, 466, 473, 473, 473, 473, 474, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 466, 
	473, 473, 473, 473, 473, 474, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 473, 
	473, 473, 473, 473, 473, 473, 480, 480, 
	480, 480, 480, 480, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 480, 480, 
	480, 480, 480, 480, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 476, 473, 466, 473, 473, 473, 
	466, 473, 473, 473, 473, 474, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 466, 473, 
	473, 473, 473, 473, 474, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 481, 481, 481, 481, 
	481, 481, 481, 481, 481, 481, 473, 473, 
	473, 473, 473, 473, 473, 481, 481, 481, 
	481, 481, 481, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 481, 481, 481, 
	481, 481, 481, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 476, 473, 466, 473, 473, 473, 466, 
	473, 473, 473, 473, 474, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 466, 473, 473, 
	473, 473, 473, 474, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 482, 482, 482, 482, 482, 
	482, 482, 482, 482, 482, 473, 473, 473, 
	473, 473, 473, 473, 482, 482, 482, 482, 
	482, 482, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 482, 482, 482, 482, 
	482, 482, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	476, 473, 466, 473, 473, 473, 466, 473, 
	473, 473, 473, 464, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 466, 473, 473, 473, 
	473, 473, 464, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 482, 482, 482, 482, 482, 482, 
	482, 482, 482, 482, 473, 473, 473, 473, 
	473, 473, 473, 482, 482, 482, 482, 482, 
	482, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 482, 482, 482, 482, 482, 
	482, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 473, 473, 473, 473, 473, 473, 464, 
	473, 483, 484, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 485, 485, 485, 
	485, 485, 485, 485, 486, 486, 486, 486, 
	486, 486, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 486, 486, 486, 486, 
	486, 486, 485, 485, 488, 487, 487, 487, 
	488, 487, 487, 487, 487, 489, 490, 489, 
	489, 489, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 488, 487, 
	487, 487, 487, 487, 489, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	491, 487, 489, 492, 489, 489, 489, 492, 
	492, 492, 492, 492, 492, 492, 492, 492, 
	492, 492, 492, 492, 492, 492, 492, 492, 
	492, 489, 492, 493, 494, 494, 494, 493, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 493, 494, 496, 
	495, 495, 495, 496, 495, 495, 495, 495, 
	495, 497, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 496, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 498, 495, 499, 500, 500, 
	500, 499, 500, 500, 500, 500, 500, 501, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 499, 
	500, 503, 502, 502, 502, 503, 502, 502, 
	502, 502, 502, 504, 502, 502, 502, 502, 
	502, 502, 502, 502, 502, 502, 502, 502, 
	502, 502, 502, 503, 502, 502, 502, 502, 
	502, 502, 502, 502, 505, 502, 507, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 508, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 509, 506, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 510, 510, 510, 510, 510, 510, 510, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 510, 510, 510, 510, 75, 510, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 510, 510, 510, 510, 510, 75, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 510, 512, 511, 511, 511, 512, 
	511, 511, 511, 511, 511, 513, 511, 511, 
	511, 511, 511, 511, 511, 511, 511, 511, 
	511, 511, 511, 511, 511, 512, 511, 515, 
	514, 514, 514, 515, 514, 514, 514, 514, 
	516, 517, 516, 516, 516, 514, 514, 514, 
	514, 514, 514, 514, 514, 514, 514, 514, 
	514, 515, 514, 514, 514, 514, 514, 516, 
	514, 514, 518, 514, 516, 519, 516, 516, 
	516, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 516, 519, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 522, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 523, 520, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	524, 524, 524, 524, 524, 524, 524, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 524, 524, 524, 524, 81, 524, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 524, 524, 524, 524, 524, 81, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 524, 526, 525, 525, 525, 526, 525, 
	525, 525, 525, 527, 528, 527, 527, 527, 
	525, 525, 525, 525, 525, 525, 525, 525, 
	525, 525, 525, 525, 526, 525, 525, 525, 
	525, 525, 527, 525, 527, 529, 527, 527, 
	527, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 527, 529, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 530, 
	530, 530, 530, 530, 530, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 530, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 532, 532, 532, 532, 532, 532, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 532, 533, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 534, 
	88, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 535, 535, 535, 535, 535, 
	535, 535, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 535, 535, 535, 535, 
	86, 535, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 535, 535, 535, 535, 
	535, 86, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 535, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 536, 
	536, 536, 536, 536, 536, 536, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	536, 536, 536, 536, 91, 536, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	536, 536, 536, 536, 536, 91, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	537, 537, 537, 537, 537, 537, 537, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 537, 537, 537, 537, 93, 537, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 537, 537, 537, 537, 537, 93, 539, 
	540, 540, 540, 539, 540, 540, 540, 540, 
	541, 542, 541, 541, 541, 540, 540, 540, 
	540, 540, 540, 540, 540, 540, 540, 540, 
	540, 539, 540, 540, 540, 540, 540, 541, 
	543, 540, 544, 545, 546, 547, 540, 540, 
	540, 548, 549, 540, 549, 540, 550, 540, 
	540, 540, 540, 540, 540, 540, 540, 540, 
	540, 551, 540, 552, 553, 554, 540, 540, 
	555, 556, 555, 555, 557, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 558, 559, 540, 550, 560, 550, 
	561, 562, 563, 564, 565, 566, 538, 538, 
	567, 538, 538, 538, 568, 569, 570, 538, 
	538, 571, 572, 573, 574, 538, 575, 538, 
	576, 538, 540, 577, 540, 549, 540, 538, 
	578, 578, 578, 578, 578, 578, 578, 578, 
	578, 578, 578, 578, 578, 578, 578, 578, 
	578, 578, 578, 578, 578, 578, 578, 578, 
	578, 578, 578, 578, 578, 578, 578, 578, 
	578, 579, 578, 578, 578, 578, 578, 578, 
	578, 578, 578, 578, 578, 578, 578, 578, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 578, 578, 578, 579, 578, 579, 
	578, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 578, 578, 578, 578, 538, 
	578, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 578, 578, 578, 578, 578, 
	538, 541, 580, 541, 541, 541, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	580, 580, 580, 580, 580, 580, 580, 580, 
	541, 580, 581, 550, 582, 582, 550, 582, 
	582, 582, 582, 582, 582, 582, 582, 582, 
	582, 582, 582, 582, 582, 582, 582, 582, 
	582, 582, 582, 582, 582, 582, 582, 582, 
	582, 582, 582, 582, 582, 582, 582, 582, 
	582, 582, 582, 582, 582, 582, 582, 582, 
	582, 582, 582, 582, 582, 582, 582, 582, 
	582, 582, 582, 582, 582, 582, 582, 582, 
	582, 582, 582, 582, 550, 582, 583, 584, 
	585, 586, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 95, 95, 587, 95, 587, 
	95, 95, 587, 587, 95, 95, 95, 589, 
	95, 95, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 95, 95, 95, 95, 
	95, 95, 95, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 587, 95, 587, 
	587, 588, 95, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 587, 587, 587, 
	95, 587, 588, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 591, 591, 591, 
	591, 591, 591, 591, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 591, 591, 
	591, 591, 588, 591, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 588, 588, 
	588, 588, 588, 588, 588, 588, 591, 591, 
	591, 591, 591, 588, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 591, 592, 
	582, 550, 582, 550, 582, 550, 582, 594, 
	593, 550, 595, 582, 550, 582, 596, 550, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 587, 
	587, 587, 587, 587, 587, 587, 587, 550, 
	587, 550, 582, 550, 550, 582, 578, 578, 
	578, 578, 578, 578, 578, 578, 578, 578, 
	578, 578, 578, 578, 578, 578, 578, 578, 
	578, 578, 578, 578, 578, 578, 578, 578, 
	578, 578, 578, 578, 578, 578, 578, 579, 
	578, 578, 578, 578, 578, 578, 578, 578, 
	578, 578, 578, 578, 578, 578, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	578, 578, 578, 579, 578, 579, 578, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 578, 578, 578, 578, 555, 578, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 578, 578, 578, 578, 578, 555, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	579, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 597, 597, 597, 579, 597, 579, 597, 
	555, 555, 555, 555, 598, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 597, 597, 597, 597, 555, 597, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 597, 597, 597, 597, 597, 555, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 579, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 597, 597, 597, 579, 597, 579, 
	597, 555, 555, 555, 555, 555, 555, 599, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 597, 597, 597, 597, 555, 
	597, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 597, 597, 597, 597, 597, 
	555, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 579, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 597, 597, 597, 579, 597, 
	579, 597, 555, 555, 555, 555, 555, 555, 
	555, 555, 600, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 597, 597, 597, 597, 
	555, 597, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 597, 597, 597, 597, 
	597, 555, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 579, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 597, 597, 597, 579, 
	597, 579, 597, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	601, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 597, 597, 597, 
	597, 555, 597, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 597, 597, 597, 
	597, 597, 555, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 579, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 597, 597, 597, 
	579, 597, 579, 597, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 602, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 597, 597, 
	597, 597, 555, 597, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 597, 597, 
	597, 597, 597, 555, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 597, 579, 597, 597, 
	597, 597, 597, 597, 597, 597, 597, 597, 
	597, 597, 597, 597, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 597, 597, 
	597, 579, 597, 579, 597, 555, 555, 555, 
	601, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 597, 
	597, 597, 597, 555, 597, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 597, 
	597, 597, 597, 597, 555, 596, 587, 542, 
	587, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	604, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 605, 
	606, 538, 538, 538, 538, 538, 607, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 608, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 579, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 579, 603, 579, 603, 538, 538, 609, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 538, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 603, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 610, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 611, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	612, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 579, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 613, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	614, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 615, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 616, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 579, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 579, 603, 579, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 617, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 538, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 603, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 618, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 538, 614, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	619, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 579, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 618, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 620, 538, 621, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 622, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 623, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 579, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 579, 603, 579, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 538, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 616, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 603, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 538, 538, 
	538, 616, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 624, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	625, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 538, 538, 538, 538, 626, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 579, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 627, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 616, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 628, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 629, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 579, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 579, 603, 579, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 538, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 616, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 603, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 630, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 631, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 632, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 538, 538, 616, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 579, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 633, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 623, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 634, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 616, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 538, 538, 538, 538, 
	538, 635, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 636, 579, 636, 636, 
	636, 636, 636, 636, 636, 636, 636, 636, 
	636, 636, 636, 636, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 636, 636, 
	636, 579, 636, 579, 636, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 636, 
	636, 636, 636, 538, 636, 538, 538, 538, 
	538, 538, 538, 538, 538, 637, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 636, 
	636, 636, 636, 636, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 638, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 639, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 538, 640, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 641, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 642, 538, 643, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 644, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 538, 538, 538, 538, 
	616, 538, 538, 538, 645, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 579, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 579, 603, 579, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 538, 603, 538, 538, 538, 
	538, 538, 616, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 603, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 538, 538, 
	538, 616, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	646, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 647, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 632, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 579, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 648, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 570, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 630, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 616, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 538, 538, 538, 538, 
	538, 616, 538, 538, 538, 538, 538, 538, 
	538, 616, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 579, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 579, 603, 579, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 538, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 649, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 603, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 538, 538, 
	538, 650, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 651, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 632, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 579, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 538, 538, 538, 538, 652, 538, 538, 
	538, 653, 538, 538, 538, 538, 538, 654, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 654, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 616, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 616, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 579, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 579, 603, 579, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 538, 603, 538, 538, 538, 
	538, 655, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 603, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 538, 538, 
	538, 656, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	657, 658, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 616, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 659, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 579, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 632, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 660, 538, 538, 661, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 616, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 627, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 579, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 579, 603, 579, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 538, 603, 538, 538, 538, 
	538, 662, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 663, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 603, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 645, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 664, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 538, 538, 570, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 579, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	665, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 659, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 627, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	666, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 538, 538, 538, 667, 
	538, 538, 538, 538, 538, 538, 538, 668, 
	538, 538, 538, 538, 538, 538, 538, 669, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 579, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 579, 603, 579, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 538, 603, 538, 538, 538, 
	538, 645, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 603, 603, 538, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 579, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 603, 
	603, 603, 579, 603, 579, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 538, 603, 538, 538, 
	538, 538, 633, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 603, 603, 538, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 579, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	603, 603, 603, 579, 603, 579, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 538, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 653, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 603, 603, 538, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	579, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 603, 603, 603, 579, 603, 579, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 538, 603, 
	538, 538, 538, 538, 538, 538, 538, 670, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 603, 603, 538, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 579, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 603, 603, 603, 579, 603, 579, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 538, 
	603, 538, 538, 538, 538, 627, 538, 538, 
	538, 651, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 603, 603, 
	538, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 579, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 603, 603, 603, 579, 603, 
	579, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	538, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 671, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 603, 
	603, 538, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 579, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 603, 603, 603, 579, 
	603, 579, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 538, 603, 538, 538, 538, 538, 672, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	603, 603, 538, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 579, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 603, 603, 603, 
	579, 603, 579, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 538, 603, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 621, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 603, 603, 
	603, 603, 603, 538, 550, 582, 674, 675, 
	675, 675, 674, 675, 675, 675, 675, 676, 
	675, 676, 676, 676, 675, 675, 675, 675, 
	675, 675, 675, 675, 675, 675, 675, 675, 
	674, 675, 675, 675, 675, 675, 676, 675, 
	675, 677, 675, 675, 675, 675, 675, 675, 
	675, 675, 675, 675, 675, 675, 675, 675, 
	675, 675, 675, 675, 675, 675, 675, 675, 
	675, 675, 675, 675, 675, 675, 675, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 675, 678, 675, 675, 673, 675, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 675, 675, 675, 675, 675, 673, 679, 
	679, 679, 679, 679, 679, 679, 679, 679, 
	679, 679, 679, 679, 679, 679, 679, 679, 
	679, 679, 679, 679, 679, 679, 679, 679, 
	679, 679, 679, 679, 679, 679, 679, 679, 
	100, 679, 679, 679, 679, 679, 679, 679, 
	679, 679, 679, 679, 679, 679, 679, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 101, 679, 679, 679, 679, 100, 679, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 679, 679, 679, 679, 99, 679, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 679, 679, 679, 679, 679, 99, 
	676, 680, 676, 676, 676, 680, 680, 680, 
	680, 680, 680, 680, 680, 680, 680, 680, 
	680, 680, 680, 680, 680, 680, 680, 676, 
	680, 681, 682, 683, 684, 685, 679, 686, 
	688, 689, 689, 689, 688, 689, 689, 689, 
	689, 690, 691, 690, 690, 690, 689, 689, 
	689, 689, 689, 689, 689, 689, 689, 689, 
	689, 689, 688, 689, 689, 689, 689, 689, 
	690, 692, 689, 693, 689, 694, 695, 689, 
	689, 689, 696, 697, 689, 697, 689, 694, 
	689, 689, 689, 689, 689, 689, 689, 689, 
	689, 689, 689, 689, 698, 699, 700, 689, 
	689, 701, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 702, 703, 689, 694, 687, 
	694, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 689, 704, 689, 697, 689, 
	687, 705, 705, 705, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 705, 705, 
	705, 705, 706, 705, 705, 705, 705, 705, 
	705, 705, 705, 705, 705, 705, 705, 705, 
	705, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 705, 705, 705, 705, 705, 
	706, 705, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 705, 705, 705, 705, 
	687, 705, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 687, 687, 687, 687, 
	687, 687, 687, 687, 705, 705, 705, 705, 
	705, 687, 708, 707, 709, 690, 710, 690, 
	690, 690, 710, 710, 710, 710, 710, 710, 
	710, 710, 710, 710, 710, 710, 710, 710, 
	710, 710, 710, 710, 690, 710, 711, 694, 
	712, 712, 694, 712, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	694, 712, 713, 714, 715, 716, 694, 712, 
	694, 712, 694, 712, 694, 717, 712, 694, 
	712, 719, 694, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 694, 718, 694, 712, 694, 694, 
	712, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 720, 706, 720, 720, 720, 720, 720, 
	720, 720, 720, 720, 720, 720, 720, 720, 
	720, 701, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 720, 720, 720, 720, 720, 
	706, 720, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 701, 720, 720, 720, 720, 
	701, 720, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 701, 701, 701, 701, 701, 
	701, 701, 701, 701, 720, 720, 720, 720, 
	720, 701, 719, 718, 691, 718, 694, 712, 
	722, 721, 721, 721, 722, 721, 721, 721, 
	721, 723, 724, 723, 723, 723, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 722, 721, 721, 721, 721, 721, 
	723, 721, 721, 725, 721, 109, 726, 721, 
	727, 721, 728, 109, 140, 729, 142, 109, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 730, 721, 731, 140, 732, 733, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 721, 140, 734, 140, 109, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 735, 721, 721, 721, 721, 721, 721, 
	721, 721, 736, 721, 721, 737, 721, 738, 
	721, 721, 721, 153, 154, 721, 109, 721, 
	739, 739, 739, 739, 739, 739, 739, 739, 
	739, 723, 739, 723, 723, 723, 739, 739, 
	739, 739, 739, 739, 739, 739, 739, 739, 
	739, 739, 739, 739, 739, 739, 739, 739, 
	723, 739, 739, 739, 739, 135, 136, 739, 
	137, 739, 138, 139, 140, 141, 142, 135, 
	739, 739, 739, 739, 739, 739, 739, 739, 
	739, 739, 143, 739, 144, 140, 145, 146, 
	739, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 147, 148, 140, 109, 104, 
	739, 104, 104, 104, 104, 104, 104, 104, 
	104, 149, 104, 104, 104, 104, 104, 104, 
	104, 104, 150, 104, 104, 151, 104, 152, 
	104, 104, 104, 153, 154, 739, 109, 739, 
	104, 740, 741, 741, 741, 740, 741, 741, 
	741, 741, 140, 742, 140, 140, 140, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 740, 741, 741, 741, 741, 
	741, 140, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 741, 741, 
	741, 741, 741, 741, 741, 741, 140, 741, 
	140, 742, 140, 140, 140, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 140, 
	103, 103, 103, 103, 103, 109, 103, 103, 
	103, 103, 103, 103, 103, 140, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 140, 103, 140, 742, 
	140, 140, 140, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 140, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 140, 103, 743, 140, 742, 140, 
	140, 140, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 140, 744, 744, 744, 
	744, 744, 744, 744, 744, 744, 745, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	744, 140, 744, 140, 742, 140, 140, 140, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 140, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 140, 
	140, 103, 746, 740, 140, 740, 748, 747, 
	750, 751, 750, 750, 750, 749, 749, 749, 
	749, 749, 749, 749, 749, 749, 749, 749, 
	749, 749, 749, 749, 749, 749, 749, 750, 
	749, 752, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 105, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 106, 740, 740, 740, 
	740, 105, 740, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 740, 740, 740, 
	740, 104, 740, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 740, 740, 740, 
	740, 740, 104, 753, 140, 742, 140, 140, 
	140, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 140, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	140, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 109, 
	740, 754, 755, 756, 757, 758, 759, 140, 
	742, 140, 140, 140, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 140, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	109, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 140, 740, 140, 747, 109, 
	760, 109, 760, 761, 762, 761, 761, 761, 
	749, 749, 749, 749, 749, 749, 749, 749, 
	749, 749, 749, 749, 749, 749, 749, 749, 
	749, 749, 761, 749, 763, 760, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 112, 
	764, 112, 112, 112, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	764, 764, 764, 764, 764, 764, 112, 764, 
	764, 764, 764, 113, 114, 764, 115, 764, 
	116, 117, 118, 119, 120, 113, 764, 764, 
	764, 764, 764, 764, 764, 764, 764, 764, 
	121, 764, 122, 118, 123, 124, 764, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 125, 126, 118, 127, 111, 764, 111, 
	111, 111, 111, 111, 111, 111, 111, 128, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	129, 111, 111, 130, 111, 131, 111, 111, 
	111, 132, 133, 764, 127, 764, 111, 140, 
	760, 765, 760, 766, 760, 767, 760, 768, 
	179, 179, 179, 768, 179, 179, 179, 179, 
	769, 179, 769, 769, 769, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 768, 179, 179, 179, 179, 179, 769, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 179, 770, 179, 179, 181, 179, 
	181, 181, 181, 185, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 179, 179, 179, 179, 179, 181, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 771, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 179, 178, 178, 178, 178, 771, 
	178, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 178, 178, 178, 178, 181, 
	178, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 178, 178, 178, 178, 178, 
	181, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 182, 772, 182, 182, 182, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 182, 772, 772, 772, 772, 772, 772, 
	772, 183, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 772, 184, 772, 772, 
	181, 772, 181, 181, 181, 185, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 772, 772, 772, 772, 
	772, 181, 773, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 771, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 179, 772, 772, 
	772, 772, 771, 772, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 772, 772, 
	772, 772, 181, 772, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 774, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 772, 772, 
	772, 772, 772, 181, 186, 772, 776, 775, 
	775, 775, 776, 775, 775, 775, 775, 777, 
	775, 777, 777, 777, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	776, 775, 775, 775, 775, 775, 777, 775, 
	775, 778, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 779, 775, 775, 775, 775, 775, 
	775, 775, 780, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 781, 775, 777, 782, 777, 777, 777, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 777, 782, 783, 784, 785, 786, 
	788, 787, 789, 790, 787, 791, 793, 794, 
	794, 794, 793, 794, 794, 794, 794, 795, 
	796, 795, 795, 795, 794, 794, 794, 794, 
	794, 794, 794, 794, 794, 794, 794, 794, 
	793, 794, 794, 794, 794, 794, 795, 794, 
	794, 797, 794, 794, 794, 794, 794, 794, 
	794, 794, 794, 794, 794, 794, 794, 794, 
	794, 794, 794, 794, 794, 794, 794, 794, 
	794, 794, 794, 794, 794, 794, 794, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 794, 798, 794, 794, 792, 794, 792, 
	792, 792, 792, 792, 792, 792, 792, 799, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	800, 792, 792, 801, 792, 802, 792, 792, 
	792, 794, 794, 794, 794, 794, 792, 803, 
	803, 803, 803, 803, 803, 803, 803, 803, 
	803, 803, 803, 803, 803, 803, 803, 803, 
	803, 803, 803, 803, 803, 803, 803, 803, 
	803, 803, 803, 803, 803, 803, 803, 803, 
	803, 803, 803, 803, 803, 803, 803, 803, 
	803, 803, 803, 803, 803, 803, 803, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 803, 803, 803, 803, 803, 803, 803, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 803, 803, 803, 803, 792, 803, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 803, 803, 803, 803, 803, 792, 
	795, 804, 795, 795, 795, 804, 804, 804, 
	804, 804, 804, 804, 804, 804, 804, 804, 
	804, 804, 804, 804, 804, 804, 804, 795, 
	804, 805, 806, 807, 808, 809, 811, 810, 
	812, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 813, 813, 813, 813, 813, 
	813, 813, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 813, 813, 813, 813, 
	792, 813, 792, 792, 792, 792, 792, 814, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 813, 813, 813, 813, 
	813, 792, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 813, 813, 813, 813, 
	813, 813, 813, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 813, 813, 813, 
	813, 792, 813, 792, 792, 792, 792, 815, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 813, 813, 813, 
	813, 813, 792, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 813, 813, 813, 
	813, 813, 813, 813, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 813, 813, 
	813, 813, 792, 813, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 816, 792, 
	792, 792, 792, 792, 792, 792, 813, 813, 
	813, 813, 813, 792, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 813, 813, 
	813, 813, 813, 813, 813, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 813, 
	813, 813, 813, 792, 813, 792, 792, 817, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 813, 
	813, 813, 813, 813, 792, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 813, 
	813, 813, 813, 813, 813, 813, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	813, 813, 813, 813, 792, 813, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 818, 792, 792, 792, 792, 792, 
	813, 813, 813, 813, 813, 792, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	813, 813, 813, 813, 813, 813, 813, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 813, 813, 813, 813, 792, 813, 792, 
	792, 792, 792, 814, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 813, 813, 813, 813, 813, 792, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 813, 813, 813, 813, 813, 813, 813, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 813, 813, 813, 813, 792, 813, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 819, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 813, 813, 813, 813, 813, 792, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 813, 813, 813, 813, 813, 813, 
	813, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 813, 813, 813, 813, 792, 
	813, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 820, 792, 792, 792, 
	792, 792, 792, 792, 821, 792, 792, 792, 
	792, 792, 792, 813, 813, 813, 813, 813, 
	792, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 813, 813, 813, 813, 813, 
	813, 813, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 813, 813, 813, 813, 
	792, 813, 792, 792, 792, 792, 822, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 813, 813, 813, 813, 
	813, 792, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 813, 813, 813, 813, 
	813, 813, 813, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 813, 813, 813, 
	813, 792, 813, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 823, 792, 792, 
	792, 792, 792, 792, 792, 813, 813, 813, 
	813, 813, 792, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 813, 813, 813, 
	813, 813, 813, 813, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 813, 813, 
	813, 813, 792, 813, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 814, 792, 
	792, 792, 792, 792, 792, 792, 813, 813, 
	813, 813, 813, 792, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 813, 813, 
	813, 813, 813, 813, 813, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 813, 
	813, 813, 813, 792, 813, 792, 792, 792, 
	792, 792, 792, 792, 792, 824, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 813, 
	813, 813, 813, 813, 792, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 813, 
	813, 813, 813, 813, 813, 813, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	813, 813, 813, 813, 792, 813, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 814, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	813, 813, 813, 813, 813, 792, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	813, 813, 813, 813, 813, 813, 813, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 813, 813, 813, 813, 792, 813, 792, 
	792, 792, 792, 792, 792, 792, 825, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 813, 813, 813, 813, 813, 792, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 813, 813, 813, 813, 813, 813, 813, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 813, 813, 813, 813, 792, 813, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	826, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 813, 813, 813, 813, 813, 792, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	813, 813, 813, 813, 813, 813, 813, 813, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 813, 813, 813, 813, 813, 813, 
	813, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 813, 813, 813, 813, 792, 
	813, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 792, 818, 792, 792, 792, 
	792, 792, 792, 792, 792, 792, 792, 792, 
	792, 792, 792, 813, 813, 813, 813, 813, 
	792, 828, 203, 203, 203, 828, 203, 203, 
	203, 203, 829, 830, 829, 829, 829, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 828, 203, 203, 203, 203, 
	203, 829, 831, 203, 832, 203, 833, 834, 
	203, 835, 203, 836, 837, 203, 838, 839, 
	840, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 841, 203, 842, 843, 844, 
	845, 203, 846, 847, 846, 846, 848, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 849, 850, 203, 851, 
	852, 203, 853, 854, 855, 856, 857, 858, 
	827, 827, 859, 827, 827, 827, 860, 861, 
	862, 827, 827, 863, 864, 865, 866, 827, 
	867, 827, 868, 827, 869, 870, 203, 851, 
	203, 827, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 271, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 192, 192, 273, 
	192, 271, 192, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 192, 192, 192, 
	192, 827, 192, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 192, 192, 192, 
	192, 192, 827, 872, 871, 871, 873, 871, 
	874, 876, 877, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 878, 875, 880, 879, 881, 882, 
	883, 829, 884, 829, 829, 829, 884, 884, 
	884, 884, 884, 884, 884, 884, 884, 884, 
	884, 884, 884, 884, 884, 884, 884, 884, 
	829, 884, 886, 885, 888, 889, 888, 888, 
	888, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 887, 887, 888, 887, 203, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 203, 890, 
	891, 892, 893, 894, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 896, 896, 
	896, 896, 896, 896, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 896, 898, 
	201, 201, 201, 898, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 898, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 201, 201, 201, 201, 201, 201, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 201, 900, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 203, 899, 901, 903, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	902, 902, 902, 902, 902, 902, 902, 902, 
	203, 902, 203, 192, 204, 205, 204, 204, 
	204, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 204, 899, 899, 206, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 899, 899, 899, 
	203, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 208, 
	899, 221, 222, 221, 221, 221, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	221, 220, 220, 223, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 225, 220, 204, 205, 
	204, 204, 204, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 204, 899, 899, 
	206, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 899, 
	899, 899, 203, 203, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 208, 899, 905, 890, 203, 890, 890, 
	906, 906, 906, 890, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 890, 906, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 908, 909, 890, 910, 
	229, 911, 909, 890, 890, 912, 913, 890, 
	913, 890, 229, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 914, 890, 915, 
	916, 917, 890, 918, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 919, 890, 
	890, 229, 907, 229, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 890, 920, 
	890, 913, 890, 907, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 922, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 921, 921, 
	921, 923, 921, 922, 921, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 921, 
	921, 921, 921, 907, 921, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 921, 
	921, 921, 921, 921, 907, 925, 924, 926, 
	928, 929, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 930, 927, 932, 933, 931, 934, 935, 
	936, 937, 229, 921, 921, 229, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 229, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 921, 
	921, 921, 921, 921, 921, 921, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	921, 921, 921, 921, 228, 921, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	921, 921, 921, 921, 921, 228, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	921, 229, 921, 229, 921, 229, 921, 229, 
	938, 921, 229, 921, 229, 921, 229, 229, 
	921, 229, 921, 939, 940, 890, 941, 203, 
	890, 851, 203, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 203, 890, 203, 900, 890, 944, 
	943, 943, 943, 944, 943, 943, 943, 943, 
	945, 946, 945, 945, 945, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 944, 943, 943, 943, 943, 943, 945, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 943, 948, 943, 943, 947, 943, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 943, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 950, 950, 950, 
	950, 950, 950, 950, 950, 950, 950, 950, 
	950, 950, 950, 950, 950, 950, 950, 950, 
	950, 950, 950, 950, 950, 950, 950, 949, 
	949, 949, 949, 950, 949, 950, 950, 950, 
	950, 950, 950, 950, 950, 950, 950, 950, 
	950, 950, 950, 950, 950, 950, 950, 950, 
	950, 950, 950, 950, 950, 950, 950, 949, 
	949, 949, 949, 949, 950, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 951, 951, 951, 
	951, 951, 951, 951, 951, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 951, 
	951, 951, 951, 951, 951, 951, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	951, 951, 951, 951, 952, 951, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	951, 951, 951, 951, 951, 952, 955, 954, 
	954, 954, 955, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	955, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 956, 956, 
	956, 956, 956, 956, 956, 956, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 957, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 958, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 959, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 960, 954, 954, 961, 954, 
	962, 963, 965, 965, 965, 965, 965, 965, 
	965, 965, 964, 966, 966, 966, 966, 966, 
	966, 966, 966, 964, 964, 967, 967, 265, 
	265, 265, 967, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	967, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 266, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 968, 265, 969, 970, 971, 971, 
	265, 265, 265, 971, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 971, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 266, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 972, 265, 264, 971, 973, 
	974, 975, 975, 252, 252, 252, 975, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 975, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 253, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 976, 252, 
	971, 246, 246, 246, 971, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 971, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 977, 246, 967, 
	252, 252, 252, 967, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 967, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 253, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 254, 252, 967, 978, 978, 
	978, 967, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 967, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 979, 978, 980, 981, 981, 978, 978, 
	978, 981, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 981, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 978, 978, 978, 
	978, 982, 978, 981, 246, 246, 246, 981, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 981, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	977, 246, 983, 981, 981, 252, 252, 252, 
	981, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 981, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 253, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	254, 252, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 984, 984, 984, 984, 
	984, 984, 984, 985, 985, 985, 985, 985, 
	985, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 985, 985, 985, 985, 985, 
	985, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 986, 984, 987, 
	987, 987, 987, 987, 987, 987, 987, 987, 
	987, 984, 984, 984, 984, 984, 984, 984, 
	987, 987, 987, 987, 987, 987, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	987, 987, 987, 987, 987, 987, 984, 988, 
	988, 988, 988, 988, 988, 988, 988, 988, 
	988, 984, 984, 984, 984, 984, 984, 984, 
	988, 988, 988, 988, 988, 988, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	988, 988, 988, 988, 988, 988, 984, 989, 
	989, 989, 989, 989, 989, 989, 989, 989, 
	989, 984, 984, 984, 984, 984, 984, 984, 
	989, 989, 989, 989, 989, 989, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	989, 989, 989, 989, 989, 989, 984, 990, 
	993, 992, 992, 992, 993, 992, 992, 992, 
	992, 994, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 993, 992, 992, 992, 992, 992, 
	994, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	995, 995, 995, 995, 995, 995, 995, 995, 
	995, 995, 992, 992, 992, 992, 992, 992, 
	992, 995, 995, 995, 995, 995, 995, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 995, 995, 995, 995, 995, 995, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 996, 992, 993, 
	992, 992, 992, 993, 992, 992, 992, 992, 
	991, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 993, 992, 992, 992, 992, 992, 991, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 992, 992, 992, 992, 992, 992, 992, 
	997, 997, 997, 997, 997, 997, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	997, 997, 997, 997, 997, 997, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 998, 992, 991, 993, 
	997, 997, 997, 993, 997, 997, 997, 997, 
	991, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 993, 997, 997, 997, 997, 997, 991, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	997, 997, 997, 997, 991, 997, 999, 993, 
	1000, 1000, 1000, 993, 1000, 1000, 1000, 1000, 
	994, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 993, 1000, 1000, 1000, 1000, 1000, 994, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1001, 1001, 1001, 1001, 1001, 1001, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1001, 1001, 1001, 1001, 1001, 1001, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 991, 1000, 993, 1000, 
	1000, 1000, 993, 1000, 1000, 1000, 1000, 991, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	993, 1000, 1000, 1000, 1000, 1000, 991, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 997, 997, 
	997, 997, 997, 997, 997, 997, 997, 997, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 997, 
	997, 997, 997, 997, 997, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 997, 
	997, 997, 997, 997, 997, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 993, 1000, 993, 1000, 1000, 
	1000, 993, 1000, 1000, 1000, 1000, 1002, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 993, 
	1000, 1000, 1000, 1000, 1000, 1002, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1003, 1003, 1003, 
	1003, 1003, 1003, 1003, 1003, 1003, 1003, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1003, 1003, 
	1003, 1003, 1003, 1003, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1003, 1003, 
	1003, 1003, 1003, 1003, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1004, 1000, 993, 1000, 1000, 1000, 
	993, 1000, 1000, 1000, 1000, 1002, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 993, 1000, 
	1000, 1000, 1000, 1000, 1002, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001, 
	1001, 1001, 1001, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1001, 1001, 1001, 
	1001, 1001, 1001, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1004, 1000, 1005, 993, 1000, 1000, 1000, 
	993, 1000, 1000, 1000, 1000, 1002, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 993, 1000, 
	1000, 1000, 1000, 1000, 1002, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1006, 1006, 1006, 1006, 
	1006, 1006, 1006, 1006, 1006, 1006, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1006, 1006, 1006, 
	1006, 1006, 1006, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1006, 1006, 1006, 
	1006, 1006, 1006, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1004, 1000, 993, 1000, 1000, 1000, 993, 
	1000, 1000, 1000, 1000, 1002, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 993, 1000, 1000, 
	1000, 1000, 1000, 1002, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1007, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1007, 1007, 1007, 1007, 
	1007, 1007, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1007, 1007, 1007, 1007, 
	1007, 1007, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1004, 1000, 993, 1000, 1000, 1000, 993, 1000, 
	1000, 1000, 1000, 1002, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 993, 1000, 1000, 1000, 
	1000, 1000, 1002, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1008, 1008, 1008, 1008, 1008, 1008, 
	1008, 1008, 1008, 1008, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1008, 1008, 1008, 1008, 1008, 
	1008, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1008, 1008, 1008, 1008, 1008, 
	1008, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1004, 
	1000, 993, 1000, 1000, 1000, 993, 1000, 1000, 
	1000, 1000, 1002, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 993, 1000, 1000, 1000, 1000, 
	1000, 1002, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 
	1009, 1009, 1009, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1009, 1009, 1009, 1009, 1009, 1009, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1009, 1009, 1009, 1009, 1009, 1009, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1004, 1000, 
	993, 1000, 1000, 1000, 993, 1000, 1000, 1000, 
	1000, 1002, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 993, 1000, 1000, 1000, 1000, 1000, 
	1002, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1010, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1010, 1010, 1010, 1010, 1010, 1010, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1010, 1010, 1010, 1010, 1010, 1010, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1004, 1000, 993, 
	1000, 1000, 1000, 993, 1000, 1000, 1000, 1000, 
	991, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 993, 1000, 1000, 1000, 1000, 1000, 991, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1010, 1010, 1010, 1010, 1010, 1010, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1010, 1010, 1010, 1010, 1010, 1010, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 991, 1000, 993, 1000, 
	1000, 1000, 993, 1000, 1000, 1000, 1000, 1011, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	993, 1000, 1000, 1000, 1000, 1000, 1011, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1012, 
	1012, 1012, 1012, 1012, 1012, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1012, 
	1012, 1012, 1012, 1012, 1012, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1004, 1000, 993, 1000, 1000, 
	1000, 993, 1000, 1000, 1000, 1000, 1011, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 993, 
	1000, 1000, 1000, 1000, 1000, 1011, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1013, 1013, 1013, 
	1013, 1013, 1013, 1013, 1013, 1013, 1013, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1013, 1013, 
	1013, 1013, 1013, 1013, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1013, 1013, 
	1013, 1013, 1013, 1013, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1004, 1000, 993, 1000, 1000, 1000, 
	993, 1000, 1000, 1000, 1000, 1011, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 993, 1000, 
	1000, 1000, 1000, 1000, 1011, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1014, 1014, 1014, 1014, 
	1014, 1014, 1014, 1014, 1014, 1014, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1014, 1014, 1014, 
	1014, 1014, 1014, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1014, 1014, 1014, 
	1014, 1014, 1014, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 991, 1000, 993, 1000, 1000, 1000, 993, 
	1000, 1000, 1000, 1000, 1011, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 993, 1000, 1000, 
	1000, 1000, 1000, 1011, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1015, 1015, 1015, 1015, 1015, 
	1015, 1015, 1015, 1015, 1015, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1015, 1015, 1015, 1015, 
	1015, 1015, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1015, 1015, 1015, 1015, 
	1015, 1015, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	991, 1000, 993, 1000, 1000, 1000, 993, 1000, 
	1000, 1000, 1000, 1011, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 993, 1000, 1000, 1000, 
	1000, 1000, 1011, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1016, 1016, 1016, 1016, 1016, 1016, 
	1016, 1016, 1016, 1016, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1016, 1016, 1016, 1016, 1016, 
	1016, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1016, 1016, 1016, 1016, 1016, 
	1016, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 991, 
	1000, 993, 1000, 1000, 1000, 993, 1000, 1000, 
	1000, 1000, 1011, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 993, 1000, 1000, 1000, 1000, 
	1000, 1011, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 
	1017, 1017, 1017, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1017, 1017, 1017, 1017, 1017, 1017, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1017, 1017, 1017, 1017, 1017, 1017, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 991, 1000, 
	993, 1000, 1000, 1000, 993, 1000, 1000, 1000, 
	1000, 1011, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 993, 1000, 1000, 1000, 1000, 1000, 
	1011, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1018, 1018, 1018, 1018, 1018, 1018, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1018, 1018, 1018, 1018, 1018, 1018, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 991, 1000, 993, 
	1000, 1000, 1000, 993, 1000, 1000, 1000, 1000, 
	1011, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 993, 1000, 1000, 1000, 1000, 1000, 1011, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1010, 1010, 1010, 1010, 1010, 1010, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1010, 1010, 1010, 1010, 1010, 1010, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 991, 1000, 993, 1000, 
	1000, 1000, 993, 1000, 1000, 1000, 1000, 1011, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	993, 1000, 1000, 1000, 1000, 1000, 1011, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1019, 1019, 
	1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1019, 
	1019, 1019, 1019, 1019, 1019, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1019, 
	1019, 1019, 1019, 1019, 1019, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1004, 1000, 993, 1000, 1000, 
	1000, 993, 1000, 1000, 1000, 1000, 1011, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 993, 
	1000, 1000, 1000, 1000, 1000, 1011, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1020, 1020, 1020, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1020, 1020, 
	1020, 1020, 1020, 1020, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1020, 1020, 
	1020, 1020, 1020, 1020, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1004, 1000, 993, 1000, 1000, 1000, 
	993, 1000, 1000, 1000, 1000, 1011, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 993, 1000, 
	1000, 1000, 1000, 1000, 1011, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1021, 1021, 1021, 
	1021, 1021, 1021, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1021, 1021, 1021, 
	1021, 1021, 1021, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1004, 1000, 993, 1000, 1000, 1000, 993, 
	1000, 1000, 1000, 1000, 1011, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 993, 1000, 1000, 
	1000, 1000, 1000, 1011, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1022, 1022, 1022, 1022, 1022, 
	1022, 1022, 1022, 1022, 1022, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1022, 1022, 1022, 1022, 
	1022, 1022, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1022, 1022, 1022, 1022, 
	1022, 1022, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1004, 1000, 993, 1000, 1000, 1000, 993, 1000, 
	1000, 1000, 1000, 1011, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 993, 1000, 1000, 1000, 
	1000, 1000, 1011, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1010, 1010, 1010, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1010, 1010, 1010, 1010, 1010, 
	1010, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1010, 1010, 1010, 1010, 1010, 
	1010, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1004, 
	1000, 1023, 1024, 1026, 1026, 1026, 1026, 1026, 
	1026, 1026, 1026, 1026, 1026, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1026, 1026, 1026, 1026, 
	1026, 1026, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1026, 1026, 1026, 1026, 
	1026, 1026, 1025, 1025, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 271, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 272, 192, 
	192, 273, 192, 271, 192, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 192, 
	192, 192, 192, 270, 192, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 192, 
	192, 192, 192, 192, 270, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 271, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 272, 
	890, 890, 273, 890, 271, 890, 270, 270, 
	270, 270, 1027, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	890, 890, 890, 890, 270, 890, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	890, 890, 890, 890, 890, 270, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 271, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	272, 890, 890, 273, 890, 271, 890, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 1028, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 890, 890, 890, 890, 270, 890, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	270, 890, 890, 890, 890, 890, 270, 1029, 
	1030, 890, 885, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1032, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 1033, 1034, 827, 827, 827, 827, 827, 
	1035, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1036, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 1037, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1038, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 1039, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 1040, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1041, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 1042, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1043, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1044, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 1045, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1046, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 827, 1042, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 1047, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1046, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1048, 
	827, 1049, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 1050, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 1051, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1044, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	827, 827, 827, 1044, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 1052, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1053, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 827, 827, 827, 
	1054, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 1055, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1044, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 827, 827, 827, 
	827, 1056, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 1057, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1044, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	1058, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1059, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1060, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 827, 1044, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 1061, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1051, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 827, 827, 827, 
	827, 1062, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1044, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 827, 827, 
	827, 827, 827, 1044, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1063, 827, 1064, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1065, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 1044, 827, 827, 
	827, 1062, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 1044, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1066, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1067, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1060, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 1068, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 862, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1058, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1044, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	827, 827, 827, 827, 827, 1069, 827, 827, 
	827, 827, 827, 827, 827, 1044, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1070, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 1071, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1072, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1060, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 827, 827, 827, 
	827, 1073, 827, 827, 827, 1074, 827, 827, 
	827, 827, 827, 1075, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1075, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1044, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1044, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 1076, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 1077, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1078, 1079, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1044, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 1080, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1081, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 827, 827, 
	827, 827, 1082, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1083, 1083, 
	1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 
	1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 
	1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 
	1083, 1083, 1083, 1083, 1083, 1083, 1083, 1085, 
	1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 
	1083, 1083, 1083, 1083, 1083, 1083, 1084, 1084, 
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 
	1086, 1083, 1083, 1087, 1083, 1085, 1083, 1084, 
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 
	1084, 1083, 1083, 1083, 1083, 1084, 1083, 1084, 
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 
	1084, 1083, 1083, 1083, 1083, 1083, 1084, 876, 
	1088, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	878, 875, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1089, 827, 827, 1090, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1044, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1055, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 827, 827, 
	827, 827, 1091, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1092, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1062, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1093, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 862, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 827, 827, 827, 
	827, 1094, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1095, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 1055, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1060, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1096, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 827, 827, 
	827, 1097, 827, 827, 827, 827, 827, 827, 
	827, 1098, 827, 827, 827, 827, 827, 827, 
	827, 1099, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 1062, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	827, 827, 827, 827, 1100, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1101, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1069, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 1102, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 271, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 272, 1031, 1031, 
	273, 1031, 271, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 827, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1069, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1031, 1031, 
	1031, 1031, 1031, 827, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 271, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 272, 1031, 
	1031, 273, 1031, 271, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 827, 1031, 827, 827, 827, 
	827, 827, 827, 827, 1103, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 1031, 
	1031, 1031, 1031, 1031, 827, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 271, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 272, 
	1031, 1031, 273, 1031, 271, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 827, 1031, 827, 827, 
	827, 827, 1055, 827, 827, 827, 1104, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	1031, 1031, 1031, 1031, 1031, 827, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 271, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	272, 1031, 1031, 273, 1031, 271, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 827, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1105, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 1031, 1031, 1031, 1031, 1031, 827, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	271, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 272, 1031, 1031, 273, 1031, 271, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 827, 1031, 
	827, 827, 827, 827, 1069, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 1031, 1031, 1031, 1031, 1031, 827, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 271, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 272, 1031, 1031, 273, 1031, 271, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 827, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 1106, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 1031, 1031, 1031, 1031, 1031, 
	827, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 271, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 272, 1031, 1031, 273, 1031, 
	271, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	827, 1031, 827, 827, 827, 827, 1107, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 1031, 1031, 1031, 1031, 
	1031, 827, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 271, 1031, 1031, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1031, 1031, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 272, 1031, 1031, 273, 
	1031, 271, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 827, 1031, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 827, 1049, 827, 
	827, 827, 827, 827, 827, 827, 827, 827, 
	827, 827, 827, 827, 827, 1031, 1031, 1031, 
	1031, 1031, 827, 1108, 203, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 900, 890, 1110, 1109, 1109, 
	1109, 1110, 1109, 1109, 1109, 1109, 1111, 1112, 
	1111, 1111, 1111, 1109, 1109, 1109, 1109, 1109, 
	1109, 1109, 1109, 1109, 1109, 1109, 1109, 1110, 
	1109, 1109, 1109, 1109, 1109, 1111, 1109, 1109, 
	1113, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 
	1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 
	1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 
	1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 
	1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 
	1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 
	1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 
	1109, 1114, 1109, 1111, 1115, 1111, 1111, 1111, 
	1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 
	1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 
	1115, 1115, 1111, 1115, 1116, 1117, 1118, 1119, 
	1120, 1122, 1121, 1123, 1125, 1126, 1126, 1126, 
	1125, 1126, 1126, 1126, 1126, 1127, 1128, 1127, 
	1127, 1127, 1126, 1126, 1126, 1126, 1126, 1126, 
	1126, 1126, 1126, 1126, 1126, 1126, 1125, 1126, 
	1126, 1126, 1126, 1126, 1127, 1126, 1129, 1130, 
	1126, 1126, 1126, 1129, 1126, 1126, 1126, 1126, 
	1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 
	1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 
	1126, 1126, 1126, 1126, 1126, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1126, 
	1131, 1126, 1126, 1124, 1126, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1126, 
	1126, 1126, 1126, 1126, 1124, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 279, 1132, 
	1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 
	1132, 1132, 1132, 1132, 1132, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 280, 
	1132, 1132, 1132, 1132, 279, 1132, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	1132, 1132, 1132, 1132, 278, 1132, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	1132, 1132, 1132, 1132, 1132, 278, 1127, 1133, 
	1127, 1127, 1127, 1133, 1133, 1133, 1133, 1133, 
	1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 
	1133, 1133, 1133, 1133, 1133, 1127, 1133, 1134, 
	1135, 1136, 1137, 1138, 1139, 1132, 1140, 1142, 
	1143, 1143, 1143, 1142, 1143, 1143, 1143, 1143, 
	1144, 1145, 1144, 1144, 1144, 1143, 1143, 1143, 
	1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 
	1143, 1142, 1143, 1143, 1143, 1143, 1143, 1144, 
	1146, 1147, 1148, 1149, 1150, 1151, 1147, 1152, 
	1153, 1154, 1150, 1155, 1156, 1157, 1150, 1158, 
	1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 
	1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 
	1167, 1168, 1167, 1167, 1169, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1170, 1171, 1172, 1150, 1173, 1147, 
	1174, 1175, 1176, 1177, 1178, 1179, 1141, 1141, 
	1180, 1141, 1141, 1141, 1181, 1182, 1183, 1141, 
	1141, 1184, 1185, 1186, 1187, 1141, 1188, 1141, 
	1189, 1141, 1190, 1191, 1192, 1150, 1143, 1141, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 1193, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 288, 288, 288, 288, 288, 1193, 
	288, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 288, 288, 288, 288, 1141, 
	288, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 288, 288, 288, 288, 288, 
	1141, 1195, 1194, 1196, 1144, 1197, 1144, 1144, 
	1144, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 
	1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 
	1197, 1197, 1197, 1144, 1197, 1198, 1200, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200, 
	1199, 1201, 1202, 1203, 1204, 1205, 1205, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 283, 283, 
	1205, 283, 1205, 283, 283, 1205, 1205, 283, 
	283, 283, 1206, 283, 283, 1207, 1207, 1207, 
	1207, 1207, 1207, 1207, 1207, 1207, 1207, 283, 
	283, 283, 283, 283, 283, 283, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	1205, 283, 1205, 1205, 291, 283, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	1205, 1205, 1205, 283, 1205, 291, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 1208, 1208, 1208, 1208, 291, 1208, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 1208, 1208, 1208, 1208, 1208, 291, 1207, 
	1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 
	1207, 1208, 1209, 1199, 1150, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1210, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1209, 1199, 1211, 1212, 1150, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1209, 1199, 1209, 1213, 1199, 1215, 
	1214, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 1214, 1155, 1216, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1218, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1219, 1217, 1217, 
	1217, 1217, 1217, 1218, 1217, 286, 286, 286, 
	286, 286, 286, 286, 286, 286, 286, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 285, 1217, 1221, 1220, 
	1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 
	1222, 1222, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1223, 1220, 1224, 1225, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1226, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1227, 1220, 1220, 1220, 1220, 1220, 1220, 1228, 
	1220, 1220, 1223, 1220, 1224, 1225, 1220, 1220, 
	1220, 1229, 1220, 1220, 1220, 1220, 1220, 1226, 
	1220, 1220, 1230, 1220, 1220, 1220, 1220, 1220, 
	1227, 1220, 289, 289, 289, 289, 289, 289, 
	289, 289, 289, 289, 1231, 1231, 1231, 1231, 
	1231, 1231, 1231, 1231, 1231, 1231, 1231, 1232, 
	1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 
	1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 
	1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 
	1231, 1233, 1231, 1231, 1231, 1231, 1231, 1232, 
	1231, 1231, 1231, 1234, 1231, 1231, 1231, 1231, 
	1231, 1231, 1231, 1231, 1235, 1231, 1236, 288, 
	1236, 288, 288, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 288, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 
	1237, 1237, 1237, 1237, 1237, 1236, 1237, 1237, 
	1237, 1237, 1237, 1237, 1237, 1237, 1237, 1238, 
	1237, 1239, 1241, 1240, 1242, 1222, 1222, 1222, 
	1222, 1222, 1222, 1222, 1222, 1222, 1222, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1228, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1229, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1230, 
	1220, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1244, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1229, 1220, 1220, 1220, 1220, 1220, 
	1220, 1220, 1220, 1230, 1220, 1246, 1246, 1246, 
	1246, 1246, 1246, 1246, 1246, 1246, 1246, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1247, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1248, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1249, 
	1245, 1246, 1246, 1246, 1246, 1246, 1246, 1246, 
	1246, 1246, 1246, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1250, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1248, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1249, 1245, 1248, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1249, 1245, 
	1251, 1253, 1252, 1254, 1256, 1256, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1257, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1258, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1259, 1255, 
	1260, 1260, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1261, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1248, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1249, 1245, 1260, 1260, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1250, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1248, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1249, 1245, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1264, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1265, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1266, 1262, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1269, 1267, 1267, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1270, 1267, 1267, 
	1267, 1267, 1267, 1267, 1267, 1267, 1271, 1267, 
	1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 
	1273, 1273, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1273, 1273, 1273, 1273, 1273, 1273, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1274, 
	1272, 1273, 1273, 1273, 1273, 1273, 1273, 1272, 
	1272, 1275, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1276, 1272, 1277, 1277, 1277, 1277, 
	1277, 1277, 1277, 1277, 1277, 1277, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1277, 1277, 1277, 
	1277, 1277, 1277, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1278, 1245, 1277, 1277, 1277, 
	1277, 1277, 1277, 1245, 1245, 1248, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1249, 1245, 
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1277, 1277, 1277, 1277, 1277, 1277, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1250, 
	1245, 1277, 1277, 1277, 1277, 1277, 1277, 1245, 
	1245, 1248, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1249, 1245, 1280, 1279, 1281, 1281, 
	1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1282, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1283, 1279, 1279, 
	1279, 1279, 1279, 1282, 1279, 1279, 1279, 1284, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1285, 1279, 1286, 1286, 1286, 1286, 1286, 1286, 
	1286, 1286, 1286, 1286, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1287, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1284, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1285, 1279, 1288, 1245, 
	1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 
	1289, 1289, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1290, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1291, 
	1245, 1245, 1245, 1245, 1245, 1290, 1245, 1245, 
	1245, 1248, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1249, 1245, 1289, 1289, 1289, 1289, 
	1289, 1289, 1289, 1289, 1289, 1289, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1250, 1245, 1245, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1248, 1245, 1245, 
	1245, 1245, 1245, 1245, 1245, 1245, 1249, 1245, 
	1210, 1216, 1150, 1292, 1199, 1200, 1199, 1293, 
	1200, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1200, 1216, 1200, 1199, 1200, 1150, 1199, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 
	1205, 1205, 1205, 1205, 1205, 1205, 1205, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 1205, 1205, 1205, 1205, 1205, 1205, 1294, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 1205, 1205, 1205, 1205, 291, 1205, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 1205, 1205, 1205, 1205, 1205, 291, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	288, 1193, 288, 288, 288, 288, 288, 288, 
	288, 288, 288, 288, 288, 288, 288, 288, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1295, 288, 288, 288, 288, 1193, 
	288, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 288, 288, 288, 288, 1167, 
	288, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 288, 288, 288, 288, 288, 
	1167, 1296, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1193, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1295, 1297, 1297, 1297, 
	1297, 1193, 1297, 1167, 1167, 1167, 1167, 1298, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1297, 1297, 1297, 
	1297, 1167, 1297, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1297, 1297, 1297, 
	1297, 1297, 1167, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1193, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1295, 1297, 1297, 
	1297, 1297, 1193, 1297, 1167, 1167, 1167, 1167, 
	1167, 1167, 1299, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1297, 1297, 
	1297, 1297, 1167, 1297, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1297, 1297, 
	1297, 1297, 1297, 1167, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1193, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1295, 1297, 
	1297, 1297, 1297, 1193, 1297, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1300, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1297, 
	1297, 1297, 1297, 1167, 1297, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1297, 
	1297, 1297, 1297, 1297, 1167, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1193, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1295, 
	1297, 1297, 1297, 1297, 1193, 1297, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1301, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1297, 1297, 1297, 1297, 1167, 1297, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1297, 1297, 1297, 1297, 1297, 1167, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1193, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1295, 1297, 1297, 1297, 1297, 1193, 1297, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1302, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1297, 1297, 1297, 1297, 1167, 1297, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1297, 1297, 1297, 1297, 1297, 1167, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1193, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1295, 1297, 1297, 1297, 1297, 1193, 1297, 
	1167, 1167, 1167, 1301, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1297, 1297, 1297, 1297, 1167, 1297, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 
	1167, 1167, 1297, 1297, 1297, 1297, 1297, 1167, 
	1303, 1305, 1304, 1306, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1308, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1309, 1310, 1141, 1141, 1141, 1141, 
	1141, 1311, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1312, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1313, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1314, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1315, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1316, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1317, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1318, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1319, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1320, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1321, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1322, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1323, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1324, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1325, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1326, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1322, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1327, 1141, 1328, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1329, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1330, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1331, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1332, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1141, 
	1333, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1334, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1335, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1336, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1332, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1337, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1338, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1339, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1340, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1341, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1342, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1332, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1343, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1344, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1345, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 
	1346, 293, 294, 293, 293, 293, 1346, 1346, 
	1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 
	1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 
	293, 1193, 1346, 295, 1346, 1346, 1346, 1346, 
	1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1346, 1346, 296, 1346, 1346, 1193, 
	1346, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1346, 297, 1346, 1346, 1141, 
	1346, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1346, 1346, 1346, 1346, 1346, 
	1141, 310, 311, 310, 310, 310, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	310, 309, 309, 312, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 315, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 309, 309, 309, 309, 
	309, 309, 309, 309, 314, 309, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1348, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1349, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1141, 1350, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 
	1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 
	1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 
	1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 
	1351, 1193, 1351, 1351, 1351, 1351, 1351, 1351, 
	1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1351, 1351, 1351, 1351, 1351, 1193, 
	1351, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1351, 1351, 1351, 1351, 1141, 
	1351, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1352, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1351, 1351, 1351, 1351, 1351, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1353, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1141, 1354, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1355, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1356, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1357, 1141, 1358, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1359, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1332, 1141, 1141, 1141, 
	1360, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1141, 1141, 1141, 1141, 1141, 1332, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1325, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1361, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1362, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1342, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1363, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1183, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1364, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1365, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1325, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1332, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1366, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1332, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1367, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1368, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1369, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1342, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1370, 1141, 1141, 1141, 1371, 
	1141, 1141, 1141, 1141, 1141, 1372, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1373, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1339, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1325, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1374, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1141, 
	1375, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1376, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1377, 
	1378, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1325, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1379, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1380, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1141, 1141, 1141, 1141, 1366, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1381, 1141, 1141, 1382, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1325, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1383, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1339, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1384, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1385, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1386, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1141, 1325, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1387, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1388, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1374, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1389, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1390, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1336, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1365, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1391, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1392, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1393, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1394, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1141, 1141, 1141, 1141, 1395, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1331, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1141, 1396, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1397, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1366, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1398, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1366, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1141, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1399, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1141, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1141, 
	1307, 1141, 1141, 1141, 1141, 1336, 1141, 1141, 
	1141, 1400, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1141, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1307, 1307, 1307, 1307, 1307, 
	1193, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1141, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1401, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1141, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1307, 1307, 1307, 1307, 
	1307, 1193, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1141, 1307, 1141, 1141, 1141, 1141, 1366, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1141, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1307, 1307, 1307, 
	1307, 1307, 1193, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1141, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1402, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1141, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1307, 1307, 
	1307, 1307, 1307, 1193, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1141, 1307, 1141, 1141, 1141, 
	1141, 1403, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1141, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1193, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1307, 
	1307, 1307, 1307, 1307, 1193, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1141, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1404, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1141, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1193, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1307, 1307, 1307, 1307, 1307, 1193, 1307, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1141, 1307, 1141, 
	1141, 1141, 1374, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1307, 1307, 1307, 1307, 1307, 1141, 1405, 
	1209, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1150, 
	1199, 1406, 1408, 1407, 1408, 1408, 1408, 1407, 
	1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 
	1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 
	1407, 1408, 1407, 1407, 1407, 1407, 1407, 1409, 
	1407, 1407, 1407, 1407, 1407, 1407, 1407, 321, 
	1407, 319, 1410, 319, 319, 319, 1410, 1410, 
	1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 
	1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 
	319, 1410, 1410, 1410, 1410, 1410, 320, 1410, 
	1410, 1410, 1410, 1410, 1410, 1410, 321, 1410, 
	322, 1410, 1412, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1413, 1411, 1412, 
	1411, 1412, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1415, 1411, 1412, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1416, 1411, 1412, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 
	1411, 1411, 1411, 1411, 1411, 1411, 1417, 1411, 
	1419, 1417, 0
]

class << self
	attr_accessor :_lex_trans_targs
	private :_lex_trans_targs, :_lex_trans_targs=
end
self._lex_trans_targs = [
	171, 2, 3, 4, 177, 6, 7, 8, 
	9, 10, 171, 171, 180, 183, 180, 12, 
	184, 14, 180, 191, 192, 195, 196, 202, 
	197, 198, 199, 19, 200, 201, 204, 206, 
	207, 208, 209, 210, 25, 18, 193, 194, 
	27, 233, 234, 236, 238, 236, 30, 239, 
	32, 236, 246, 247, 250, 251, 257, 252, 
	253, 254, 37, 255, 256, 259, 261, 262, 
	263, 264, 265, 43, 36, 248, 249, 45, 
	288, 289, 296, 298, 296, 48, 299, 50, 
	301, 304, 301, 52, 305, 54, 311, 310, 
	0, 56, 312, 313, 58, 314, 315, 315, 
	315, 315, 428, 61, 62, 63, 428, 456, 
	64, 65, 456, 456, 460, 460, 69, 64, 
	70, 458, 459, 461, 462, 460, 456, 463, 
	464, 466, 66, 67, 467, 468, 68, 460, 
	71, 72, 77, 84, 470, 471, 70, 458, 
	459, 461, 462, 460, 456, 463, 464, 466, 
	66, 67, 467, 468, 68, 71, 72, 77, 
	84, 470, 471, 469, 73, 74, 75, 76, 
	78, 79, 82, 80, 81, 83, 85, 86, 
	456, 88, 89, 90, 92, 95, 93, 94, 
	96, 98, 487, 487, 487, 488, 100, 490, 
	101, 491, 102, 488, 100, 490, 101, 491, 
	525, 525, 525, 105, 106, 107, 108, 536, 
	525, 525, 541, 525, 111, 112, 113, 525, 
	116, 111, 112, 113, 525, 116, 114, 114, 
	112, 113, 547, 115, 114, 114, 112, 113, 
	547, 115, 112, 525, 563, 525, 118, 564, 
	570, 121, 124, 126, 128, 129, 130, 124, 
	125, 574, 125, 574, 127, 525, 588, 589, 
	592, 593, 599, 594, 595, 596, 135, 597, 
	598, 601, 603, 604, 605, 606, 607, 141, 
	134, 590, 591, 143, 643, 644, 145, 527, 
	103, 529, 147, 148, 646, 747, 150, 151, 
	152, 747, 755, 755, 755, 155, 776, 775, 
	755, 778, 780, 765, 812, 161, 162, 163, 
	167, 168, 161, 162, 163, 167, 168, 164, 
	164, 162, 163, 165, 166, 164, 164, 162, 
	163, 165, 166, 859, 162, 755, 928, 169, 
	170, 928, 928, 171, 171, 172, 173, 174, 
	176, 178, 179, 171, 171, 171, 175, 171, 
	175, 171, 1, 171, 171, 171, 5, 180, 
	180, 181, 180, 182, 185, 180, 180, 11, 
	13, 180, 180, 180, 186, 187, 188, 15, 
	21, 26, 211, 28, 180, 180, 180, 189, 
	190, 180, 16, 180, 180, 180, 17, 180, 
	180, 180, 20, 203, 205, 22, 180, 180, 
	23, 24, 180, 212, 216, 213, 214, 215, 
	180, 180, 217, 218, 221, 223, 232, 219, 
	220, 180, 222, 224, 226, 225, 180, 227, 
	228, 229, 230, 231, 180, 180, 180, 235, 
	236, 236, 236, 237, 240, 236, 29, 31, 
	236, 236, 236, 241, 242, 243, 33, 39, 
	44, 266, 46, 236, 236, 236, 244, 245, 
	236, 34, 236, 236, 236, 35, 236, 236, 
	236, 38, 258, 260, 40, 236, 236, 41, 
	42, 236, 267, 271, 268, 269, 270, 236, 
	236, 272, 273, 276, 278, 287, 274, 275, 
	236, 277, 279, 281, 280, 236, 282, 283, 
	284, 285, 286, 236, 236, 236, 290, 291, 
	291, 292, 291, 293, 291, 291, 291, 294, 
	294, 294, 295, 294, 294, 294, 296, 296, 
	296, 297, 296, 47, 49, 296, 296, 300, 
	300, 300, 301, 301, 302, 301, 303, 301, 
	301, 51, 53, 301, 301, 306, 306, 307, 
	306, 306, 308, 309, 308, 55, 57, 310, 
	310, 310, 316, 315, 315, 317, 318, 319, 
	320, 322, 325, 326, 327, 328, 315, 329, 
	330, 332, 334, 335, 336, 340, 342, 343, 
	344, 360, 365, 372, 377, 384, 391, 394, 
	395, 399, 393, 403, 411, 415, 417, 422, 
	424, 427, 315, 315, 315, 315, 315, 315, 
	321, 315, 321, 315, 323, 59, 324, 315, 
	60, 315, 315, 331, 333, 315, 337, 338, 
	339, 335, 341, 315, 345, 346, 355, 358, 
	347, 348, 349, 350, 351, 352, 353, 354, 
	316, 356, 357, 359, 361, 364, 362, 363, 
	366, 369, 367, 368, 370, 371, 373, 375, 
	374, 376, 378, 379, 315, 380, 381, 382, 
	383, 315, 385, 388, 386, 387, 389, 390, 
	392, 396, 397, 398, 400, 402, 401, 404, 
	405, 406, 408, 407, 409, 410, 412, 413, 
	414, 416, 418, 419, 420, 421, 423, 425, 
	426, 429, 428, 428, 430, 431, 433, 428, 
	428, 428, 432, 428, 432, 434, 428, 436, 
	435, 435, 439, 440, 441, 442, 435, 444, 
	445, 446, 447, 449, 451, 452, 453, 454, 
	455, 435, 437, 435, 438, 435, 435, 435, 
	435, 435, 443, 435, 443, 448, 435, 450, 
	435, 456, 456, 457, 472, 473, 459, 475, 
	476, 463, 477, 478, 479, 480, 481, 483, 
	484, 485, 486, 456, 456, 456, 456, 456, 
	456, 460, 465, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 474, 456, 474, 456, 
	456, 456, 456, 482, 456, 87, 91, 97, 
	487, 489, 492, 99, 487, 487, 488, 493, 
	493, 494, 495, 497, 499, 500, 493, 493, 
	496, 493, 496, 493, 498, 493, 493, 493, 
	502, 501, 501, 503, 504, 505, 507, 509, 
	510, 515, 522, 501, 501, 501, 501, 506, 
	501, 506, 501, 508, 501, 501, 502, 511, 
	512, 513, 514, 516, 517, 520, 518, 519, 
	521, 523, 524, 526, 525, 534, 535, 537, 
	538, 540, 542, 543, 544, 546, 548, 549, 
	551, 552, 573, 576, 577, 578, 646, 647, 
	648, 649, 650, 545, 652, 668, 673, 680, 
	685, 687, 693, 696, 697, 701, 695, 705, 
	716, 720, 723, 731, 735, 738, 739, 525, 
	103, 528, 525, 525, 530, 532, 533, 525, 
	531, 525, 525, 525, 525, 525, 104, 525, 
	525, 525, 525, 525, 539, 525, 539, 525, 
	525, 109, 525, 525, 110, 525, 525, 545, 
	525, 550, 525, 553, 562, 525, 117, 565, 
	566, 567, 525, 568, 119, 571, 120, 122, 
	572, 525, 554, 556, 525, 555, 525, 525, 
	557, 560, 561, 525, 558, 559, 525, 525, 
	525, 525, 569, 123, 575, 525, 525, 579, 
	525, 525, 525, 580, 582, 525, 581, 525, 
	581, 525, 583, 584, 585, 131, 137, 142, 
	608, 144, 525, 525, 525, 586, 587, 525, 
	132, 525, 525, 525, 133, 525, 525, 525, 
	136, 600, 602, 138, 525, 525, 139, 140, 
	525, 609, 613, 610, 611, 612, 525, 525, 
	614, 615, 618, 629, 642, 616, 617, 525, 
	619, 620, 621, 623, 622, 525, 624, 625, 
	626, 627, 628, 630, 637, 631, 632, 633, 
	634, 635, 636, 638, 639, 640, 641, 525, 
	525, 525, 645, 146, 149, 525, 651, 525, 
	653, 654, 663, 666, 655, 656, 657, 658, 
	659, 660, 661, 662, 526, 664, 665, 667, 
	669, 672, 670, 671, 674, 677, 675, 676, 
	678, 679, 681, 683, 682, 684, 686, 688, 
	690, 689, 691, 692, 694, 526, 698, 699, 
	700, 702, 704, 703, 706, 707, 708, 713, 
	709, 710, 711, 525, 526, 527, 103, 712, 
	532, 714, 715, 717, 718, 719, 721, 722, 
	724, 725, 726, 729, 727, 728, 730, 732, 
	733, 734, 736, 737, 525, 740, 740, 741, 
	742, 743, 745, 740, 740, 740, 744, 740, 
	744, 740, 746, 740, 748, 747, 747, 749, 
	750, 747, 751, 753, 747, 747, 747, 747, 
	752, 747, 752, 754, 747, 756, 755, 755, 
	759, 760, 761, 755, 762, 764, 767, 768, 
	769, 770, 771, 755, 772, 773, 777, 800, 
	804, 755, 805, 807, 809, 755, 810, 811, 
	813, 817, 819, 820, 755, 822, 840, 845, 
	852, 860, 867, 874, 879, 880, 884, 878, 
	889, 899, 905, 908, 917, 921, 925, 926, 
	927, 757, 755, 758, 755, 755, 755, 755, 
	755, 755, 763, 755, 763, 755, 153, 766, 
	755, 755, 755, 755, 755, 755, 755, 774, 
	755, 755, 154, 156, 755, 157, 784, 792, 
	795, 779, 796, 797, 785, 789, 790, 755, 
	779, 157, 781, 782, 158, 755, 781, 755, 
	755, 783, 755, 786, 788, 755, 786, 787, 
	789, 790, 788, 755, 755, 791, 755, 755, 
	793, 788, 789, 790, 793, 794, 755, 786, 
	788, 789, 790, 755, 786, 788, 789, 790, 
	755, 798, 788, 789, 790, 798, 799, 755, 
	157, 800, 779, 801, 789, 790, 802, 788, 
	157, 802, 779, 803, 806, 808, 159, 160, 
	755, 755, 814, 815, 816, 811, 818, 755, 
	755, 821, 755, 755, 823, 824, 833, 838, 
	825, 826, 827, 828, 829, 830, 831, 832, 
	756, 834, 835, 836, 837, 756, 839, 841, 
	844, 842, 843, 756, 756, 846, 849, 847, 
	848, 850, 851, 756, 853, 855, 854, 856, 
	857, 858, 755, 755, 861, 756, 862, 755, 
	863, 864, 865, 866, 757, 868, 871, 869, 
	870, 872, 873, 875, 876, 877, 756, 881, 
	882, 883, 885, 887, 888, 886, 756, 890, 
	891, 892, 895, 893, 894, 896, 897, 898, 
	900, 902, 901, 903, 904, 906, 907, 909, 
	910, 912, 915, 911, 913, 914, 916, 918, 
	919, 920, 922, 923, 924, 755, 755, 928, 
	929, 930, 928, 932, 931, 933, 931, 934, 
	935, 936, 931, 931
]

class << self
	attr_accessor :_lex_trans_actions
	private :_lex_trans_actions, :_lex_trans_actions=
end
self._lex_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 6, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 10, 0, 0, 
	0, 11, 0, 7, 0, 8, 0, 7, 
	0, 0, 0, 0, 8, 7, 0, 8, 
	0, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 13, 0, 0, 0, 
	14, 0, 15, 0, 0, 0, 0, 16, 
	0, 0, 0, 0, 0, 0, 17, 18, 
	19, 20, 21, 0, 0, 0, 22, 23, 
	0, 0, 24, 25, 26, 27, 28, 29, 
	29, 30, 31, 29, 32, 31, 33, 31, 
	29, 29, 30, 29, 34, 29, 29, 35, 
	29, 29, 29, 29, 29, 29, 0, 36, 
	37, 0, 38, 37, 39, 37, 0, 0, 
	36, 0, 40, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	41, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 42, 43, 44, 45, 0, 0, 
	0, 45, 28, 46, 29, 29, 29, 46, 
	47, 48, 49, 0, 0, 0, 0, 0, 
	50, 51, 0, 52, 0, 28, 0, 53, 
	0, 29, 54, 29, 55, 29, 56, 57, 
	58, 57, 59, 57, 0, 60, 61, 60, 
	62, 60, 63, 64, 0, 65, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 66, 
	66, 67, 0, 28, 0, 68, 0, 7, 
	0, 8, 0, 7, 0, 0, 0, 0, 
	8, 7, 0, 8, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 69, 
	0, 0, 0, 0, 69, 70, 0, 0, 
	0, 71, 72, 73, 74, 0, 7, 7, 
	75, 76, 76, 0, 0, 0, 28, 0, 
	0, 0, 29, 54, 29, 29, 29, 56, 
	57, 58, 57, 57, 57, 0, 60, 61, 
	60, 60, 60, 77, 63, 78, 79, 0, 
	80, 81, 82, 85, 86, 0, 28, 0, 
	7, 0, 7, 87, 88, 89, 56, 90, 
	0, 91, 0, 92, 93, 94, 0, 95, 
	96, 0, 97, 7, 7, 98, 99, 0, 
	0, 100, 101, 102, 103, 103, 103, 103, 
	103, 103, 103, 103, 104, 105, 106, 0, 
	0, 107, 0, 108, 109, 110, 0, 111, 
	112, 113, 0, 7, 0, 0, 114, 115, 
	0, 28, 116, 0, 0, 0, 0, 0, 
	117, 118, 0, 0, 0, 0, 0, 0, 
	0, 119, 0, 0, 0, 0, 120, 0, 
	0, 0, 0, 0, 121, 122, 123, 0, 
	124, 125, 126, 7, 7, 127, 0, 0, 
	128, 129, 130, 103, 103, 103, 103, 103, 
	103, 103, 103, 131, 132, 133, 0, 0, 
	134, 0, 135, 136, 137, 0, 138, 139, 
	140, 0, 7, 0, 0, 141, 142, 0, 
	28, 143, 0, 0, 0, 0, 0, 144, 
	145, 0, 0, 0, 0, 0, 0, 0, 
	146, 0, 0, 0, 0, 147, 0, 0, 
	0, 0, 0, 148, 149, 150, 0, 151, 
	152, 0, 153, 0, 154, 155, 156, 157, 
	158, 159, 0, 160, 161, 162, 163, 164, 
	165, 7, 166, 0, 0, 167, 168, 169, 
	170, 171, 172, 173, 0, 174, 7, 175, 
	176, 0, 0, 177, 178, 179, 180, 0, 
	181, 182, 183, 0, 184, 0, 0, 185, 
	186, 187, 188, 189, 190, 0, 28, 0, 
	0, 7, 7, 0, 0, 0, 191, 0, 
	0, 0, 0, 192, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 193, 194, 195, 196, 197, 198, 
	56, 199, 0, 200, 0, 0, 0, 201, 
	0, 202, 203, 0, 0, 204, 0, 0, 
	0, 205, 0, 206, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	205, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 207, 0, 0, 0, 
	0, 208, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 209, 210, 0, 0, 0, 211, 
	212, 213, 56, 214, 0, 28, 215, 0, 
	216, 217, 0, 28, 0, 0, 218, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 219, 0, 220, 0, 221, 222, 223, 
	224, 225, 56, 226, 0, 0, 227, 0, 
	228, 229, 230, 231, 28, 0, 27, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	7, 7, 7, 232, 233, 234, 235, 236, 
	237, 238, 0, 239, 240, 241, 242, 243, 
	244, 245, 246, 247, 56, 248, 0, 249, 
	250, 251, 252, 253, 254, 0, 0, 0, 
	255, 7, 7, 0, 256, 257, 258, 259, 
	260, 0, 0, 0, 0, 0, 261, 262, 
	56, 263, 0, 264, 28, 265, 266, 267, 
	268, 269, 270, 0, 28, 0, 0, 0, 
	0, 0, 0, 271, 272, 273, 274, 56, 
	275, 0, 276, 28, 277, 278, 279, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 280, 281, 0, 8, 0, 
	0, 7, 282, 0, 0, 282, 282, 0, 
	0, 7, 7, 0, 283, 0, 283, 283, 
	283, 0, 0, 283, 280, 280, 280, 280, 
	280, 280, 280, 280, 280, 280, 280, 280, 
	280, 280, 280, 280, 280, 0, 283, 284, 
	285, 0, 286, 287, 0, 69, 0, 288, 
	0, 289, 290, 291, 292, 293, 29, 294, 
	295, 296, 297, 298, 56, 299, 0, 300, 
	301, 0, 302, 303, 0, 304, 305, 282, 
	306, 0, 307, 0, 0, 308, 0, 0, 
	0, 0, 309, 0, 0, 0, 0, 0, 
	0, 310, 0, 0, 311, 0, 312, 313, 
	0, 0, 0, 314, 0, 0, 315, 316, 
	317, 318, 0, 0, 0, 319, 320, 0, 
	321, 322, 323, 0, 7, 324, 325, 326, 
	0, 327, 103, 103, 103, 103, 103, 103, 
	103, 103, 328, 329, 330, 0, 0, 331, 
	0, 332, 333, 334, 0, 335, 336, 337, 
	0, 7, 0, 0, 338, 339, 0, 28, 
	340, 0, 0, 0, 0, 0, 341, 342, 
	0, 0, 0, 0, 0, 0, 0, 343, 
	0, 0, 0, 0, 0, 344, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 345, 
	346, 347, 0, 0, 0, 348, 28, 349, 
	280, 280, 280, 280, 280, 280, 280, 280, 
	280, 280, 280, 280, 69, 280, 280, 280, 
	280, 280, 280, 280, 280, 280, 280, 280, 
	280, 280, 280, 280, 280, 280, 280, 280, 
	280, 280, 280, 280, 280, 350, 280, 280, 
	280, 280, 280, 280, 280, 280, 280, 280, 
	280, 280, 351, 352, 353, 354, 355, 355, 
	351, 280, 280, 280, 280, 280, 280, 280, 
	280, 280, 280, 280, 280, 280, 280, 280, 
	280, 280, 280, 280, 356, 357, 358, 0, 
	28, 0, 0, 359, 360, 361, 56, 362, 
	0, 363, 28, 364, 7, 365, 366, 0, 
	28, 367, 0, 0, 368, 369, 370, 371, 
	56, 372, 0, 28, 373, 374, 375, 376, 
	0, 28, 0, 377, 0, 7, 0, 0, 
	0, 0, 0, 378, 0, 0, 379, 379, 
	0, 380, 0, 0, 0, 381, 7, 382, 
	382, 382, 0, 0, 383, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 384, 385, 0, 386, 387, 388, 389, 
	390, 391, 56, 392, 0, 393, 0, 0, 
	394, 395, 396, 397, 398, 399, 400, 0, 
	401, 402, 0, 0, 403, 404, 405, 0, 
	0, 406, 0, 0, 405, 407, 407, 408, 
	409, 0, 410, 410, 0, 411, 412, 413, 
	414, 0, 415, 405, 405, 416, 0, 0, 
	417, 417, 0, 418, 419, 0, 420, 421, 
	422, 422, 423, 423, 0, 0, 424, 425, 
	425, 426, 426, 427, 428, 428, 429, 429, 
	430, 431, 431, 432, 432, 0, 0, 433, 
	434, 435, 436, 437, 438, 438, 435, 437, 
	439, 379, 440, 0, 0, 0, 0, 0, 
	441, 442, 382, 382, 382, 443, 382, 444, 
	445, 28, 446, 447, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	448, 0, 0, 0, 0, 443, 0, 0, 
	0, 0, 0, 449, 450, 0, 0, 0, 
	0, 0, 0, 451, 0, 0, 0, 0, 
	0, 450, 452, 453, 0, 454, 0, 455, 
	0, 0, 0, 0, 456, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 457, 0, 
	0, 0, 0, 0, 0, 0, 456, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 458, 459, 460, 
	7, 80, 461, 0, 462, 0, 463, 0, 
	0, 0, 464, 465
]

class << self
	attr_accessor :_lex_to_state_actions
	private :_lex_to_state_actions, :_lex_to_state_actions=
end
self._lex_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 83, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 83, 0, 0, 83, 0, 
	83, 0, 0, 0, 83, 83, 0, 0, 
	0, 0, 83, 0, 83, 0, 83, 0, 
	0, 0, 0, 83, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 0, 0, 0, 
	0, 0, 0, 83, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	83, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 83, 
	0, 0, 0, 0, 0, 83, 0, 0, 
	0, 0, 0, 0, 0, 83, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 83, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 83, 0, 0, 0, 
	0, 0, 0, 83, 0, 0, 0, 0, 
	0, 0, 0, 83, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	83, 0, 0, 83, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_lex_from_state_actions
	private :_lex_from_state_actions, :_lex_from_state_actions=
end
self._lex_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 84, 0, 0, 84, 0, 
	84, 0, 0, 0, 84, 84, 0, 0, 
	0, 0, 84, 0, 84, 0, 84, 0, 
	0, 0, 0, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 84, 0, 0, 0, 
	0, 0, 0, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 84, 
	0, 0, 0, 0, 0, 84, 0, 0, 
	0, 0, 0, 0, 0, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 84, 0, 0, 0, 
	0, 0, 0, 84, 0, 0, 0, 0, 
	0, 0, 0, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	84, 0, 0, 84, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_lex_eof_trans
	private :_lex_eof_trans, :_lex_eof_trans=
end
self._lex_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 44, 44, 44, 
	44, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 75, 
	75, 75, 75, 81, 81, 81, 81, 0, 
	0, 0, 0, 95, 97, 99, 99, 99, 
	104, 104, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 179, 181, 181, 181, 193, 
	195, 195, 195, 195, 195, 201, 193, 193, 
	193, 193, 193, 193, 193, 228, 228, 228, 
	228, 228, 228, 228, 228, 228, 228, 228, 
	228, 228, 228, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 193, 228, 228, 228, 228, 278, 278, 
	278, 283, 285, 285, 285, 289, 289, 283, 
	289, 289, 289, 289, 289, 289, 289, 289, 
	289, 319, 319, 0, 332, 333, 334, 336, 
	338, 340, 338, 338, 0, 350, 351, 355, 
	355, 356, 365, 366, 367, 367, 367, 370, 
	370, 372, 373, 374, 374, 374, 376, 377, 
	378, 378, 374, 370, 370, 383, 384, 384, 
	384, 384, 384, 387, 387, 387, 387, 393, 
	394, 394, 394, 394, 402, 394, 394, 394, 
	394, 407, 394, 394, 394, 394, 394, 394, 
	413, 414, 415, 415, 0, 422, 426, 426, 
	427, 436, 437, 438, 438, 438, 441, 441, 
	443, 444, 445, 445, 445, 447, 448, 449, 
	449, 445, 441, 441, 454, 455, 455, 455, 
	455, 455, 458, 458, 458, 458, 464, 465, 
	465, 465, 465, 473, 465, 465, 465, 465, 
	478, 465, 465, 465, 465, 465, 465, 484, 
	485, 486, 486, 0, 493, 494, 0, 500, 
	0, 507, 511, 511, 0, 0, 520, 521, 
	525, 525, 0, 530, 0, 533, 0, 536, 
	536, 537, 538, 0, 579, 581, 582, 583, 
	584, 586, 588, 592, 592, 583, 583, 583, 
	583, 594, 583, 583, 588, 583, 583, 579, 
	598, 598, 598, 598, 598, 598, 588, 588, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 637, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 604, 604, 604, 604, 604, 
	604, 604, 604, 583, 0, 680, 681, 682, 
	684, 680, 687, 0, 706, 708, 710, 711, 
	712, 713, 714, 716, 713, 713, 713, 713, 
	713, 719, 713, 713, 721, 719, 719, 713, 
	0, 740, 741, 104, 104, 744, 745, 104, 
	741, 741, 748, 750, 753, 741, 754, 741, 
	755, 756, 758, 760, 741, 748, 761, 761, 
	750, 761, 765, 761, 761, 761, 761, 0, 
	179, 773, 774, 773, 773, 0, 783, 784, 
	786, 788, 790, 788, 792, 0, 804, 805, 
	806, 807, 809, 811, 813, 814, 814, 814, 
	814, 814, 814, 814, 814, 814, 814, 814, 
	814, 814, 814, 814, 814, 0, 193, 872, 
	875, 876, 880, 882, 883, 884, 885, 886, 
	888, 891, 892, 894, 896, 899, 900, 902, 
	903, 193, 900, 905, 900, 891, 891, 891, 
	891, 922, 925, 927, 928, 932, 935, 936, 
	937, 938, 922, 922, 922, 922, 922, 922, 
	922, 922, 922, 922, 922, 891, 942, 891, 
	891, 891, 943, 950, 950, 952, 954, 963, 
	964, 965, 965, 965, 968, 968, 970, 971, 
	972, 972, 972, 974, 975, 976, 976, 972, 
	968, 968, 981, 982, 982, 982, 982, 982, 
	985, 985, 985, 985, 991, 992, 992, 992, 
	992, 1000, 992, 992, 992, 992, 1006, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 992, 992, 992, 992, 992, 992, 
	992, 992, 1024, 1025, 1026, 1026, 193, 891, 
	891, 1030, 891, 886, 1032, 1032, 1032, 1032, 
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1084, 
	876, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 
	1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 
	1032, 1032, 1109, 891, 0, 1116, 1117, 1118, 
	1120, 1122, 1124, 0, 1133, 1134, 1135, 1136, 
	1138, 1133, 1141, 0, 289, 1195, 1197, 1198, 
	1199, 1200, 1202, 1204, 1206, 1209, 1209, 1200, 
	1200, 1212, 1213, 1200, 1200, 1215, 1217, 1218, 
	1218, 1221, 1232, 289, 1238, 1240, 1241, 1243, 
	1221, 1221, 1246, 1246, 1246, 1252, 1253, 1255, 
	1256, 1246, 1246, 1263, 1268, 1273, 1246, 1246, 
	1280, 1280, 1246, 1246, 1217, 1200, 1200, 1217, 
	1200, 1200, 1206, 289, 1297, 1298, 1298, 1298, 
	1298, 1298, 1298, 1304, 1206, 1307, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1347, 1348, 1308, 1308, 1352, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1406, 1200, 1407, 
	0, 1411, 1411, 0, 1415, 1415, 1415, 1415, 
	1419
]

class << self
	attr_accessor :lex_start
end
self.lex_start = 171;
class << self
	attr_accessor :lex_error
end
self.lex_error = 0;

class << self
	attr_accessor :lex_en_interp_words
end
self.lex_en_interp_words = 180;
class << self
	attr_accessor :lex_en_interp_string
end
self.lex_en_interp_string = 236;
class << self
	attr_accessor :lex_en_plain_words
end
self.lex_en_plain_words = 291;
class << self
	attr_accessor :lex_en_plain_string
end
self.lex_en_plain_string = 294;
class << self
	attr_accessor :lex_en_interp_backslash_delimited
end
self.lex_en_interp_backslash_delimited = 296;
class << self
	attr_accessor :lex_en_plain_backslash_delimited
end
self.lex_en_plain_backslash_delimited = 300;
class << self
	attr_accessor :lex_en_interp_backslash_delimited_words
end
self.lex_en_interp_backslash_delimited_words = 301;
class << self
	attr_accessor :lex_en_plain_backslash_delimited_words
end
self.lex_en_plain_backslash_delimited_words = 306;
class << self
	attr_accessor :lex_en_regexp_modifiers
end
self.lex_en_regexp_modifiers = 308;
class << self
	attr_accessor :lex_en_expr_variable
end
self.lex_en_expr_variable = 310;
class << self
	attr_accessor :lex_en_expr_fname
end
self.lex_en_expr_fname = 315;
class << self
	attr_accessor :lex_en_expr_endfn
end
self.lex_en_expr_endfn = 428;
class << self
	attr_accessor :lex_en_expr_dot
end
self.lex_en_expr_dot = 435;
class << self
	attr_accessor :lex_en_expr_arg
end
self.lex_en_expr_arg = 456;
class << self
	attr_accessor :lex_en_expr_cmdarg
end
self.lex_en_expr_cmdarg = 487;
class << self
	attr_accessor :lex_en_expr_endarg
end
self.lex_en_expr_endarg = 493;
class << self
	attr_accessor :lex_en_expr_mid
end
self.lex_en_expr_mid = 501;
class << self
	attr_accessor :lex_en_expr_beg
end
self.lex_en_expr_beg = 525;
class << self
	attr_accessor :lex_en_expr_labelarg
end
self.lex_en_expr_labelarg = 740;
class << self
	attr_accessor :lex_en_expr_value
end
self.lex_en_expr_value = 747;
class << self
	attr_accessor :lex_en_expr_end
end
self.lex_en_expr_end = 755;
class << self
	attr_accessor :lex_en_leading_dot
end
self.lex_en_leading_dot = 928;
class << self
	attr_accessor :lex_en_line_comment
end
self.lex_en_line_comment = 931;
class << self
	attr_accessor :lex_en_line_begin
end
self.lex_en_line_begin = 171;


# line 82 "lib/parser/lexer.rl"
  # %

  ESCAPES = {
    ?a.ord => "\a", ?b.ord  => "\b", ?e.ord => "\e", ?f.ord => "\f",
    ?n.ord => "\n", ?r.ord  => "\r", ?s.ord => "\s", ?t.ord => "\t",
    ?v.ord => "\v", ?\\.ord => "\\"
  }.freeze

  REGEXP_META_CHARACTERS = Regexp.union(*"\\$()*+.<>?[]^{|}".chars).freeze

  RBRACE_OR_RBRACK = %w"} ]".freeze

  attr_reader   :source_buffer

  attr_accessor :diagnostics
  attr_accessor :static_env
  attr_accessor :force_utf32

  attr_accessor :cond, :cmdarg, :in_kwarg

  attr_accessor :tokens, :comments

  def initialize(version)
    @version    = version
    @static_env = nil

    @tokens     = nil
    @comments   = nil

    reset
  end

  def reset(reset_state=true)
    # Ragel state:
    if reset_state
      # Unit tests set state prior to resetting lexer.
      @cs     = self.class.lex_en_line_begin

      @cond   = StackState.new('cond')
      @cmdarg = StackState.new('cmdarg')
      @cond_stack   = []
      @cmdarg_stack = []
    end

    @force_utf32   = false # Set to true by some tests

    @source_pts    = nil # @source as a codepoint array

    @p             = 0   # stream position (saved manually in #advance)
    @ts            = nil # token start
    @te            = nil # token end
    @act           = 0   # next action

    @stack         = []  # state stack
    @top           = 0   # state stack top pointer

    # Lexer state:
    @token_queue   = []
    @literal_stack = []

    @eq_begin_s    = nil # location of last encountered =begin
    @sharp_s       = nil # location of last encountered #

    @newline_s     = nil # location of last encountered newline

    @num_base      = nil # last numeric base
    @num_digits_s  = nil # starting position of numeric digits
    @num_suffix_s  = nil # starting position of numeric suffix
    @num_xfrm      = nil # numeric suffix-induced transformation

    @escape_s      = nil # starting position of current sequence
    @escape        = nil # last escaped sequence, as string

    @herebody_s    = nil # starting position of current heredoc line

    # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
    # encountered after a matching closing parenthesis.
    @paren_nest    = 0
    @lambda_stack  = []

    # After encountering the closing line of <<~SQUIGGLY_HEREDOC,
    # we store the indentation level and give it out to the parser
    # on request. It is not possible to infer indentation level just
    # from the AST because escape sequences such as `\ ` or `\t` are
    # expanded inside the lexer, but count as non-whitespace for
    # indentation purposes.
    @dedent_level  = nil

    # If the lexer is in `command state' (aka expr_value)
    # at the entry to #advance, it will transition to expr_cmdarg
    # instead of expr_arg at certain points.
    @command_state = false

    # True at the end of "def foo a:"
    @in_kwarg      = false
  end

  def source_buffer=(source_buffer)
    @source_buffer = source_buffer

    if @source_buffer
      source = @source_buffer.source

      if defined?(Encoding) && source.encoding == Encoding::UTF_8
        @source_pts = source.unpack('U*')
      else
        @source_pts = source.unpack('C*')
      end

      if @source_pts[0] == 0xfeff
        # Skip byte order mark.
        @p = 1
      end
    else
      @source_pts = nil
    end
  end

  def encoding
    @source_buffer.source.encoding
  end

  LEX_STATES = {
    :line_begin    => lex_en_line_begin,
    :expr_dot      => lex_en_expr_dot,
    :expr_fname    => lex_en_expr_fname,
    :expr_value    => lex_en_expr_value,
    :expr_beg      => lex_en_expr_beg,
    :expr_mid      => lex_en_expr_mid,
    :expr_arg      => lex_en_expr_arg,
    :expr_cmdarg   => lex_en_expr_cmdarg,
    :expr_end      => lex_en_expr_end,
    :expr_endarg   => lex_en_expr_endarg,
    :expr_endfn    => lex_en_expr_endfn,
    :expr_labelarg => lex_en_expr_labelarg,

    :interp_string => lex_en_interp_string,
    :interp_words  => lex_en_interp_words,
    :plain_string  => lex_en_plain_string,
    :plain_words   => lex_en_plain_string,
  }

  def state
    LEX_STATES.invert.fetch(@cs, @cs)
  end

  def state=(state)
    @cs = LEX_STATES.fetch(state)
  end

  def push_cmdarg
    @cmdarg_stack.push(@cmdarg)
    @cmdarg = StackState.new("cmdarg.#{@cmdarg_stack.count}")
  end

  def pop_cmdarg
    @cmdarg = @cmdarg_stack.pop
  end

  def push_cond
    @cond_stack.push(@cond)
    @cond = StackState.new("cond.#{@cond_stack.count}")
  end

  def pop_cond
    @cond = @cond_stack.pop
  end

  def dedent_level
    # We erase @dedent_level as a precaution to avoid accidentally
    # using a stale value.
    dedent_level, @dedent_level = @dedent_level, nil
    dedent_level
  end

  # Return next token: [type, value].
  def advance
    if @token_queue.any?
      return @token_queue.shift
    end

    # Ugly, but dependent on Ragel output. Consider refactoring it somehow.
    klass = self.class
    _lex_trans_keys         = klass.send :_lex_trans_keys
    _lex_key_spans          = klass.send :_lex_key_spans
    _lex_index_offsets      = klass.send :_lex_index_offsets
    _lex_indicies           = klass.send :_lex_indicies
    _lex_trans_targs        = klass.send :_lex_trans_targs
    _lex_trans_actions      = klass.send :_lex_trans_actions
    _lex_to_state_actions   = klass.send :_lex_to_state_actions
    _lex_from_state_actions = klass.send :_lex_from_state_actions
    _lex_eof_trans          = klass.send :_lex_eof_trans

    pe = @source_pts.size + 2
    p, eof = @p, pe

    @command_state = (@cs == klass.lex_en_expr_value ||
                      @cs == klass.lex_en_line_begin)

    
# line 10768 "lib/parser/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _lex_from_state_actions[ @cs] 
	when 84 then
# line 1 "NONE"
		begin
 @ts = p
		end
# line 10796 "lib/parser/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _lex_index_offsets[ @cs]
	_slen = _lex_key_spans[ @cs]
	_wide = ( (@source_pts[p] || 0))
	_trans = if (   _slen > 0 && 
			_lex_trans_keys[_keys] <= _wide && 
			_wide <= _lex_trans_keys[_keys + 1] 
		    ) then
			_lex_indicies[ _inds + _wide - _lex_trans_keys[_keys] ] 
		 else 
			_lex_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _lex_trans_targs[_trans]
	if _lex_trans_actions[_trans] != 0
	case _lex_trans_actions[_trans]
	when 28 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 103 then
# line 797 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 29 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
	when 56 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
	when 60 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 285 then
# line 1209 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 36 then
# line 1478 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 38 then
# line 1494 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 40 then
# line 1522 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 66 then
# line 1712 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
	when 325 then
# line 1777 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
	when 355 then
# line 1850 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 431 then
# line 2068 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
	when 425 then
# line 2069 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
	when 428 then
# line 2070 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
	when 422 then
# line 2071 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
	when 437 then
# line 2072 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
	when 405 then
# line 2073 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
	when 417 then
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 412 then
# line 2131 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 410 then
# line 2132 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 80 then
# line 2267 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 7 then
# line 1 "NONE"
		begin
 @te = p+1
		end
	when 100 then
# line 1038 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 747
		_goto_level = _again
		next
	end

   end
		end
	when 5 then
# line 983 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end

   end
		end
	when 96 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 95 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 101 then
# line 983 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end

   end
		end
	when 98 then
# line 970 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 99 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 6 then
# line 870 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 4 then
# line 846 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 128 then
# line 1038 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 747
		_goto_level = _again
		next
	end

   end
		end
	when 10 then
# line 983 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end

   end
		end
	when 125 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 124 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 129 then
# line 983 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end

   end
		end
	when 127 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 11 then
# line 870 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 9 then
# line 846 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 152 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 151 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 154 then
# line 970 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 155 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 158 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 157 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 160 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 167 then
# line 1038 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 747
		_goto_level = _again
		next
	end

   end
		end
	when 13 then
# line 983 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end

   end
		end
	when 164 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 163 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 168 then
# line 983 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end

   end
		end
	when 166 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 12 then
# line 846 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 170 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 169 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 177 then
# line 1038 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 747
		_goto_level = _again
		next
	end

   end
		end
	when 15 then
# line 983 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end

   end
		end
	when 173 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 172 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 178 then
# line 983 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end

   end
		end
	when 175 then
# line 970 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 176 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 14 then
# line 846 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 180 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 179 then
# line 846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 182 then
# line 970 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 183 then
# line 1135 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
        p = p - 1;
        if @version < 24
          	begin
		 @cs = 755
		_goto_level = _again
		next
	end

        else
          	begin
		 @cs = 493
		_goto_level = _again
		next
	end

        end
       end
		end
	when 184 then
# line 1116 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        unknown_options = tok.scan(/[^imxouesn]/)
        if unknown_options.any?
          diagnostic :error, :regexp_options,
                     { :options => unknown_options.join }
        end

        emit(:tREGEXP_OPT)

        if @version < 24
           @cs = 755;
        else
           @cs = 493;
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 16 then
# line 1268 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 185 then
# line 1268 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 187 then
# line 1281 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@@[0-9]/
          diagnostic :error, :cvar_name, { :name => tok }
        end

        emit(:tCVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 186 then
# line 1291 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@[0-9]/
          diagnostic :error, :ivar_name, { :name => tok }
        end

        emit(:tIVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 208 then
# line 1312 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(KEYWORDS_BEGIN);
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 194 then
# line 1320 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tIDENTIFIER)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 18 then
# line 1324 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
            @cs = 755; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end
  end
		end
	when 191 then
# line 1333 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 203 then
# line 1337 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 20 then
# line 1343 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if version?(23)
          type, delimiter = tok[0..-2], tok[-1].chr
          	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

        else
          p = @ts - 1
          	begin
		 @cs = 755
		_goto_level = _again
		next
	end

        end
       end
		end
	when 190 then
# line 1356 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 189 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 207 then
# line 1312 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS_BEGIN);
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 204 then
# line 1316 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 206 then
# line 1320 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 201 then
# line 1324 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
            @cs = 755; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end
  end
		end
	when 197 then
# line 1333 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 202 then
# line 1340 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 195 then
# line 1353 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 200 then
# line 1356 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 19 then
# line 1333 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit_table(PUNCTUATION)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 17 then
# line 1356 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 193 then
# line 1 "NONE"
		begin
	case  @act
	when 39 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN);
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 40 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 41 then
	begin begin p = (( @te))-1; end
 emit(:tIDENTIFIER)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 22 then
# line 1368 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           p = p - 1;  @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 210 then
# line 1374 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 209 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 212 then
# line 1371 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 211 then
# line 1374 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 21 then
# line 1374 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 218 then
# line 1400 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 456; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 217 then
# line 1406 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 216 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 228 then
# line 1385 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 219 then
# line 1389 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 224 then
# line 1400 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 456; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 222 then
# line 1403 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 227 then
# line 1406 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 251 then
# line 1464 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 234 then
# line 1482 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 525
		_goto_level = _again
		next
	end

       end
		end
	when 240 then
# line 1506 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 24 then
# line 1514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 242 then
# line 1523 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 39 then
# line 1534 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 229 then
# line 1548 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 230 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 241 then
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 237 then
# line 1495 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 525
		_goto_level = _again
		next
	end

       end
		end
	when 239 then
# line 1511 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 233 then
# line 1534 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 232 then
# line 1539 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 250 then
# line 1548 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 25 then
# line 1539 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 41 then
# line 1548 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 23 then
# line 1 "NONE"
		begin
	case  @act
	when 67 then
	begin begin p = (( @te))-1; end

        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 525
		_goto_level = _again
		next
	end

      end
	when 68 then
	begin begin p = (( @te))-1; end

        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 525
		_goto_level = _again
		next
	end

      end
	when 73 then
	begin begin p = (( @te))-1; end

        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

      end
	else
	begin begin p = (( @te))-1; end
end
end 
			end
	when 43 then
# line 1584 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 456
		_goto_level = _again
		next
	end
  end
		end
	when 255 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 256 then
# line 1584 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 456
		_goto_level = _again
		next
	end
  end
		end
	when 44 then
# line 1584 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1
           	begin
		 @cs = 456
		_goto_level = _again
		next
	end
  end
		end
	when 42 then
# line 1 "NONE"
		begin
	case  @act
	when 80 then
	begin begin p = (( @te))-1; end

        if @cond.active?
          emit(:kDO_COND, 'do'.freeze, @te - 2, @te)
        else
          emit(:kDO, 'do'.freeze, @te - 2, @te)
        end
         @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 81 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 456
		_goto_level = _again
		next
	end
 end
end 
			end
	when 266 then
# line 1618 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_do(true)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 259 then
# line 1624 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 260 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 261 then
# line 1621 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 264 then
# line 1624 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 270 then
# line 1648 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 269 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 278 then
# line 1640 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 272 then
# line 1642 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 276 then
# line 1648 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 271 then
# line 1 "NONE"
		begin
	case  @act
	when 88 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 89 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
 end
end 
			end
	when 53 then
# line 1663 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 307 then
# line 1680 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type = delimiter = tok[0].chr
        p = p - 1; 	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 301 then
# line 1687 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = @source_buffer.slice(@ts).chr, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 51 then
# line 1694 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 308 then
# line 1751 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 65 then
# line 1765 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 322 then
# line 1796 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 321 then
# line 1806 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 309 then
# line 1845 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 48 then
# line 1865 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;

        if version?(18)
          ident = tok(@ts, @te - 2)

          emit((@source_buffer.slice(@ts) =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
               ident, @ts, @te - 2)
          p = p - 1; # continue as a symbol

          if !@static_env.nil? && @static_env.declared?(ident)
             @cs = 755;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           @cs = 740;
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 295 then
# line 1911 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 171
		_goto_level = _again
		next
	end
  end
		end
	when 52 then
# line 1924 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 281 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 306 then
# line 1663 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 305 then
# line 1670 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tSTAR, '*'.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 302 then
# line 1694 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 300 then
# line 1700 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 310 then
# line 1765 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 320 then
# line 1806 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 326 then
# line 1812 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 303 then
# line 1845 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 349 then
# line 1253 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 292 then
# line 1908 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 294 then
# line 1911 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 171
		_goto_level = _again
		next
	end
  end
		end
	when 297 then
# line 1924 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 50 then
# line 1700 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 68 then
# line 1779 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 49 then
# line 1908 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 64 then
# line 1924 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 47 then
# line 1 "NONE"
		begin
	case  @act
	when 94 then
	begin begin p = (( @te))-1; end

        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 111 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 112 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 501; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 113 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 115 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
 end
	when 116 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 119 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
 end
end 
			end
	when 357 then
# line 1944 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 358 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 359 then
# line 1932 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 363 then
# line 1944 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 71 then
# line 1954 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 367 then
# line 1959 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        	begin
		 @cs = (push_literal(tok, tok, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 366 then
# line 1969 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 365 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 369 then
# line 1963 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 368 then
# line 1969 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 70 then
# line 1969 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 525
		_goto_level = _again
		next
	end
  end
		end
	when 399 then
# line 1980 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tLAMBDA, '->'.freeze, @ts, @ts + 2)

        @lambda_stack.push @paren_nest
         @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 78 then
# line 2017 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 377 then
# line 2152 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts, nil, false, false, true))
		_goto_level = _again
		next
	end

       end
		end
	when 73 then
# line 2170 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end
  end
		end
	when 396 then
# line 2177 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 435; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 390 then
# line 2204 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 383 then
# line 2208 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 493;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 395 then
# line 2222 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tOP_ASGN, tok(@ts, @te - 1))
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 381 then
# line 2226 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tEH, '?'.freeze)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 378 then
# line 2234 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 380 then
# line 2247 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tSEMI, ';'.freeze)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 445 then
# line 2250 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :error, :bare_backslash, nil, range(@ts, @ts + 1)
        p = p - 1;
       end
		end
	when 376 then
# line 2256 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 375 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 455 then
# line 2013 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 315; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 453 then
# line 2017 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 452 then
# line 2028 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 402 then
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 442 then
# line 2162 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 394 then
# line 2170 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 310
		_goto_level = _again
		next
	end
  end
		end
	when 400 then
# line 2177 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 435; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 447 then
# line 1253 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 389 then
# line 2204 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 401 then
# line 2234 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 387 then
# line 2241 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 393 then
# line 2256 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 74 then
# line 2102 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 72 then
# line 2256 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 75 then
# line 1 "NONE"
		begin
	case  @act
	when 132 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end

         @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 133 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 315; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 134 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 135 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 136 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 137 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 501; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 138 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 456; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 139 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 140 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 141 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 143 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 144 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 145 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 147 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 151 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 152 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 456; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 82 then
# line 2268 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 460 then
# line 2271 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 171; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 461 then
# line 2271 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 171; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 79 then
# line 2271 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 171; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 464 then
# line 2281 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 171
		_goto_level = _again
		next
	end

       end
		end
	when 463 then
# line 2289 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :embedded_document, nil,
                   range(@eq_begin_s, @eq_begin_s + '=begin'.length)
       end
		end
	when 93 then
# line 2299 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 931
		_goto_level = _again
		next
	end
  end
		end
	when 2 then
# line 2303 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 85 then
# line 2306 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 747
		_goto_level = _again
		next
	end
  end
		end
	when 86 then
# line 520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 87 then
# line 2296 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 92 then
# line 2299 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  @eq_begin_s = @ts
           	begin
		 @cs = 931
		_goto_level = _again
		next
	end
  end
		end
	when 91 then
# line 2306 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 747
		_goto_level = _again
		next
	end
  end
		end
	when 1 then
# line 2306 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 747
		_goto_level = _again
		next
	end
  end
		end
	when 63 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 97 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 126 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 153 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 159 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 165 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 171 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 174 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 181 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 252 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1464 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 243 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1523 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 235 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1534 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 323 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1796 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 296 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1911 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 171
		_goto_level = _again
		next
	end
  end
		end
	when 465 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2281 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 171
		_goto_level = _again
		next
	end

       end
		end
	when 462 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2286 "lib/parser/lexer.rl"
		begin
 @te = p+1
		end
	when 94 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2299 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 931
		_goto_level = _again
		next
	end
  end
		end
	when 3 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2303 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 419 then
# line 628 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 418 then
# line 629 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, chars)) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 420 then
# line 630 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 413 then
# line 634 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Float(chars))) } 		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 414 then
# line 638 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 415 then
# line 639 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 120 then
# line 654 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 147 then
# line 654 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 344 then
# line 654 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 104 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 131 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 328 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 107 then
# line 701 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 134 then
# line 701 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 331 then
# line 701 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 109 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 136 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 333 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 106 then
# line 727 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 133 then
# line 727 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 330 then
# line 727 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 123 then
# line 731 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 150 then
# line 731 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 347 then
# line 731 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 122 then
# line 735 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 149 then
# line 735 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 346 then
# line 735 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 117 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 144 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 341 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 116 then
# line 745 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 143 then
# line 745 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 340 then
# line 745 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 121 then
# line 751 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 148 then
# line 751 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 345 then
# line 751 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 118 then
# line 765 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 145 then
# line 765 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 342 then
# line 765 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 105 then
# line 791 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 132 then
# line 791 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 329 then
# line 791 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 156 then
# line 797 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 161 then
# line 797 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 54 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 30 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1478 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 32 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1494 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 34 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1522 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 196 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1353 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 215 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1371 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 223 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1403 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 33 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1534 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 254 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1539 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 246 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1545 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 265 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1621 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 277 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1642 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 273 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1645 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 55 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1663 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 293 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1908 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 364 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1932 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 360 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1935 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
      if @in_kwarg
        p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end

      else
        	begin
		 @cs = 171
		_goto_level = _again
		next
	end

      end
     end
		end
	when 373 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1963 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 370 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1966 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 171
		_goto_level = _again
		next
	end
  end
		end
	when 446 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2241 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 388 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2244 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 928
		_goto_level = _again
		next
	end
  end
		end
	when 88 then
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2296 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 245 then
# line 1008 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1447 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          p = @ts - 1
          	begin
		 @cs = 755
		_goto_level = _again
		next
	end

        else
          emit(:tLCURLY, '{'.freeze, @te - 1, @te)
           @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 267 then
# line 1008 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1607 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE_ARG, '{'.freeze)
        end
         @cs = 747;
       end
		end
	when 356 then
# line 1008 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1823 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE, '{'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 458 then
# line 1008 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end

         @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 459 then
# line 1017 "lib/parser/lexer.rl"
		begin

    current_literal = literal
    if current_literal
      if current_literal.end_interp_brace_and_try_closing
        if version?(18, 19)
          emit(:tRCURLY, '}'.freeze, p - 1, p)
        else
          emit(:tSTRING_DEND, '}'.freeze, p - 1, p)
        end

        if current_literal.saved_herebody_s
          @herebody_s = current_literal.saved_herebody_s
        end

        p = p - 1;
         @cs = (stack_pop);
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
    end
  		end
# line 2208 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 493;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 57 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 61 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 199 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1353 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 214 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1371 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 226 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1403 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 248 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1542 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 263 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1621 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 275 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1642 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 299 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1908 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 362 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1932 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 372 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1963 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 392 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2241 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 90 then
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2296 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 220 then
# line 1209 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1393 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 311 then
# line 1209 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 284 then
# line 1209 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 385 then
# line 1209 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1 "NONE"
		begin
	case  @act
	when 132 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end

         @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 133 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 315; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 134 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 135 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 136 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 137 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 501; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 138 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 456; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 139 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 140 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 141 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 143 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 144 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 145 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 147 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 151 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 152 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 456; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 221 then
# line 1210 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1393 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 312 then
# line 1210 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 286 then
# line 1210 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 386 then
# line 1210 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2184 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 456; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 313 then
# line 1215 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 287 then
# line 1215 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 314 then
# line 1216 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 288 then
# line 1216 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 318 then
# line 1217 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 291 then
# line 1217 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 317 then
# line 1218 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 290 then
# line 1218 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1 "NONE"
		begin
	case  @act
	when 94 then
	begin begin p = (( @te))-1; end

        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 111 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 112 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 501; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 113 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 115 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
 end
	when 116 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 119 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
 end
end 
			end
	when 315 then
# line 1219 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 289 then
# line 1219 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 316 then
# line 1224 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 441 then
# line 1229 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2166 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT, tok(@ts, tm), @ts, tm)
           p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 244 then
# line 1235 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1441 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze, @te - 1, @te)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 348 then
# line 1235 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1835 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 444 then
# line 1235 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 2230 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK2, '['.freeze)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 236 then
# line 1242 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1422 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if version?(18)
          emit(:tLPAREN2, '('.freeze, @te - 1, @te)
           @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
           @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 249 then
# line 1242 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1435 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN2, '('.freeze)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 257 then
# line 1242 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1561 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
        if version?(18)
           @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 304 then
# line 1242 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1840 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN, '('.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 397 then
# line 1242 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 2204 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 398 then
# line 1248 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2208 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 493;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 67 then
# line 1712 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 319 then
# line 1713 "lib/parser/lexer.rl"
		begin
 new_herebody_s = p 		end
# line 1714 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        tok(@ts, heredoc_e) =~ /^<<(-?)(~?)(["'`]?)(.*)\3$/m

        indent      = !$1.empty? || !$2.empty?
        dedent_body = !$2.empty?
        type        =  $3.empty? ? '<<"'.freeze : ('<<'.freeze + $3)
        delimiter   =  $4

        if @version >= 24
          if delimiter.count("\n") > 0
            if delimiter.end_with?("\n")
              diagnostic :warning, :heredoc_id_ends_with_nl, nil, range(@ts, @ts + 1)
              delimiter = delimiter.rstrip
            else
              diagnostic :fatal, :heredoc_id_has_newline, nil, range(@ts, @ts + 1)
            end
          end
        end

        if dedent_body && version?(18, 19, 20, 21, 22)
          emit(:tLSHFT, '<<'.freeze, @ts, @ts + 2)
          p = @ts + 1
           @cs = 525; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = (push_literal(type, delimiter, @ts, heredoc_e, indent, dedent_body));

          @herebody_s ||= new_herebody_s
          p = @herebody_s - 1
        end
       end
		end
	when 324 then
# line 1777 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 352 then
# line 1850 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1851 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 501; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 432 then
# line 2068 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 426 then
# line 2069 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 429 then
# line 2070 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 423 then
# line 2071 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 438 then
# line 2072 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 407 then
# line 2073 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 439 then
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 81 then
# line 2267 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2268 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 8 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 205 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1312 "lib/parser/lexer.rl"
		begin
 @act = 39;		end
	when 192 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1316 "lib/parser/lexer.rl"
		begin
 @act = 40;		end
	when 188 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1320 "lib/parser/lexer.rl"
		begin
 @act = 41;		end
	when 26 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1482 "lib/parser/lexer.rl"
		begin
 @act = 67;		end
	when 238 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1495 "lib/parser/lexer.rl"
		begin
 @act = 68;		end
	when 27 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1534 "lib/parser/lexer.rl"
		begin
 @act = 73;		end
	when 231 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1539 "lib/parser/lexer.rl"
		begin
 @act = 74;		end
	when 258 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1571 "lib/parser/lexer.rl"
		begin
 @act = 80;		end
	when 45 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1584 "lib/parser/lexer.rl"
		begin
 @act = 81;		end
	when 279 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1636 "lib/parser/lexer.rl"
		begin
 @act = 88;		end
	when 268 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1640 "lib/parser/lexer.rl"
		begin
 @act = 89;		end
	when 282 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1845 "lib/parser/lexer.rl"
		begin
 @act = 111;		end
	when 351 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1851 "lib/parser/lexer.rl"
		begin
 @act = 112;		end
	when 350 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1857 "lib/parser/lexer.rl"
		begin
 @act = 113;		end
	when 69 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @act = 115;		end
	when 280 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1253 "lib/parser/lexer.rl"
		begin
 @act = 116;		end
	when 283 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1924 "lib/parser/lexer.rl"
		begin
 @act = 119;		end
	when 454 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1988 "lib/parser/lexer.rl"
		begin
 @act = 132;		end
	when 449 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2013 "lib/parser/lexer.rl"
		begin
 @act = 133;		end
	when 457 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2023 "lib/parser/lexer.rl"
		begin
 @act = 135;		end
	when 450 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2028 "lib/parser/lexer.rl"
		begin
 @act = 136;		end
	when 451 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2032 "lib/parser/lexer.rl"
		begin
 @act = 137;		end
	when 456 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @act = 138;		end
	when 448 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2047 "lib/parser/lexer.rl"
		begin
 @act = 139;		end
	when 443 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2061 "lib/parser/lexer.rl"
		begin
 @act = 140;		end
	when 379 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @act = 141;		end
	when 409 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2119 "lib/parser/lexer.rl"
		begin
 @act = 144;		end
	when 76 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @act = 145;		end
	when 382 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2162 "lib/parser/lexer.rl"
		begin
 @act = 147;		end
	when 374 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1253 "lib/parser/lexer.rl"
		begin
 @act = 151;		end
	when 384 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2184 "lib/parser/lexer.rl"
		begin
 @act = 152;		end
	when 162 then
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
# line 797 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 110 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 137 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 334 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 115 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 142 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 339 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 114 then
# line 715 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 141 then
# line 715 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 338 then
# line 715 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 112 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 139 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 336 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 108 then
# line 721 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 135 then
# line 721 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 332 then
# line 721 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 119 then
# line 751 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 765 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 146 then
# line 751 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 765 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 343 then
# line 751 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 765 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 102 then
# line 797 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 791 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 130 then
# line 797 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 791 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 327 then
# line 797 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 791 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 58 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 198 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1353 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 213 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1371 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 225 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1403 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 247 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1542 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 262 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1621 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 274 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1642 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 298 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1908 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 361 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1932 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 371 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1963 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 391 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2241 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 89 then
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2296 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 434 then
# line 2072 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 404 then
# line 2073 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 416 then
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 411 then
# line 2131 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 633 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 408 then
# line 2132 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 633 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 253 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 494 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1539 "lib/parser/lexer.rl"
		begin
 @act = 74;		end
	when 35 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1534 "lib/parser/lexer.rl"
		begin
 @act = 73;		end
	when 46 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1584 "lib/parser/lexer.rl"
		begin
 @act = 81;		end
	when 62 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1663 "lib/parser/lexer.rl"
		begin
 @act = 94;		end
	when 77 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2017 "lib/parser/lexer.rl"
		begin
 @act = 134;		end
	when 37 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1494 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1495 "lib/parser/lexer.rl"
		begin
 @act = 68;		end
	when 354 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1850 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @act = 115;		end
	when 353 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1850 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1253 "lib/parser/lexer.rl"
		begin
 @act = 116;		end
	when 435 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2072 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @act = 141;		end
	when 113 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 140 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 337 then
# line 694 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 111 then
# line 721 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 138 then
# line 721 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 870 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 335 then
# line 721 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 705 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 709 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1779 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 430 then
# line 2068 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 424 then
# line 2069 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 427 then
# line 2070 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 421 then
# line 2071 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 433 then
# line 2072 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 403 then
# line 2073 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 31 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 837 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1494 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1495 "lib/parser/lexer.rl"
		begin
 @act = 68;		end
	when 59 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1165 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1168 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1663 "lib/parser/lexer.rl"
		begin
 @act = 94;		end
	when 440 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2107 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
	when 436 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2072 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2107 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
	when 406 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2073 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2107 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
# line 21610 "lib/parser/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _lex_to_state_actions[ @cs] 
	when 83 then
# line 1 "NONE"
		begin
 @ts = nil;		end
# line 21620 "lib/parser/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _lex_eof_trans[ @cs] > 0
		_trans = _lex_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 282 "lib/parser/lexer.rl"
    # %

    @p = p

    if @token_queue.any?
      @token_queue.shift
    elsif @cs == klass.lex_error
      [ false, [ '$error'.freeze, range(p - 1, p) ] ]
    else
      eof = @source_pts.size
      [ false, [ '$eof'.freeze,   range(eof, eof) ] ]
    end
  end

  protected

  def eof_codepoint?(point)
    [0x04, 0x1a, 0x00].include? point
  end

  def version?(*versions)
    versions.include?(@version)
  end

  def stack_pop
    @top -= 1
    @stack[@top]
  end

  if defined?(Encoding)
    def encode_escape(ord)
      ord.chr.force_encoding(@source_buffer.source.encoding)
    end
  else
    def encode_escape(ord)
      ord.chr
    end
  end

  def tok(s = @ts, e = @te)
    @source_buffer.slice(s...e)
  end

  def range(s = @ts, e = @te)
    Parser::Source::Range.new(@source_buffer, s, e)
  end

  def emit(type, value = tok, s = @ts, e = @te)
    token = [ type, [ value, range(s, e) ] ]

    @token_queue.push(token)

    @tokens.push(token) if @tokens

    token
  end

  def emit_table(table, s = @ts, e = @te)
    value = tok(s, e)

    emit(table[value], value, s, e)
  end

  def emit_do(do_block=false)
    if @cond.active?
      emit(:kDO_COND, 'do'.freeze)
    elsif @cmdarg.active? || do_block
      emit(:kDO_BLOCK, 'do'.freeze)
    else
      emit(:kDO, 'do'.freeze)
    end
  end

  def arg_or_cmdarg
    if @command_state
      self.class.lex_en_expr_cmdarg
    else
      self.class.lex_en_expr_arg
    end
  end

  def emit_comment(s = @ts, e = @te)
    if @comments
      @comments.push(Parser::Source::Comment.new(range(s, e)))
    end

    if @tokens
      @tokens.push([ :tCOMMENT, [ tok(s, e), range(s, e) ] ])
    end

    nil
  end

  def diagnostic(type, reason, arguments=nil, location=range, highlights=[])
    @diagnostics.process(
        Parser::Diagnostic.new(type, reason, arguments, location, highlights))
  end

  #
  # === LITERAL STACK ===
  #

  def push_literal(*args)
    new_literal = Literal.new(self, *args)
    @literal_stack.push(new_literal)

    if new_literal.words? && new_literal.backslash_delimited?
      if new_literal.interpolate?
        self.class.lex_en_interp_backslash_delimited_words
      else
        self.class.lex_en_plain_backslash_delimited_words
      end
    elsif new_literal.words? && !new_literal.backslash_delimited?
      if new_literal.interpolate?
        self.class.lex_en_interp_words
      else
        self.class.lex_en_plain_words
      end
    elsif !new_literal.words? && new_literal.backslash_delimited?
      if new_literal.interpolate?
        self.class.lex_en_interp_backslash_delimited
      else
        self.class.lex_en_plain_backslash_delimited
      end
    else
      if new_literal.interpolate?
        self.class.lex_en_interp_string
      else
        self.class.lex_en_plain_string
      end
    end
  end

  def literal
    @literal_stack.last
  end

  def pop_literal
    old_literal = @literal_stack.pop

    @dedent_level = old_literal.dedent_level

    if old_literal.type == :tREGEXP_BEG
      # Fetch modifiers.
      self.class.lex_en_regexp_modifiers
    elsif @version < 24
      self.class.lex_en_expr_end
    else
      self.class.lex_en_expr_endarg
    end
  end

  # Mapping of strings to parser tokens.

  PUNCTUATION = {
    '='   => :tEQL,     '&'   => :tAMPER2,  '|'   => :tPIPE,
    '!'   => :tBANG,    '^'   => :tCARET,   '+'   => :tPLUS,
    '-'   => :tMINUS,   '*'   => :tSTAR2,   '/'   => :tDIVIDE,
    '%'   => :tPERCENT, '~'   => :tTILDE,   ','   => :tCOMMA,
    ';'   => :tSEMI,    '.'   => :tDOT,     '..'  => :tDOT2,
    '...' => :tDOT3,    '['   => :tLBRACK2, ']'   => :tRBRACK,
    '('   => :tLPAREN2, ')'   => :tRPAREN,  '?'   => :tEH,
    ':'   => :tCOLON,   '&&'  => :tANDOP,   '||'  => :tOROP,
    '-@'  => :tUMINUS,  '+@'  => :tUPLUS,   '~@'  => :tTILDE,
    '**'  => :tPOW,     '->'  => :tLAMBDA,  '=~'  => :tMATCH,
    '!~'  => :tNMATCH,  '=='  => :tEQ,      '!='  => :tNEQ,
    '>'   => :tGT,      '>>'  => :tRSHFT,   '>='  => :tGEQ,
    '<'   => :tLT,      '<<'  => :tLSHFT,   '<='  => :tLEQ,
    '=>'  => :tASSOC,   '::'  => :tCOLON2,  '===' => :tEQQ,
    '<=>' => :tCMP,     '[]'  => :tAREF,    '[]=' => :tASET,
    '{'   => :tLCURLY,  '}'   => :tRCURLY,  '`'   => :tBACK_REF2,
    '!@'  => :tBANG,    '&.'  => :tANDDOT,
  }

  PUNCTUATION_BEGIN = {
    '&'   => :tAMPER,   '*'   => :tSTAR,    '**'  => :tDSTAR,
    '+'   => :tUPLUS,   '-'   => :tUMINUS,  '::'  => :tCOLON3,
    '('   => :tLPAREN,  '{'   => :tLBRACE,  '['   => :tLBRACK,
  }

  KEYWORDS = {
    'if'     => :kIF_MOD,      'unless'   => :kUNLESS_MOD,
    'while'  => :kWHILE_MOD,   'until'    => :kUNTIL_MOD,
    'rescue' => :kRESCUE_MOD,  'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  KEYWORDS_BEGIN = {
    'if'     => :kIF,          'unless'   => :kUNLESS,
    'while'  => :kWHILE,       'until'    => :kUNTIL,
    'rescue' => :kRESCUE,      'defined?' => :kDEFINED,
  }

  %w(class module def undef begin end then elsif else ensure case when
     for break next redo retry in do return yield super self nil true
     false and or not alias __FILE__ __LINE__ __ENCODING__).each do |keyword|
    KEYWORDS_BEGIN[keyword] = KEYWORDS[keyword] = :"k#{keyword.upcase}"
  end

  
# line 2311 "lib/parser/lexer.rl"

  # %
end
