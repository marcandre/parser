# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby24 < Parser::Base


  def version
    24
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-290,-103,577,-104,524,577,219,-290,-290,-290,270,-105,-290,-290,-290',
'113,-290,270,-99,-287,112,-98,209,210,209,210,-290,-290,-290,619,-101',
'815,806,700,583,270,-290,-290,-102,-290,-290,-290,-290,-290,577,-485',
'-106,220,617,-103,577,-92,-485,113,891,209,210,113,112,-287,-101,-105',
'112,-99,577,-100,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,-576,723,-290,-290,-290,-98,785,-290,723,-105,-290,723',
'-100,-290,-290,618,-290,269,-290,265,-290,893,-290,-290,269,-290,-290',
'-290,-290,-290,-485,-290,-106,-290,616,-575,220,-92,220,-103,113,-104',
'269,113,-103,112,-104,-290,112,-105,-290,-290,-290,-290,-105,-290,-99',
'-290,-579,-98,814,-99,-290,-104,-98,-579,-579,-579,-101,220,-579,-579',
'-579,-101,-579,-97,-102,-92,-94,895,-92,-102,113,-579,-579,-579,-579',
'112,113,-92,-92,843,-90,112,-579,-579,638,-579,-579,-579,-579,-579,113',
'-100,790,113,897,112,-100,-94,112,-93,113,897,-89,113,-102,112,-96,270',
'112,-91,-104,451,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579',
'-579,-579,-579,790,789,-579,-579,-579,-94,784,-579,209,210,-579,604',
'-106,-579,-579,-103,-579,-106,-579,220,-579,862,-579,-579,637,-579,-579',
'-579,-579,-579,903,-579,-579,-579,-493,789,-84,-94,-575,-93,-91,536',
'-106,-575,538,265,-70,-579,217,-576,-579,-579,-579,-579,398,-579,637',
'-579,-579,400,399,905,-579,-102,113,-579,-579,-579,269,112,536,-579',
'-579,535,-579,606,605,-94,-100,-93,-94,-101,-93,-579,113,754,-572,-93',
'907,112,-94,-99,-93,-95,-579,-579,-492,-579,-579,-579,-579,-579,113',
'-92,499,-106,-91,112,557,-484,554,553,552,-101,555,557,-484,554,553',
'552,536,555,497,538,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579',
'-579,-579,-579,-579,-478,589,-579,-579,-579,590,643,-478,-91,495,-579',
'-91,-572,-579,604,-98,-478,-492,-579,604,-579,-91,-579,-579,604,-579',
'-579,-579,-579,-579,-481,-579,-579,-579,485,-572,-484,-481,-481,-481',
'91,92,-481,-481,-481,240,-481,-579,838,806,-579,-579,954,-93,-481,-579',
'-481,-481,-481,834,573,572,-579,-102,-89,-478,-481,-481,219,-481,-481',
'-481,-481,-481,-98,209,210,237,606,605,602,239,238,606,605,638,604,783',
'606,605,611,91,92,756,913,670,-481,-481,-481,-481,-481,-481,-481,-481',
'-481,-481,-481,-481,-481,-481,838,806,-481,-481,-481,453,-481,-481,93',
'94,-481,604,916,-481,-481,604,-481,-493,-481,604,-481,524,-481,-481',
'604,-481,-481,-481,-481,-481,-290,-481,-103,-481,-103,769,769,-290,-290',
'-290,606,605,615,-290,-290,220,-290,-481,985,220,-481,-481,-481,-481',
'-483,-481,920,-481,-573,93,94,-483,-481,-481,-90,-265,-290,-290,-96',
'-290,-290,-290,-290,-290,-99,606,605,620,-105,606,605,607,-91,606,605',
'602,452,-486,606,605,609,782,-100,-100,-486,450,-290,-290,-290,-290',
'-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-481,215,-290,-290',
'-290,921,642,-481,982,-483,-290,700,-573,-290,-489,924,-481,980,-290',
'926,-290,-489,-290,-290,928,-290,-290,-290,-290,-290,-487,-290,-579',
'-290,562,-573,930,-487,-101,-579,-579,-579,-486,220,565,-579,-579,-290',
'-579,932,-290,-290,-488,-290,401,-290,943,-579,79,-488,-579,536,-290',
'-104,538,-481,216,944,-579,-579,80,-579,-579,-579,-579,-579,217,573',
'572,-489,81,-291,566,-481,209,210,388,-478,-291,956,-481,958,959,964',
'-478,-487,743,-291,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579',
'-579,-579,-579,-579,-579,975,-579,-579,-579,-488,643,-579,220,978,-579',
'-97,-575,-579,319,318,-579,215,-579,983,-579,-106,-579,-579,263,-579',
'-579,-579,-579,-579,-478,-579,-579,-579,-291,-579,-481,-478,-478,-478',
'-478,259,-478,-478,-478,215,-478,-579,986,897,-579,-579,586,-579,-478',
'-579,-478,-478,-478,897,897,584,-579,-102,991,-579,-478,-478,956,-478',
'-478,-478,-478,-478,211,700,997,-290,999,-291,215,1001,216,693,-290',
'1003,-291,263,557,-576,554,553,552,-290,555,-291,-478,-478,-478,-478',
'-478,-478,-478,-478,-478,-478,-478,-478,-478,-478,216,109,-478,-478',
'-478,690,-478,-478,208,1003,-478,207,956,-478,-478,709,-478,1018,-478',
'1019,-478,-576,-478,-478,712,-478,-478,-478,-478,-478,-290,-478,-290',
'-478,-291,216,-575,-290,-290,-290,220,206,121,-290,-290,529,-290,-478',
'240,685,-478,-478,-478,-478,220,-478,674,-478,-84,220,690,215,-478,-478',
'691,1003,-290,-290,592,-290,-290,-290,-290,-290,220,-290,697,594,700',
'215,237,701,-290,703,239,238,630,-576,748,749,705,-290,750,107,108,628',
'-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'707,215,-290,-290,-290,215,642,662,448,715,-290,716,214,-290,717,660',
'216,449,-290,719,-290,212,-290,-290,220,-290,-290,-290,-290,-290,-290',
'-290,-409,-290,216,654,583,726,897,-409,-409,-409,562,956,-409,-409',
'-409,-290,-409,1026,-290,-290,565,-95,1003,-290,743,-409,-409,-409,753',
'757,-290,-104,758,-263,216,1003,-409,-409,216,-409,-409,-409,-409,-409',
'557,-490,554,553,552,-491,555,1003,-490,573,572,770,-491,240,566,240',
'240,-490,240,485,485,-491,-409,-409,-409,-409,-409,-409,-409,-409,-409',
'-409,-409,-409,-409,-409,220,709,-409,-409,-409,215,787,-409,-280,265',
'-409,259,517,-409,-409,-280,-409,794,-409,497,-409,515,-409,-409,-280',
'-409,-409,-409,-409,-409,-490,-409,-409,-409,-491,499,647,265,215,799',
'685,-333,215,220,636,527,265,-409,-333,977,-409,-409,-581,-409,449,-409',
'635,-333,594,-581,-581,-581,-409,220,-581,-581,-581,215,-581,265,216',
'685,631,-280,977,240,806,-581,-581,-581,-581,627,220,594,626,220,-262',
'832,-581,-581,624,-581,-581,-581,-581,-581,947,220,554,553,552,240,555',
'216,806,842,-333,216,621,220,557,596,554,553,552,588,555,587,-581,-581',
'-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,-581,216,237',
'-581,-581,-581,239,238,-581,235,236,-581,390,583,-581,-581,709,-581',
'220,-581,851,-581,499,-581,-581,712,-581,-581,-581,-581,-581,540,-581',
'-581,-581,557,-264,554,553,552,557,555,554,553,552,539,555,220,-581',
'220,240,-581,-581,-581,-581,861,-581,-281,-581,525,521,265,220,-581',
'-281,-281,-281,274,518,-281,-281,-281,709,-281,240,511,947,709,554,553',
'552,902,555,-281,-281,-281,685,510,880,220,254,255,-262,-281,-281,884',
'-281,-281,-281,-281,-281,557,-69,554,553,552,237,555,243,507,239,238',
'888,235,236,889,,241,,242,,,,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,240,709,-281,-281,-281,,,-281,,,-281,',
',-281,-281,,-281,,-281,,-281,,-281,-281,,-281,-281,-281,-281,-281,,-281',
'237,-281,,,239,238,,235,236,,557,,554,553,552,-281,555,,-281,-281,-281',
'-281,,-281,-580,-281,,,,,-281,-580,-580,-580,,,-580,-580,-580,240,-580',
'116,117,118,119,120,,709,,-580,-580,-580,-580,,,254,255,,,,-580,-580',
',-580,-580,-580,-580,-580,,,,237,,243,,239,238,,235,236,,,241,,242,116',
'117,118,119,120,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580,-580',
'-580,-580,-580,,,-580,-580,-580,,,-580,,,-580,,,-580,-580,,-580,,-580',
',-580,,-580,-580,,-580,-580,-580,-580,-580,,-580,-580,-580,,,557,,554',
'553,552,,555,,,,,-580,,,-580,-580,-580,-580,,-580,-245,-580,,,,,-580',
'-245,-245,-245,,,-245,-245,-245,240,-245,709,116,117,118,119,120,,,-245',
'-245,-245,,,,254,255,,,,-245,-245,,-245,-245,-245,-245,-245,,,,237,',
'243,,239,238,,235,236,,,241,,242,116,117,118,119,120,-245,-245,-245',
'-245,-245,-245,-245,-245,-245,-245,-245,-245,-245,-245,,,-245,-245,-245',
',,-245,,265,-245,,,-245,-245,,-245,,-245,,-245,,-245,-245,,-245,-245',
'-245,-245,-245,-297,-245,-245,-245,,,,-297,-297,-297,,,-297,-297,-297',
',-297,-245,240,,-245,-245,,-245,,-245,-297,-297,,,,,-245,,254,255,-297',
'-297,,-297,-297,-297,-297,-297,,,,,,,237,,243,,239,238,,235,236,,,241',
',242,,,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297',
'-297,,,-297,-297,-297,,,-297,,274,-297,,,-297,-297,,-297,,-297,,-297',
',-297,-297,,-297,-297,-297,-297,-297,,-297,-245,-297,,,,,,-245,-245',
'-245,,,-245,-245,-245,-297,-245,,-297,-297,,-297,,-297,,-245,-245,,',
',-297,,,,,,-245,-245,,-245,-245,-245,-245,-245,,557,,554,553,552,562',
'555,,,,,,,,,565,,,240,244,249,250,251,246,248,256,257,252,253,,233,234',
'-245,,254,255,,560,,-245,,,,,265,-245,570,569,573,572,237,,243,566,239',
'238,,235,236,247,245,241,,242,,,,-245,-245,,,,,,,,,,,220,,,-245,258',
',-245,,,,,-245,292,69,70,71,9,57,-245,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,632,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,-237,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,632',
'8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240',
'244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33',
',,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,220,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45',
'294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244',
'249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58',
'59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,240,-600,-600,-600,-600,246,248,,,-600,-600,,,,,,254,255,,40,',
',33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,244,249,250,251,246,248,,,252,253,,,,,,254,255,,40,',
',33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,-600,-600,-600,-600,246,248,,,-600,-600,,,,,,254,255',
',40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,,252,253,,,,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,-600,-600,-600,-600,246,248,,,-600,-600,,,,',
',254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93',
'94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,240,-600,-600,-600,-600,246,248,,,-600,-600',
',,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,240,-600,-600,-600,-600,246,248,,,-600',
'-600,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235',
'236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62',
',81,93,94,5,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,',
'29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,240,-600,-600,-600,-600,246,248,,,-600',
'-600,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235',
'236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,-600,-600,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248',
'256,257,252,253,,-600,-600,,,254,255,,40,,,33,,,58,59,,,60,,35,237,',
'243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,',
',,,,,,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
',,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,5,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,',
'91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,,44,239,238,,235,236,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,,,,,,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,,,,20,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,5,69,70,71,9',
'57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,',
',,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,296,,,58,59,,,60,,35,,,,44,',
',,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94',
'292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,',
'60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,',
',62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40',
',,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,',
',69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281',
',44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,',
',,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,',
',,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315',
',,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,300,,,,,,,,,,,,,,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,305,,,231,,,58,59,,,60,,,557,,554,553,552,562,555,,,,,,,,',
'565,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,317,,560,62,,81,93,94,69',
'70,71,,57,573,572,,63,64,566,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',,315,,,,,,,,,,,,,,,,,,,,934,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,',
',,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,,,44,,,287,,,,,,230,',
',,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
'113,,,,,112,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,350,,,33',
',,58,59,,,60,,35,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,',
'307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,355,56,97',
'96,356,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,362,,,357,,,231,,,58',
'59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,355,56,97,96,356,',
'99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,357,,,231,,,58,59,,,60,,',
'557,,554,553,552,562,555,,,,,,,,,565,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,560,62,,81,93,94,69,70,71,9,57,573,572,,63,64,566,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,,,390,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,',
',,,,,,,,,,,,,,,940,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308',
'314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,',
',,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,',
',,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,',
',,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,220,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,934,,,231,,',
'58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,',
'69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281',
',44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,220,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,667,,,,44,,,',
',,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
'8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,231',
',,58,59,,,60,,,557,,554,553,552,562,555,,,,,,,,,565,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,513,,560,62,,81,93,94,69,70,71,,57,573,572,,63',
'64,566,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,',
',89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,',
',,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,529,,58,59,,,60,,,',
',,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,',
',,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305',
',,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62',
',81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60',
',35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281',
',44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,',
',105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,',
',,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
'286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,667,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58',
'59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,761,',
',,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,',
',,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,667,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9',
'57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,390,62,,81,93,94,69,70,71',
',57,,,,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,667,,,,44',
',,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,173,184,174,197,170',
'190,180,179,200,201,195,178,177,172,198,202,203,182,171,185,189,191',
'183,176,,,,192,199,194,193,186,196,181,169,188,187,,,,,,168,175,166',
'167,163,164,165,124,126,,,125,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,,,,,88,173,184,174',
'197,170,190,180,179,200,201,195,178,177,172,198,202,203,182,171,185',
'189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187,,,,,,168',
'175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,,,,,88,173',
'184,174,197,170,190,180,179,200,201,195,178,177,172,198,202,203,182',
'171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187,',
',,,,168,175,166,167,163,164,165,124,126,123,,125,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,',
',,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198',
'202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169',
'188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,',
',,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89',
',,,,,,,,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177',
'172,198,202,203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196',
'181,169,188,187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,',
',,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147',
',,,,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
',,162,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202',
'203,182,171,185,189,191,183,176,,,,192,199,194,373,372,374,371,169,188',
'187,,,,,,168,175,166,167,368,369,370,366,126,97,96,367,,99,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,378',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,428',
'432,162,,429,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,',
',,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149',
'143,141,133,155,134,435,439,162,,434,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135',
'156,153,152,161,148,149,143,141,133,155,134,483,432,162,,484,,,,,,,',
'157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,',
',,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
'648,432,162,,649,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,650,439,162,,651,,,,,,,,157,158,,154,136,137',
'138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,678,432,162,,679,,',
',,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147',
',,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,681,439,162,,682,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139',
'140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161',
'148,149,143,141,133,155,134,648,432,162,,649,,,,,,,,157,158,,154,136',
'137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,650,439,162,,651',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,729,432,162,,730,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,731,439,162,,732,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,734,439,162',
',735,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,483,432,162,,484,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,763,432,162,,764,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,766,439',
'162,,765,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,1007,439,162,,1006,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,1010,432,162,,1011,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,1012',
'439,162,,1013,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,,557,162,554,553,552,562,555,,557,,554,553,552',
'562,555,565,,,,,,,,565,,557,,554,553,552,562,555,,,,,,560,,,565,,,,',
'560,570,569,573,572,,,,566,570,569,573,572,,,,566,560,,557,,554,553',
'552,562,555,,,573,572,,,,566,565,,557,,554,553,552,562,555,,557,,554',
'553,552,562,555,565,,,,,560,,,565,,,,,,570,569,573,572,,,,566,560,,',
',,,,,560,570,569,573,572,,,,566,570,569,573,572,,,557,566,554,553,552',
'562,555,,557,,554,553,552,562,555,565,,,,,,,,565,,557,,554,553,552,562',
'555,,,,,,560,,,565,,,,,560,,,573,572,,,,566,570,569,573,572,,,,566,560',
',557,,554,553,552,562,555,570,569,573,572,,,,566,565,,557,,554,553,552',
'562,555,557,,554,553,552,562,555,,565,,,,,560,,565,,,,,,,570,569,573',
'572,,,,566,560,,,,,,,560,,,,573,572,,,,566,,573,572,,,557,566,554,553',
'552,562,555,,557,,554,553,552,562,555,565,,,,,,,,565,,557,,554,553,552',
'562,555,,,,,,560,,,565,,,,,560,543,,573,572,,,,566,570,569,573,572,',
',,566,560,,557,,554,553,552,562,555,,,573,572,,,,566,565,,557,,554,553',
'552,562,555,,,,,,,,,565,,,,,560,,,,,,,,,,,573,572,,,,566,560,,,,,,,',
',570,569,573,572,,,,566' ]
        racc_action_table = arr = ::Array.new(25405, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'651,1011,341,1013,450,340,19,651,651,651,61,983,651,651,651,3,651,657',
'938,58,3,937,688,688,444,444,651,651,651,386,1010,695,911,818,911,310',
'651,651,1012,651,651,651,651,651,906,374,351,19,385,730,727,678,374',
'854,822,601,601,290,854,58,729,450,290,348,883,1024,651,651,651,651',
'651,651,651,651,651,651,651,651,651,651,1013,580,651,651,651,347,651',
'651,846,587,651,579,845,651,651,386,651,61,651,310,651,823,651,651,657',
'651,651,651,651,651,374,651,941,651,385,1012,688,678,444,1011,341,1013',
'310,340,1011,341,1013,651,340,983,651,651,651,651,983,651,938,651,650',
'937,695,938,651,651,937,650,650,650,1010,601,650,650,650,1010,650,351',
'1012,678,730,825,678,1012,906,650,650,650,650,906,727,729,678,727,348',
'727,650,650,429,650,650,650,650,650,883,1024,661,580,826,883,1024,679',
'580,681,846,828,347,579,731,846,587,26,579,845,732,226,650,650,650,650',
'650,650,650,650,650,650,650,650,650,650,655,661,650,650,650,429,650',
'650,597,597,650,612,941,650,650,429,650,941,650,831,650,786,650,650',
'763,650,650,650,650,650,833,650,650,650,224,655,673,679,681,681,801',
'694,226,731,694,26,673,650,413,732,650,650,650,650,123,650,428,650,435',
'123,123,836,650,650,344,435,435,435,26,344,330,435,435,330,435,612,612',
'679,786,681,679,763,681,435,849,612,355,731,839,849,679,224,681,732',
'435,435,223,435,435,435,435,435,597,428,282,413,801,597,902,373,902',
'902,902,428,902,712,373,712,712,712,331,712,279,331,435,435,435,435',
'435,435,435,435,435,435,435,435,435,435,355,357,435,435,435,357,435',
'355,801,278,435,801,355,435,501,223,355,38,435,614,435,801,435,435,383',
'435,435,435,435,435,98,435,435,435,264,355,373,98,98,98,315,315,98,98',
'98,457,98,435,718,718,435,435,902,435,98,435,98,98,98,712,700,700,435',
'435,38,355,98,98,232,98,98,98,98,98,38,339,339,457,501,501,501,457,457',
'614,614,764,384,649,383,383,383,41,41,614,848,501,98,98,98,98,98,98',
'98,98,98,98,98,98,98,98,993,993,98,98,98,228,98,98,315,315,98,387,852',
'98,98,381,98,39,98,380,98,319,98,98,382,98,98,98,98,98,765,98,764,98',
'649,633,858,765,765,765,384,384,384,765,765,945,765,98,945,853,98,98',
'98,98,372,98,856,98,356,41,41,372,98,98,39,857,765,765,319,765,765,765',
'765,765,39,387,387,387,319,381,381,381,633,380,380,380,227,371,382,382',
'382,648,633,858,371,225,765,765,765,765,765,765,765,765,765,765,765',
'765,765,765,356,939,765,765,765,864,765,356,939,372,765,865,356,765',
'370,867,356,939,765,868,765,370,765,765,869,765,765,765,765,765,369',
'765,766,765,697,356,871,369,648,766,766,766,371,872,697,766,766,765',
'766,873,765,765,368,765,204,765,886,766,77,368,734,334,765,765,334,356',
'939,887,766,766,77,766,766,766,766,766,17,697,697,370,77,590,697,367',
'14,14,109,366,590,904,367,908,909,915,366,369,919,590,766,766,766,766',
'766,766,766,766,766,766,766,766,766,766,734,931,766,766,766,368,766',
'734,45,934,766,17,734,766,40,37,734,24,766,940,766,17,766,766,24,766',
'766,766,766,766,95,766,766,766,590,734,367,95,95,95,366,22,95,95,95',
'349,95,766,949,950,766,766,349,766,95,766,95,95,95,951,952,349,766,766',
'953,734,95,95,955,95,95,95,95,95,15,966,969,735,970,518,376,971,24,533',
'735,974,518,376,560,735,560,560,560,735,560,518,95,95,95,95,95,95,95',
'95,95,95,95,95,95,95,349,1,95,95,95,979,95,95,13,1031,95,12,992,95,95',
'560,95,994,95,995,95,1006,95,95,560,95,95,95,95,95,434,95,735,95,518',
'376,1007,434,434,434,1009,10,7,434,434,519,434,95,456,522,95,95,95,95',
'514,95,512,95,509,508,530,359,95,95,531,972,434,434,359,434,434,434',
'434,434,492,682,545,359,546,412,456,548,682,549,456,456,412,682,605',
'605,550,682,605,605,605,412,434,434,434,434,434,434,434,434,434,434',
'434,434,434,434,559,222,434,434,434,16,434,491,222,567,434,571,16,434',
'574,489,359,222,434,576,434,16,434,434,487,434,434,434,434,434,682,434',
'27,434,412,480,581,582,1015,27,27,27,921,1016,27,27,27,434,27,1020,434',
'434,921,434,1021,434,599,27,27,27,609,617,434,434,619,625,222,1022,27',
'27,16,27,27,27,27,27,991,302,991,991,991,303,991,1023,302,921,921,634',
'303,461,921,460,459,302,458,639,644,303,27,27,27,27,27,27,27,27,27,27',
'27,27,27,27,652,991,27,27,27,304,653,27,306,27,27,656,304,27,27,306',
'27,658,27,664,27,304,27,27,306,27,27,27,27,27,302,27,27,27,303,666,446',
'436,321,672,675,46,933,677,427,321,680,27,46,933,27,27,440,27,321,27',
'426,46,933,440,440,440,27,424,440,440,440,976,440,683,304,684,414,306',
'976,687,689,440,440,440,440,410,692,976,407,696,405,711,440,440,402',
'440,440,440,440,440,888,713,888,888,888,475,888,321,720,725,46,933,396',
'728,709,361,709,709,709,352,709,350,440,440,440,440,440,440,440,440',
'440,440,440,440,440,440,976,475,440,440,440,475,475,440,475,475,440',
'346,345,440,440,709,440,737,440,741,440,335,440,440,709,440,440,440',
'440,440,333,440,440,440,832,760,832,832,832,903,832,903,903,903,332',
'903,762,440,328,323,440,440,440,440,771,440,56,440,320,316,314,309,440',
'56,56,56,308,305,56,56,56,832,56,468,299,985,903,985,985,985,832,985',
'56,56,56,800,298,804,297,468,468,807,56,56,808,56,56,56,56,56,954,295',
'954,954,954,468,954,468,294,468,468,816,468,468,817,,468,,468,,,,56',
'56,56,56,56,56,56,56,56,56,56,56,56,56,476,954,56,56,56,,,56,,,56,,',
'56,56,,56,,56,,56,,56,56,,56,56,56,56,56,,56,476,56,,,476,476,,476,476',
',956,,956,956,956,56,956,,56,56,56,56,,56,439,56,,,,,56,439,439,439',
',,439,439,439,469,439,293,293,293,293,293,,956,,439,439,439,439,,,469',
'469,,,,439,439,,439,439,439,439,439,,,,469,,469,,469,469,,469,469,,',
'469,,469,6,6,6,6,6,439,439,439,439,439,439,439,439,439,439,439,439,439',
'439,,,439,439,439,,,439,,,439,,,439,439,,439,,439,,439,,439,439,,439',
'439,439,439,439,,439,439,439,,,834,,834,834,834,,834,,,,,439,,,439,439',
'439,439,,439,430,439,,,,,439,430,430,430,,,430,430,430,466,430,834,532',
'532,532,532,532,,,430,430,430,,,,466,466,,,,430,430,,430,430,430,430',
'430,,,,466,,466,,466,466,,466,466,,,466,,466,506,506,506,506,506,430',
'430,430,430,430,430,430,430,430,430,430,430,430,430,,,430,430,430,,',
'430,,430,430,,,430,430,,430,,430,,430,,430,430,,430,430,430,430,430',
'28,430,430,430,,,,28,28,28,,,28,28,28,,28,430,467,,430,430,,430,,430',
'28,28,,,,,430,,467,467,28,28,,28,28,28,28,28,,,,,,,467,,467,,467,467',
',467,467,,,467,,467,,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,28',
'28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28,,28,28,28,28,28,,28,482',
'28,,,,,,482,482,482,,,482,482,482,28,482,,28,28,,28,,28,,482,482,,,',
'28,,,,,,482,482,,482,482,482,482,482,,789,,789,789,789,789,789,,,,,',
',,,789,,,528,528,528,528,528,528,528,528,528,528,528,,528,528,482,,528',
'528,,789,,482,,,,,482,482,789,789,789,789,528,,528,789,528,528,,528',
'528,528,528,528,,528,,,,482,482,,,,,,,,,,,789,,,482,528,,482,,,,,482',
'578,578,578,578,578,578,482,,,578,578,,,,578,,578,578,578,578,578,578',
'578,,,,,,578,578,578,578,578,578,578,,,578,,,,,417,578,578,578,578,578',
'578,578,578,578,578,578,578,,578,578,578,,578,578,578,578,578,417,417',
'417,417,417,417,417,417,417,417,417,,417,417,,,417,417,,578,,,578,,',
'578,578,,,578,,578,417,,417,578,417,417,,417,417,417,417,417,578,417',
',,,578,578,578,578,,578,578,578,578,,,,,578,578,,417,,417,,,578,,578',
'578,578,841,841,841,841,841,841,,,,841,841,,,,841,,841,841,841,841,841',
'841,841,,,,,,841,841,841,841,841,841,841,,,841,,,,,423,841,841,841,841',
'841,841,841,841,841,841,841,841,,841,841,841,,841,841,841,841,841,423',
'423,423,423,423,423,423,423,423,423,423,,423,423,,,423,423,,841,,,841',
',,841,841,,,841,,841,423,,423,841,423,423,,423,423,423,423,423,841,423',
',,,841,841,841,841,,841,841,841,841,,,,,841,841,,423,,,,,841,,841,841',
'841,791,791,791,791,791,791,,,,791,791,,,,791,,791,791,791,791,791,791',
'791,,,,,,791,791,791,791,791,791,791,,,791,,,,,,791,791,791,791,791',
'791,791,791,791,791,791,791,,791,791,791,,791,791,791,791,791,276,276',
'276,276,276,276,276,276,276,276,276,,276,276,,,276,276,,791,,,791,,',
'791,791,,,791,,791,276,,276,791,276,276,,276,276,276,276,276,791,276',
',,,791,791,791,791,,791,791,791,791,,,,,791,791,,276,,,,,791,,791,791',
'791,752,752,752,752,752,752,,,,752,752,,,,752,,752,752,752,752,752,752',
'752,,,,,,752,752,752,752,752,752,752,,,752,,,,,,752,752,752,752,752',
'752,752,752,752,752,752,752,,752,752,752,,752,752,752,752,752,863,863',
'863,863,863,863,863,863,863,863,863,,863,863,,,863,863,,752,,,752,,',
'752,752,,,752,,752,863,,863,752,863,863,,863,863,863,863,863,752,863',
',,,752,752,752,752,,752,752,752,752,,,,,752,752,,863,,,,,752,,752,752',
'752,840,840,840,840,840,840,,,,840,840,,,,840,,840,840,840,840,840,840',
'840,,,,,,840,840,840,840,840,840,840,,,840,,,,,,840,840,840,840,840',
'840,840,840,840,840,840,840,,840,840,840,,840,840,840,840,840,21,21',
'21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,840,,,840,,,840,840,,,840',
',840,21,,21,840,21,21,,21,21,21,21,21,840,21,,,,840,840,840,840,,840',
'840,840,840,,,,,840,840,,21,,,,,840,,840,840,840,880,880,880,880,880',
'880,,,,880,880,,,,880,,880,880,880,880,880,880,880,,,,,,880,880,880',
'880,880,880,880,,,880,,,,,,880,880,880,880,880,880,880,880,880,880,880',
'880,,880,880,880,,880,880,880,880,880,479,479,479,479,479,479,479,479',
'479,479,479,,479,479,,,479,479,,880,,,880,,,880,880,,,880,,880,479,',
'479,880,479,479,,479,479,479,479,479,880,479,,,,880,880,880,880,,880',
'880,880,880,,,,,880,880,479,479,,,,,880,,880,880,880,936,936,936,936',
'936,936,,,,936,936,,,,936,,936,936,936,936,936,936,936,,,,,,936,936',
'936,936,936,936,936,,,936,,,,,,936,936,936,936,936,936,936,936,936,936',
'936,936,,936,936,936,,936,936,936,936,936,768,768,768,768,768,768,768',
'768,768,768,768,,768,768,,,768,768,,936,,,936,,,936,936,,,936,,936,768',
',768,936,768,768,,768,768,768,768,768,936,768,,,,936,936,936,936,,936',
'936,936,936,,,,,936,936,,768,,,,,936,,936,936,936,815,815,815,815,815',
'815,,,,815,815,,,,815,,815,815,815,815,815,815,815,,,,,,815,815,815',
'815,815,815,815,,,815,,,,,,815,815,815,815,815,815,815,815,815,815,815',
'815,,815,815,815,,815,815,815,815,815,471,471,471,471,471,471,471,,',
'471,471,,,,,,471,471,,815,,,815,,,815,815,,,815,,815,471,,471,815,471',
'471,,471,471,471,471,471,815,471,,,,815,815,815,815,,815,815,815,815',
',,,,815,815,,,,,,,815,,815,815,815,965,965,965,965,965,965,,,,965,965',
',,,965,,965,965,965,965,965,965,965,,,,,,965,965,965,965,965,965,965',
',,965,,,,,,965,965,965,965,965,965,965,965,965,965,965,965,,965,965',
'965,,965,965,965,965,965,477,477,477,477,477,477,477,,,477,477,,,,,',
'477,477,,965,,,965,,,965,965,,,965,,965,477,,477,965,477,477,,477,477',
'477,477,477,965,477,,,,965,965,965,965,,965,965,965,965,,,,,965,965',
',,,,,,965,,965,965,965,301,301,301,301,301,301,,,,301,301,,,,301,,301',
'301,301,301,301,301,301,,,,,,301,301,301,301,301,301,301,,,301,,,,,',
'301,301,301,301,301,301,301,301,301,301,301,301,,301,301,301,,301,301',
'301,301,301,470,470,470,470,470,470,470,,,470,470,,,,,,470,470,,301',
',,301,,,301,301,,,301,,301,470,,470,301,470,470,,470,470,470,470,470',
'301,470,,,,301,301,301,301,,301,301,301,301,,,,,301,301,,,,,,,301,,301',
'301,301,795,795,795,795,795,795,,,,795,795,,,,795,,795,795,795,795,795',
'795,795,,,,,,795,795,795,795,795,795,795,,,795,,,,,,795,795,795,795',
'795,795,795,795,795,795,795,795,,795,795,795,,795,795,795,795,795,478',
'478,478,478,478,478,478,478,,478,478,,,,,,478,478,,795,,,795,,,795,795',
',,795,,795,478,,478,795,478,478,,478,478,478,478,478,795,478,,,,795',
'795,795,795,,795,795,795,795,,,,,795,795,,,,,,,795,,795,795,795,326',
'326,326,326,326,326,,,,326,326,,,,326,,326,326,326,326,326,326,326,',
',,,,326,326,326,326,326,326,326,,,326,,,,,,326,326,326,326,326,326,326',
'326,326,326,326,326,,326,326,326,,326,326,326,326,326,473,473,473,473',
'473,473,473,,,473,473,,,,,,473,473,,326,,,326,,,326,326,,,326,,326,473',
',473,326,473,473,,473,473,473,473,473,326,473,,,,326,326,326,326,,326',
'326,326,326,,,,,326,326,,,,,,,326,,326,326,326,814,814,814,814,814,814',
',,,814,814,,,,814,,814,814,814,814,814,814,814,,,,,,814,814,814,814',
'814,814,814,,,814,,,,,,814,814,814,814,814,814,814,814,814,814,814,814',
',814,814,814,,814,814,814,814,814,472,472,472,472,472,472,472,,,472',
'472,,,,,,472,472,,814,,,814,,,814,814,,,814,,814,472,,472,814,472,472',
',472,472,472,472,472,814,472,,,,814,814,814,814,,814,814,814,814,,,',
',814,814,,,,,,,814,,814,814,814,806,806,806,806,806,806,,,,806,806,',
',,806,,806,806,806,806,806,806,806,,,,,,806,806,806,806,806,806,806',
',,806,,,,,,806,806,806,806,806,806,806,806,806,806,806,806,,806,806',
'806,,806,806,806,806,806,474,474,474,474,474,474,474,,,474,474,,,,,',
'474,474,,806,,,806,,,806,806,,,806,,806,474,,474,806,474,474,,474,474',
'474,474,474,806,474,,,,806,806,806,806,,806,806,806,806,,,,,806,806',
',,,,,,806,,806,806,806,507,507,507,507,507,507,,,,507,507,,,,507,,507',
'507,507,507,507,507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,',
'507,507,507,507,507,507,507,507,507,507,507,507,,507,507,507,,507,507',
'507,507,507,465,465,465,465,465,465,465,,,465,465,,,,,,465,465,,507',
',,507,,,507,507,,,507,,507,465,,465,507,465,465,,465,465,465,465,465',
'507,465,,,,507,507,507,507,,507,507,507,507,,,,,507,507,,,,,,,507,,507',
'507,507,844,844,844,844,844,844,,,,844,844,,,,844,,844,844,844,844,844',
'844,844,,,,,,844,844,844,844,844,844,844,,,844,,,,,,844,844,844,844',
'844,844,844,844,844,844,844,844,,844,844,844,,844,844,844,844,844,454',
'454,454,454,454,454,454,454,454,454,454,,454,454,,,454,454,,844,,,844',
',,844,844,,,844,,844,454,,454,844,454,454,,454,454,454,454,454,844,454',
',,,844,844,844,844,,844,844,844,844,,,,,844,844,,,,,,,844,,844,844,844',
'598,598,598,598,598,598,,,,598,598,,,,598,,598,598,598,598,598,598,598',
',,,,,598,598,598,598,598,598,598,,,598,,,,,,598,598,598,598,598,598',
'598,598,598,598,598,598,,598,598,598,,598,598,598,598,598,455,455,455',
'455,455,455,455,455,455,455,455,,455,455,,,455,455,,598,,,598,,,598',
'598,,,598,,598,455,,455,598,455,455,,455,455,455,455,455,598,455,,,',
'598,598,598,598,,598,598,598,598,,,,,598,598,,,,,,,598,,598,598,598',
'33,33,33,33,33,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33',
'33,33,33,33,,,33,,,,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33',
',33,33,33,33,33,462,,,,,,,,,,,,,,,,462,462,,33,,,33,,,33,33,,,33,,33',
'462,,462,33,462,462,,462,462,,,,33,,,,,33,33,33,33,,33,33,33,33,,,,',
'33,33,,,,,,,33,,33,33,33,0,0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,',
',0,0,0,0,0,0,0,,,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,464',
',,,,,,,,,,,,,,,464,464,,0,,,0,,,0,0,,,0,,0,464,,,0,464,464,,464,464',
',,,0,,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,,,,,,0,,0,0,0,575,575,575,575,575',
'575,,,,575,575,,,,575,,575,575,575,575,575,575,575,,,,,,575,575,575',
'575,575,575,575,,,575,,,,,,575,575,575,575,575,575,575,575,575,575,575',
'575,,575,575,575,,575,575,575,575,575,463,,,,,,,,,,,,,,,,463,463,,575',
',,575,,,575,575,,,575,,575,463,,463,575,463,463,,463,463,,,,575,,,,',
'575,575,575,575,,575,575,575,575,,,,,575,575,,,,,,,575,,575,575,575',
'121,121,121,121,121,121,,,,121,121,,,,121,,121,121,121,121,121,121,121',
',,,,,121,121,121,121,121,121,121,,,121,,,,,,121,121,121,121,121,121',
'121,121,121,121,121,121,,121,121,121,,121,121,121,121,121,,,,,,,,,,',
',,,,,,,,,121,,,121,,,121,121,,,121,,121,,,,121,,,,,,,,,121,,,,,121,121',
'121,121,,121,121,121,121,,,,,121,121,,,,,,,121,,121,121,121,738,738',
'738,738,738,738,,,,738,738,,,,738,,738,738,738,738,738,738,738,,,,,',
'738,738,738,738,738,738,738,,,738,,,,,,738,738,738,738,738,738,738,738',
'738,738,738,738,,738,738,738,,738,738,738,738,738,,,,,,,,,,,,,,,,,,',
',738,,,738,,,738,738,,,738,,738,,,,738,,,,,,,,,738,,,,,738,738,738,738',
',738,738,738,738,,,,,738,738,,,,,,,738,,738,738,738,296,296,296,296',
'296,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,,296,296',
'296,296,296,296,296,,,296,,,,,,296,296,296,296,296,296,296,296,296,296',
'296,296,,296,296,296,,296,296,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296',
',,296,296,,,296,,296,,,,296,,,,,,,,,296,,,,,296,296,296,296,,296,296',
'296,296,,,,,296,296,,,,,,,296,,296,296,296,206,206,206,206,206,206,',
',,206,206,,,,206,,206,206,206,206,206,206,206,,,,,,206,206,206,206,206',
'206,206,,,206,,,,,,206,206,206,206,206,206,206,206,206,206,206,206,',
'206,206,206,,206,206,206,206,206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206',
'206,,,206,,206,,,,206,,,,,,,,,206,,,,,206,206,206,206,,206,206,206,206',
',,,,206,206,,,,,,,206,,206,206,206,742,742,742,742,742,742,,,,742,742',
',,,742,,742,742,742,742,742,742,742,,,,,,742,742,742,742,742,742,742',
',,742,,,,,,742,742,742,742,742,742,742,742,742,742,742,742,,742,742',
'742,,742,742,742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,,742',
',742,,,,742,,,,,,,,,742,,,,,742,742,742,742,,742,742,742,742,,,,,742',
'742,,,,,,,742,,742,742,742,963,963,963,963,963,963,,,,963,963,,,,963',
',963,963,963,963,963,963,963,,,,,,963,963,963,963,963,963,963,,,963',
',,,,,963,963,963,963,963,963,963,963,963,963,963,963,,963,963,963,,963',
'963,963,963,963,,,,,,,,,,,,,,,,,,,,963,,,963,,,963,963,,,963,,963,,',
',963,,,,,,,,,963,,,,,963,963,963,963,,963,963,963,963,,,,,963,963,,',
',,,,963,,963,963,963,957,957,957,957,957,957,,,,957,957,,,,957,,957',
'957,957,957,957,957,957,,,,,,957,957,957,957,957,957,957,,,957,,,,,',
'957,957,957,957,957,957,957,957,957,957,957,957,,957,957,957,,957,957',
'957,957,957,,,,,,,,,,,,,,,,,,,,957,,,957,,,957,957,,,957,,957,,,,957',
',,,,,,,,957,,,,,957,957,957,957,,957,957,957,957,,,,,957,957,,,,,,,957',
',957,957,957,850,850,850,850,850,850,,,,850,850,,,,850,,850,850,850',
'850,850,850,850,,,,,,850,850,850,850,850,850,850,,,850,,,,,,850,850',
'850,850,850,850,850,850,850,850,850,850,,850,850,850,,850,850,850,850',
'850,,,,,,,,,,,,,,,,,,,,850,,,850,,,850,850,,,850,,850,,,,850,,,,,,,',
',850,,,,,850,850,850,850,,850,850,850,850,,,,,850,850,,,,,,,850,,850',
'850,850,231,231,231,231,231,231,,,,231,231,,,,231,,231,231,231,231,231',
'231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,231,231,231,231',
'231,231,231,231,231,231,231,231,,231,231,231,,231,231,231,231,231,,',
',,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,231,,,,231,,,,,,,,,231,',
',,,231,231,231,231,,231,231,231,231,,,,,231,231,,,,234,234,234,231,234',
'231,231,231,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234',
'234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234',
',234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234',
'234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234,234,,234,234,234,234',
',,,,234,234,,,,235,235,235,234,235,234,234,234,235,235,,,,235,,235,235',
'235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235',
',,235,235,235,235,235,235,235,235,,235,235,235,,235,235,235,235,235',
',,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,,235,,',
',,235,235,235,235,,235,235,235,235,,,,,235,235,,,,236,236,236,235,236',
'235,235,235,236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236',
'236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236',
',236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236',
'236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236,236,,236,236,236,236',
',,,,236,236,,,,237,237,237,236,237,236,236,236,237,237,,,,237,,237,237',
'237,237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237',
',,237,237,237,237,237,237,237,237,,237,237,237,,237,237,237,237,237',
',,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,,237,,',
',,237,237,237,237,,237,237,237,237,,,,,237,237,,,,238,238,238,237,238',
'237,237,237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238',
'238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238',
',238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238',
'238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238,238,,238,238,238,238',
',,,,238,238,,,,239,239,239,238,239,238,238,238,239,239,,,,239,,239,239',
'239,239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239',
',,239,239,239,239,239,239,239,239,,239,239,239,,239,239,239,239,239',
',,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,,239,,',
',,239,239,239,239,,239,239,239,239,,,,,239,239,,,,240,240,240,239,240',
'239,239,239,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240',
'240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240',
',240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240',
'240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240,240,,240,240,240,240',
',,,,240,240,,,,241,241,241,240,241,240,240,240,241,241,,,,241,,241,241',
'241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241',
',,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241,241',
',,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,,241,,',
',,241,241,241,241,,241,241,241,241,,,,,241,241,,,,242,242,242,241,242',
'241,241,241,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242',
'242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242',
',242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242',
'242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242,242,,242,242,242,242',
',,,,242,242,,,,243,243,243,242,243,242,242,242,243,243,,,,243,,243,243',
'243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243',
',,243,243,243,243,243,243,243,243,,243,243,243,,243,243,243,243,243',
',,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,,243,,',
',,243,243,243,243,,243,243,243,243,,,,,243,243,,,,244,244,244,243,244',
'243,243,243,244,244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244',
'244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244',
',244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244',
'244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244,244,,244,244,244,244',
',,,,244,244,,,,245,245,245,244,245,244,244,244,245,245,,,,245,,245,245',
'245,245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245',
',,245,245,245,245,245,245,245,245,,245,245,245,,245,245,245,245,245',
',,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,,245,,',
',,245,245,245,245,,245,245,245,245,,,,,245,245,,,,246,246,246,245,246',
'245,245,245,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246',
'246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246',
',246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246',
'246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246,246,,246,246,246,246',
',,,,246,246,,,,247,247,247,246,247,246,246,246,247,247,,,,247,,247,247',
'247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247',
',,247,247,247,247,247,247,247,247,,247,247,247,,247,247,247,247,247',
',,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,,247,,',
',,247,247,247,247,,247,247,247,247,,,,,247,247,,,,248,248,248,247,248',
'247,247,247,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248',
'248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248',
',248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248',
'248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248,248,,248,248,248,248',
',,,,248,248,,,,249,249,249,248,249,248,248,248,249,249,,,,249,,249,249',
'249,249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249',
',,249,249,249,249,249,249,249,249,,249,249,249,,249,249,249,249,249',
',,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,,249,,',
',,249,249,249,249,,249,249,249,249,,,,,249,249,,,,250,250,250,249,250',
'249,249,249,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250',
'250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250',
',250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250',
'250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250,250,,250,250,250,250',
',,,,250,250,,,,251,251,251,250,251,250,250,250,251,251,,,,251,,251,251',
'251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251',
',,251,251,251,251,251,251,251,251,,251,251,251,,251,251,251,251,251',
',,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,,251,,',
',,251,251,251,251,,251,251,251,251,,,,,251,251,,,,252,252,252,251,252',
'251,251,251,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252',
'252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252',
',252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252',
'252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252,252,,252,252,252,252',
',,,,252,252,,,,253,253,253,252,253,252,252,252,253,253,,,,253,,253,253',
'253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253',
',,253,253,253,253,253,253,253,253,,253,253,253,,253,253,253,253,253',
',,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,,253,,',
',,253,253,253,253,,253,253,253,253,,,,,253,253,,,,254,254,254,253,254',
'253,253,253,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254',
'254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254',
',254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254',
'254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254,254,,254,254,254,254',
',,,,254,254,,,,255,255,255,254,255,254,254,254,255,255,,,,255,,255,255',
'255,255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255',
',,255,255,255,255,255,255,255,255,,255,255,255,,255,255,255,255,255',
',,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,,255,,',
',,255,255,255,255,,255,255,255,255,,,,,255,255,,,,256,256,256,255,256',
'255,255,255,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256',
'256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256,256',
',256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256',
'256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256,256,,256,256,256,256',
',,,,256,256,,,,257,257,257,256,257,256,256,256,257,257,,,,257,,257,257',
'257,257,257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257',
',,257,257,257,257,257,257,257,257,,257,257,257,,257,257,257,257,257',
',,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,,257,,',
',,257,257,257,257,,257,257,257,257,,,,,257,257,,,,258,258,258,257,258',
'257,257,257,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258',
'258,258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258',
',258,258,258,,258,258,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258',
'258,,,258,,,,,,258,,,,,,,,,258,,,,,258,258,258,258,,258,258,258,258',
',,,,258,258,,,,210,210,210,258,210,258,258,258,210,210,,,,210,,210,210',
'210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210',
',,210,210,210,210,210,210,210,210,,210,210,210,,210,210,210,210,210',
',,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,,,,,210,,,,,,,,,210,,',
',,210,210,210,210,,210,210,210,210,,,,,210,210,,,,524,524,524,210,524',
'210,210,210,524,524,,,,524,,524,524,524,524,524,524,524,,,,,,524,524',
'524,524,524,524,524,,,524,,,,,,,524,,,524,524,524,524,524,524,524,524',
',524,524,524,,524,524,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524',
'524,,,524,,,,,,524,,,,,,,,,524,,,,,524,524,524,524,,524,524,524,524',
',,,,524,524,,,,515,515,515,524,515,524,524,524,515,515,,,,515,,515,515',
'515,515,515,515,515,,,,,,515,515,515,515,515,515,515,,,515,,,,,,,515',
',,515,515,515,515,515,515,515,515,515,515,515,515,,515,515,515,515,515',
',,,,,,,,,,,,,,,,,,,515,,,515,,,515,515,,,515,,515,,515,,515,,,515,,',
',,,515,,,,,515,515,515,515,,515,515,515,515,,,,,515,515,,,,521,521,521',
'515,521,515,515,515,521,521,,,,521,,521,521,521,521,521,521,521,,,,',
',521,521,521,521,521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521',
'521,521,,521,521,521,,521,521,,,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521',
'521,,,521,,,,,,,,,,,,,,,,,,,,521,521,521,521,,521,521,521,521,,,,,521',
'521,,,,980,980,980,521,980,521,521,521,980,980,,,,980,,980,980,980,980',
'980,980,980,,,,,,980,980,980,980,980,980,980,,,980,,,,,,,980,,,980,980',
'980,980,980,980,980,980,980,980,980,980,,980,980,980,980,980,,,,,,,',
',,,,,,,,,,,,980,,,980,,,980,980,,,980,,980,,980,,980,,,980,,,,,,980',
',,,,980,980,980,980,,980,980,980,980,,,,,980,980,,,,20,20,20,980,20',
'980,980,980,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20',
'20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20,20',
',,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20',
'20,20,,20,20,20,20,,,,,20,20,,,,29,29,29,20,29,20,20,20,29,29,,,,29',
',29,29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29',
'29,29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29',
',,29,,,29,29,,,29,,29,,29,,29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29',
'29,,,,,29,29,,,,30,30,30,29,30,29,29,29,30,30,,,,30,,30,30,30,30,30',
'30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30,30,30,30,30,30',
'30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,',
'30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30,30,,,,,30,30,',
',,31,31,31,30,31,30,30,30,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31',
'31,31,31,31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31',
',31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31',
',,31,,,,,,31,,,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,34,34,34,31,34',
'31,31,31,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34',
',,34,,,,,,,34,,,34,34,34,34,34,34,34,34,,34,34,34,,34,34,,,34,,,,,,',
',,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,,,,,,,,34,34,34,34,',
'34,34,34,34,,,,,34,34,,,,35,35,35,34,35,34,34,34,35,35,,,,35,,35,35',
'35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,35,,,,,,,35,,,35,35,35,35',
'35,35,35,35,,35,35,35,,35,35,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35',
',,35,,,999,,999,999,999,999,999,,,,,,,,,999,,35,35,35,35,,35,35,35,35',
',,,,35,35,,,,35,,999,35,,35,35,35,42,42,42,,42,999,999,,42,42,999,,',
'42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42',
'42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42',
',,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,',
',,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,,43,,43,43,43,43,43,43,43',
',,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43',
'43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43',
',,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,44,44,44,43,44',
'43,43,43,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44,44,44',
',,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,44,44,44,,',
',,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,,44,,,,,44,44,44',
'44,,44,44,44,44,,,,,44,44,,,,932,932,932,44,932,44,44,44,932,932,,,',
'932,,932,932,932,932,932,932,932,,,,,,932,932,932,932,932,932,932,,',
'932,,,,,,,932,,,932,932,932,932,932,932,932,932,,932,932,932,,932,932',
',,932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932,932,,,932,,,,,,,,,,,,,,,,,',
',,932,932,932,932,,932,932,932,932,,,,,932,932,,,,59,59,59,932,59,932',
'932,932,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59',
',,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,59,59,,59,59,59,59,59',
',,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,59,,,,,,59,,,,,59',
'59,59,59,,59,59,59,59,,,,,59,59,,,,60,60,60,59,60,59,59,59,60,60,,,',
'60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60',
'60,60,60,60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,',
'60,,,60,,,60,60,,,60,,,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60,60',
'60,,,,,60,60,,,,63,63,63,60,63,60,60,60,63,63,,,,63,,63,63,63,63,63',
'63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63',
'63,,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63',
',,,,,63,,,,,,,,,63,,,,,63,63,63,63,,63,63,63,63,,,,,63,63,,,,64,64,64',
'63,64,63,63,63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64',
'64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64',
'64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64',
'64,64,64,,64,64,64,64,,,,,64,64,,,,67,67,67,64,67,64,64,64,67,67,,,',
'67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67',
'67,67,67,67,67,67,67,,67,67,67,,67,67,67,67,67,,,,,,,,,,,,,,,,,,,,67',
',,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67,67,,67,67,67,67,,',
',,67,67,67,,,,,67,67,,67,67,67,68,68,68,,68,,,,68,68,,,,68,,68,68,68',
'68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68,68',
'68,68,68,,68,68,68,,68,68,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,',
'68,,68,,,,,,,,,,,,,,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,,,69,69',
'69,68,69,68,68,68,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69',
'69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,',
'69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69,69',
'69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,,,,70',
',70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70',
'70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,,,70,',
',70,70,,,70,,,928,,928,928,928,928,928,,,,,,,,,928,,70,70,70,70,,70',
'70,70,70,,,,,70,70,,,,,,928,70,,70,70,70,111,111,111,111,111,928,928',
',111,111,928,,,111,,111,111,111,111,111,111,111,,,,,,111,111,111,111',
'111,111,111,,,111,,,,,,111,111,111,111,111,111,111,111,111,111,111,111',
',111,111,111,,111,111,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111',
'111,,,111,,111,,,,111,,,,,,,,,111,,,,,111,111,111,111,,111,111,111,111',
',,,,111,111,,,,,,111,111,,111,111,111,116,116,116,,116,,,,116,116,,',
',116,,116,116,116,116,116,116,116,,,,,,116,116,116,116,116,116,116,',
',116,,,,,,,116,,,116,116,116,116,116,116,116,116,,116,116,116,,116,116',
'116,116,116,,,,,,,,,,,,,,,,,,,,116,,,116,,,116,116,,,116,,,,,,116,,',
',,,,,,116,,,,,116,116,116,116,,116,116,116,116,,,,,116,116,,,,117,117',
'117,116,117,116,116,116,117,117,,,,117,,117,117,117,117,117,117,117',
',,,,,117,117,117,117,117,117,117,,,117,,,,,,,117,,,117,117,117,117,117',
'117,117,117,,117,117,117,,117,117,117,117,117,,,,,,,,,,,,,,,,,,,,117',
',,117,,,117,117,,,117,,,,,,117,,,,,,,,,117,,,,,117,117,117,117,,117',
'117,117,117,,,,,117,117,,,,118,118,118,117,118,117,117,117,118,118,',
',,118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118,118,118',
',,118,,,,,,,118,,,118,118,118,118,118,118,118,118,,118,118,118,,118',
'118,118,118,118,,,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,,,,,118',
',,,,,,,,118,,,,,118,118,118,118,,118,118,118,118,,,,,118,118,,,,119',
'119,119,118,119,118,118,118,119,119,,,,119,,119,119,119,119,119,119',
'119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119',
'119,119,119,119,,119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,,,,,',
',119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119,119',
',119,119,119,119,,,,,119,119,,,,,,,119,,119,119,119,120,120,120,120',
'120,,,,120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120,120',
'120,120,120,120,,,120,,,,,,120,120,,120,120,120,120,120,120,120,120',
'120,,120,120,120,,120,120,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,',
',120,120,,,120,,120,,,,120,,,,,,,,,120,,,,,120,120,120,120,,120,120',
'120,120,,,,,120,120,,,,884,884,884,120,884,120,120,120,884,884,,,,884',
',884,884,884,884,884,884,884,,,,,,884,884,884,884,884,884,884,,,884',
',,,,,,884,,,884,884,884,884,884,884,884,884,,884,884,884,,884,884,,',
'884,,,,,,,,,,,,,,,,,,,,884,,,884,,,884,884,,,884,,,,,,,,,,,,,,,,,,,',
'884,884,884,884,,884,884,884,884,,,,,884,884,,,,207,207,207,884,207',
'884,884,884,207,207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207',
'207,207,207,207,207,,,207,,,,,,,207,,,207,207,207,207,207,207,207,207',
',207,207,207,,207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207,,,207,,,207',
'207,,,207,,207,,,,207,,,,,,,,,207,,,,,207,207,207,207,,207,207,207,207',
',,,,207,207,,,,208,208,208,207,208,207,207,207,208,208,,,,208,,208,208',
'208,208,208,208,208,,,,,,208,208,208,208,208,208,208,,,208,,,,,,,208',
',,208,208,208,208,208,208,208,208,,208,208,208,,208,208,208,208,208',
',,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,208,,,,208,,,,,,,,,208',
',,,,208,208,208,208,,208,208,208,208,,,,,208,208,,,,209,209,209,208',
'209,208,208,208,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209',
'209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209,209,209,209',
'209,,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,',
',209,209,,,209,,,,,,209,,,,,,,,,209,,,,,209,209,209,209,,209,209,209',
'209,,,,,209,209,,,,513,513,513,209,513,209,209,209,513,513,,,,513,,513',
'513,513,513,513,513,513,,,,,,513,513,513,513,513,513,513,,,513,,,,,',
',513,,,513,513,513,513,513,513,513,513,,513,513,513,,513,513,,,513,',
',,,,,,,,,,,,,,,,,,513,,,513,,,513,513,,,513,,,,,,,,,,,,,,,,,,,,513,513',
'513,513,,513,513,513,513,,,,,513,513,,,,211,211,211,513,211,513,513',
'513,211,211,,,,211,,211,211,211,211,211,211,211,,,,,,211,211,211,211',
'211,211,211,,,211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211',
'211,,211,211,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211',
',,,,,211,,,,,,,,,211,,,,,211,211,211,211,,211,211,211,211,,,,,211,211',
',,,212,212,212,211,212,211,211,211,212,212,,,,212,,212,212,212,212,212',
'212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212',
'212,212,212,212,212,212,212,212,212,,212,212,212,212,212,,,,,,,,,,,',
',,,,,,,,212,,,212,,,212,212,,,212,,212,,212,,212,,,212,,,,,,212,,,,',
'212,212,212,212,,212,212,212,212,,,,,212,212,,,,217,217,217,212,217',
'212,212,212,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217',
'217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217',
',217,217,217,,217,217,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217',
'217,,,217,,,,,,217,,,,,,,,,217,,,,,217,217,217,217,,217,217,217,217',
',,,,217,217,,,,218,218,218,217,218,217,217,217,218,218,,,,218,,218,218',
'218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218',
',,218,218,218,218,218,218,218,218,,218,218,218,,218,218,218,218,218',
',,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218,,',
',,218,218,218,218,,218,218,218,218,,,,,218,218,,,,219,219,219,218,219',
'218,218,218,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219',
'219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219',
',219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219',
'219,,,219,,,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219',
',,,,219,219,219,,,874,874,874,219,874,219,219,219,874,874,,,,874,,874',
'874,874,874,874,874,874,,,,,,874,874,874,874,874,874,874,,,874,,,,,',
',874,,,874,874,874,874,874,874,874,874,,874,874,874,,874,874,,,874,',
',,,,,,,,,,,,,,,,,,874,,,874,,,874,874,,,874,,,,,,,,,,,,,,,,,,,,874,874',
'874,874,,874,874,874,874,,,,,874,874,,,,862,862,862,874,862,874,874',
'874,862,862,,,,862,,862,862,862,862,862,862,862,,,,,,862,862,862,862',
'862,862,862,,,862,,,,,,,862,,,862,862,862,862,862,862,862,862,,862,862',
'862,,862,862,862,862,862,,,,,,,,,,,,,,,,,,,,862,,,862,,,862,862,,,862',
',,,,,862,,,,,,,,,862,,,,,862,862,862,862,,862,862,862,862,,,,,862,862',
',,,861,861,861,862,861,862,862,862,861,861,,,,861,,861,861,861,861,861',
'861,861,,,,,,861,861,861,861,861,861,861,,,861,,,,,,,861,,,861,861,861',
'861,861,861,861,861,861,861,861,861,,861,861,861,861,861,,,,,,,,,,,',
',,,,,,,,861,,,861,,,861,861,,,861,,,,861,,861,,,861,,,,,,861,,,,,861',
'861,861,861,,861,861,861,861,,,,,861,861,,,,230,230,230,861,230,861',
'861,861,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230',
'230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230,,230',
'230,230,,230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230',
',,230,,,,,,230,,,,,,,,,230,,,,,230,230,230,230,,230,230,230,230,,,,',
'230,230,,,,233,233,233,230,233,230,230,230,233,233,,,,233,,233,233,233',
'233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,,,233,,,233',
'233,233,233,233,233,233,233,,233,233,233,,233,233,233,233,233,,,,,,',
',,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,,233,,,,,233',
'233,233,233,,233,233,233,233,,,,,233,233,,,,265,265,265,233,265,233',
'233,233,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265',
'265,265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,265',
'265,265,265,,265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265',
'265,,,265,,265,,265,,265,,,265,,,,,,265,,,,,265,265,265,265,,265,265',
'265,265,,,,,265,265,,,,266,266,266,265,266,265,265,265,266,266,,,,266',
',266,266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266',
',,,,,,266,,,266,266,266,266,266,266,266,266,266,266,266,266,,266,266',
'266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,266,,266,',
'266,,,266,,,,,,266,,,,,266,266,266,266,,266,266,266,266,,,,,266,266',
',,,274,274,274,266,274,266,266,266,274,274,,,,274,,274,274,274,274,274',
'274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274',
'274,274,274,274,274,274,274,274,274,,274,274,274,274,274,,,,,,,,,,,',
',,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,274,,,,,,274,,,,',
'274,274,274,274,,274,274,274,274,,,,,274,274,274,,,843,843,843,274,843',
'274,274,274,843,843,,,,843,,843,843,843,843,843,843,843,,,,,,843,843',
'843,843,843,843,843,,,843,,,,,,,843,,,843,843,843,843,843,843,843,843',
',843,843,843,,843,843,843,843,843,,,,,,,,,,,,,,,,,,,,843,,,843,,,843',
'843,,,843,,843,,,,843,,,,,,,,,843,,,,,843,843,843,843,,843,843,843,843',
',,,,843,843,,,,281,281,281,843,281,843,843,843,281,281,,,,281,,281,281',
'281,281,281,281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,,,281',
',,281,281,281,281,281,281,281,281,,281,281,281,,281,281,281,281,281',
',,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,,,,,281,,,,,,,,,281,,',
',,281,281,281,281,,281,281,281,281,,,,,281,281,,,,283,283,283,281,283',
'281,281,281,283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283',
'283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283',
',283,283,283,,283,283,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283',
'283,,,283,,,,,,283,,,,,,,,,283,,,,,283,283,283,283,,283,283,283,283',
',,,,283,283,,,,286,286,286,283,286,283,283,283,286,286,,,,286,,286,286',
'286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286,,,,,,,286',
',,286,286,286,286,286,286,286,286,,286,286,286,,286,286,286,286,286',
',,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286,,,,,,,,,286,,',
',,286,286,286,286,,286,286,286,286,,,,,286,286,,,,287,287,287,286,287',
'286,286,286,287,287,,,,287,,287,287,287,287,287,287,287,,,,,,287,287',
'287,287,287,287,287,,,287,,,,,,,287,,,287,287,287,287,287,287,287,287',
',287,287,287,,287,287,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287',
'287,,,287,,,,,,287,,,,,,,,,287,,,,,287,287,287,287,,287,287,287,287',
',,,,287,287,,,,,,,287,,287,287,287,292,292,292,292,292,,,,292,292,,',
',292,,292,292,292,292,292,292,292,,,,,,292,292,292,292,292,292,292,',
',292,,,,,,292,292,,292,292,292,292,292,292,292,292,292,,292,292,292',
',292,292,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,,292,,292',
',,,292,,,,,,,,,292,,,,,292,292,292,292,,292,292,292,292,,,,,292,292',
',,,838,838,838,292,838,292,292,292,838,838,,,,838,,838,838,838,838,838',
'838,838,,,,,,838,838,838,838,838,838,838,,,838,,,,,,,838,,,838,838,838',
'838,838,838,838,838,,838,838,838,,838,838,838,838,838,,,,,,,,,,,,,,',
',,,,,838,,,838,,,838,838,,,838,,,,,,838,,,,,,,,,838,,,,,838,838,838',
'838,,838,838,838,838,,,,,838,838,,,,300,300,300,838,300,838,838,838',
'300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300',
'300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300,300,300',
',300,300,,,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,705,,705',
'705,705,705,705,,,,,,,,,705,,300,300,300,300,,300,300,300,300,,,,,300',
'300,,,,300,,705,300,,300,300,300,787,787,787,,787,705,705,,787,787,705',
',,787,,787,787,787,787,787,787,787,,,,,,787,787,787,787,787,787,787',
',,787,,,,,,,787,,,787,787,787,787,787,787,787,787,,787,787,787,,787',
'787,787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,,,,,787',
',,,,,,,,787,,,,,787,787,787,787,,787,787,787,787,,,,,787,787,,,,785',
'785,785,787,785,787,787,787,785,785,,,,785,,785,785,785,785,785,785',
'785,,,,,,785,785,785,785,785,785,785,,,785,,,,,,,785,,,785,785,785,785',
'785,785,785,785,,785,785,785,,785,785,785,785,785,,,,,,,,,,,,,,,,,,',
',785,,,785,,,785,785,,,785,,,,,,785,,,,,,,,,785,,,,,785,785,785,785',
',785,785,785,785,,,,,785,785,,,,784,784,784,785,784,785,785,785,784',
'784,,,,784,,784,784,784,784,784,784,784,,,,,,784,784,784,784,784,784',
'784,,,784,,,,,,,784,,,784,784,784,784,784,784,784,784,,784,784,784,',
'784,784,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784,,,784,,,',
',,784,,,,,,,,,784,,,,,784,784,784,784,,784,784,784,784,,,,,784,784,',
',,317,317,317,784,317,784,784,784,317,317,,,,317,,317,317,317,317,317',
'317,317,,,,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317',
'317,317,317,317,317,,317,317,317,,317,317,,,317,,,,,,,,,,,,,,,,,,,,317',
',,317,,,317,317,,,317,,,,,,,,,,,,,,,,,,,,317,317,317,317,,317,317,317',
'317,,,,,317,317,,,,783,783,783,317,783,317,317,317,783,783,,,,783,,783',
'783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,,,783,,,,,',
',783,,,783,783,783,783,783,783,783,783,,783,783,783,,783,783,783,783',
'783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,,783,,,,,,783,,,,,,,,,783',
',,,,783,783,783,783,,783,783,783,783,,,,,783,783,,,,782,782,782,783',
'782,783,783,783,782,782,,,,782,,782,782,782,782,782,782,782,,,,,,782',
'782,782,782,782,782,782,,,782,,,,,,,782,,,782,782,782,782,782,782,782',
'782,,782,782,782,,782,782,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,',
',782,782,,,782,,,,,,782,,,,,,,,,782,,,,,782,782,782,782,,782,782,782',
'782,,,,,782,782,,,,769,769,769,782,769,782,782,782,769,769,,,,769,,769',
'769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,',
',769,,,769,769,769,769,769,769,769,769,,769,769,769,,769,769,769,769',
'769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,,,,,769,,,,,,,,,769',
',,,,769,769,769,769,,769,769,769,769,,,,,769,769,,,,325,325,325,769',
'325,769,769,769,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325',
'325,325,325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325',
'325,,325,325,325,,325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,325',
',325,325,,,325,,,,,,325,,,,,,,,,325,,,,,325,325,325,325,,325,325,325',
'325,,,,,325,325,,,,,,,325,,325,325,325,327,327,327,327,327,,,,327,327',
',,,327,,327,327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327',
',,327,,,,,,327,327,,327,327,327,327,327,327,327,327,327,,327,327,327',
',327,327,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,,327,,327',
',,,327,,,,,,,,,327,,,,,327,327,327,327,,327,327,327,327,,,,,327,327',
',,,761,761,761,327,761,327,327,327,761,761,,,,761,,761,761,761,761,761',
'761,761,,,,,,761,761,761,761,761,761,761,,,761,,,,,,,761,,,761,761,761',
'761,761,761,761,761,,761,761,761,,761,761,761,761,761,,,,,,,,,,,,,,',
',,,,,761,,,761,,,761,761,,,761,,,,,,761,,,,,,,,,761,,,,,761,761,761',
'761,,761,761,761,761,,,,,761,761,,,,739,739,739,761,739,761,761,761',
'739,739,,,,739,,739,739,739,739,739,739,739,,,,,,739,739,739,739,739',
'739,739,,,739,,,,,,,739,,,739,739,739,739,739,739,739,739,,739,739,739',
',739,739,739,739,739,,,,,,,,,,,,,,,,,,,,739,,,739,,,739,739,,,739,,',
',,,739,,,,,,,,,739,,,,,739,739,739,739,,739,739,739,739,,,,,739,739',
',,,342,342,342,739,342,739,739,739,342,342,,,,342,,342,342,342,342,342',
'342,342,,,,,,342,342,342,342,342,342,342,,,342,,,,,,,342,,,342,342,342',
'342,342,342,342,342,,342,342,342,,342,342,342,342,342,,,,,,,,,,,,,,',
',,,,,342,,,342,,,342,342,,,342,,,,,,342,,,,,,,,,342,,,,,342,342,342',
'342,,342,342,342,342,,,,,342,342,,,,343,343,343,342,343,342,342,342',
'343,343,,,,343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343',
'343,343,,,343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343',
',343,343,343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,',
',,,343,,,,,,,,,343,,,,,343,343,343,343,,343,343,343,343,,,,,343,343',
',,,733,733,733,343,733,343,343,343,733,733,,,,733,,733,733,733,733,733',
'733,733,,,,,,733,733,733,733,733,733,733,,,733,,,,,,,733,,,733,733,733',
'733,733,733,733,733,,733,733,733,,733,733,733,733,733,,,,,,,,,,,,,,',
',,,,,733,,,733,,,733,733,,,733,,,,,,733,,,,,,,,,733,,,,,733,733,733',
'733,,733,733,733,733,,,,,733,733,,,,362,362,362,733,362,733,733,733',
'362,362,,,,362,,362,362,362,362,362,362,362,,,,,,362,362,362,362,362',
'362,362,,,362,,,,,,,362,,,362,362,362,362,362,362,362,362,,362,362,362',
',362,362,362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,362,,,362,,',
',,,362,,,,,,,,,362,,,,,362,362,362,362,,362,362,362,362,,,,,362,362',
',,,378,378,378,362,378,362,362,362,378,378,,,,378,,378,378,378,378,378',
'378,378,,,,,,378,378,378,378,378,378,378,,,378,,,,,,,378,,,378,378,378',
'378,378,378,378,378,,378,378,378,,378,378,378,378,378,,,,,,,,,,,,,,',
',,,,,378,,,378,,,378,378,,,378,,,,,,378,,,,,,,,,378,,,,,378,378,378',
'378,,378,378,378,378,,,,,378,378,,,,707,707,707,378,707,378,378,378',
'707,707,,,,707,,707,707,707,707,707,707,707,,,,,,707,707,707,707,707',
'707,707,,,707,,,,,,,707,,,707,707,707,707,707,707,707,707,,707,707,707',
',707,707,707,707,707,,,,,,,,,,,,,,,,,,,,707,,,707,,,707,707,,,707,,',
',,,707,,,,,,,,,707,,,,,707,707,707,707,,707,707,707,707,,,,,707,707',
',,,406,406,406,707,406,707,707,707,406,406,,,,406,,406,406,406,406,406',
'406,406,,,,,,406,406,406,406,406,406,406,,,406,,,,,,,406,,,406,406,406',
'406,406,406,406,406,,406,406,406,,406,406,406,406,406,,,,,,,,,,,,,,',
',,,,,406,,,406,,,406,406,,,406,,,,,,406,,,,,,,,,406,,,,,406,406,406',
'406,,406,406,406,406,,,,,406,406,,,,690,690,690,406,690,406,406,406',
'690,690,,,,690,,690,690,690,690,690,690,690,,,,,,690,690,690,690,690',
'690,690,,,690,,,,,,,690,,,690,690,690,690,690,690,690,690,,690,690,690',
',690,690,690,690,690,,,,,,,,,,,,,,,,,,,,690,,,690,,,690,690,,,690,,690',
',,,690,,,,,,,,,690,,,,,690,690,690,690,,690,690,690,690,,,,,690,690',
',,,685,685,685,690,685,690,690,690,685,685,,,,685,,685,685,685,685,685',
'685,685,,,,,,685,685,685,685,685,685,685,,,685,,,,,,,685,,,685,685,685',
'685,685,685,685,685,,685,685,685,,685,685,,,685,,,,,,,,,,,,,,,,,,,,685',
',,685,,,685,685,,,685,,,,,,,,,,,,,,,,,,,,685,685,685,685,,685,685,685',
'685,,,,,685,685,,,,674,674,674,685,674,685,685,685,674,674,,,,674,,674',
'674,674,674,674,674,674,,,,,,674,674,674,674,674,674,674,,,674,,,,,',
',674,,,674,674,674,674,674,674,674,674,,674,674,674,,674,674,,,674,',
',,,,,,,,,,,,,,,,,,674,,,674,,,674,674,,,674,,,,,,,,,,,,,,,,,,,,674,674',
'674,674,,674,674,674,674,,,,,674,674,,,,670,670,670,674,670,674,674',
'674,670,670,,,,670,,670,670,670,670,670,670,670,,,,,,670,670,670,670',
'670,670,670,,,670,,,,,,,670,,,670,670,670,670,670,670,670,670,,670,670',
'670,,670,670,670,670,670,,,,,,,,,,,,,,,,,,,,670,,,670,,,670,670,,,670',
',,,,,670,,,,,,,,,670,,,,,670,670,670,670,,670,670,670,670,,,,,670,670',
',,,667,667,667,670,667,670,670,670,667,667,,,,667,,667,667,667,667,667',
'667,667,,,,,,667,667,667,667,667,667,667,,,667,,,,,,,667,,,667,667,667',
'667,667,667,667,667,,667,667,667,,667,667,667,667,667,,,,,,,,,,,,,,',
',,,,,667,,,667,,,667,667,,,667,,,,,,667,,,,,,,,,667,,,,,667,667,667',
'667,,667,667,667,667,,,,,667,667,,,,,,,667,,667,667,667,5,5,5,5,5,,',
',5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5',
'5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5',
',,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,449,449,449,5,449,5,5,5,449',
'449,,,,449,,449,449,449,449,449,449,449,,,,,,449,449,449,449,449,449',
'449,,,449,,,,,,,449,,,449,449,449,449,449,449,449,449,449,449,449,449',
',449,449,449,449,449,,,,,,,,,,,,,,,,,,,,449,,,449,,,449,449,,,449,,449',
',449,,449,,,449,,,,,,449,,,,,449,449,449,449,,449,449,449,449,,,,,449',
'449,,,,451,451,451,449,451,449,449,449,451,451,,,,451,,451,451,451,451',
'451,451,451,,,,,,451,451,451,451,451,451,451,,,451,,,,,,,451,,,451,451',
'451,451,451,451,451,451,,451,451,451,,451,451,451,451,451,,,,,,,,,,',
',,,,,,,,,451,,,451,,,451,451,,,451,,,,,,451,,,,,,,,,451,,,,,451,451',
'451,451,,451,451,451,451,,,,,451,451,,,,452,452,452,451,452,451,451',
'451,452,452,,,,452,,452,452,452,452,452,452,452,,,,,,452,452,452,452',
'452,452,452,,,452,,,,,,,452,,,452,452,452,452,452,452,452,452,,452,452',
'452,,452,452,452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452,,,452,452,,,452',
',,,,,452,,,,,,,,,452,,,,,452,452,452,452,,452,452,452,452,,,,,452,452',
',,,453,453,453,452,453,452,452,452,453,453,,,,453,,453,453,453,453,453',
'453,453,,,,,,453,453,453,453,453,453,453,,,453,,,,,,,453,,,453,453,453',
'453,453,453,453,453,,453,453,453,,453,453,453,453,453,,,,,,,,,,,,,,',
',,,,,453,,,453,,,453,453,,,453,,,,,,453,,,,,,,,,453,,,,,453,453,453',
'453,,453,453,453,453,,,,,453,453,,,,643,643,643,453,643,453,453,453',
'643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643,643,643,643',
'643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643,643,,643,643,643',
',643,643,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643,,',
',,,643,,,,,,,,,643,,,,,643,643,643,643,,643,643,643,643,,,,,643,643',
',,,642,642,642,643,642,643,643,643,642,642,,,,642,,642,642,642,642,642',
'642,642,,,,,,642,642,642,642,642,642,642,,,642,,,,,,,642,,,642,642,642',
'642,642,642,642,642,,642,642,642,,642,642,642,642,642,,,,,,,,,,,,,,',
',,,,,642,,,642,,,642,642,,,642,,,,,,642,,,,,,,,,642,,,,,642,642,642',
'642,,642,642,642,642,,,,,642,642,,,,638,638,638,642,638,642,642,642',
'638,638,,,,638,,638,638,638,638,638,638,638,,,,,,638,638,638,638,638',
'638,638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638,,638,638,638',
',638,638,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,',
',,,638,,,,,,,,,638,,,,,638,638,638,638,,638,638,638,638,,,,,638,638',
',,,637,637,637,638,637,638,638,638,637,637,,,,637,,637,637,637,637,637',
'637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637,637',
'637,637,637,637,637,,637,637,637,,637,637,637,637,637,,,,,,,,,,,,,,',
',,,,,637,,,637,,,637,637,,,637,,,,,,637,,,,,,,,,637,,,,,637,637,637',
'637,,637,637,637,637,,,,,637,637,,,,636,636,636,637,636,637,637,637',
'636,636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636,636',
'636,636,,,636,,,,,,,636,,,636,636,636,636,636,636,636,636,636,636,636',
'636,,636,636,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636',
',,,636,,636,,,636,,,,,,636,,,,,636,636,636,636,,636,636,636,636,,,,',
'636,636,,,,635,635,635,636,635,636,636,636,635,635,,,,635,,635,635,635',
'635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635',
'635,635,635,635,635,635,635,635,635,635,635,,635,635,635,635,635,,,',
',,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,635,,635,,635,,,635,,,,,',
'635,,,,,635,635,635,635,,635,635,635,635,,,,,635,635,,,,632,632,632',
'635,632,635,635,635,632,632,,,,632,,632,632,632,632,632,632,632,,,,',
',632,632,632,632,632,632,632,,,632,,,,,,,632,,,632,632,632,632,632,632',
'632,632,,632,632,632,,632,632,632,632,632,,,,,,,,,,,,,,,,,,,,632,,,632',
',,632,632,,,632,,,,,,632,,,,,,,,,632,,,,,632,632,632,632,,632,632,632',
'632,,,,,632,632,,,,,,,632,,632,632,632,631,631,631,631,631,,,,631,631',
',,,631,,631,631,631,631,631,631,631,,,,,,631,631,631,631,631,631,631',
',,631,,,,,,631,631,,631,631,631,631,631,631,631,631,631,,631,631,631',
',631,631,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631,,,631,,631',
',,,631,,,,,,,,,631,,,,,631,631,631,631,,631,631,631,631,,,,,631,631',
',,,628,628,628,631,628,631,631,631,628,628,,,,628,,628,628,628,628,628',
'628,628,,,,,,628,628,628,628,628,628,628,,,628,,,,,,,628,,,628,628,628',
'628,628,628,628,628,628,628,628,628,,628,628,628,628,628,,,,,,,,,,,',
',,,,,,,,628,,,628,,,628,628,,,628,,628,,628,,628,,,628,,,,,,628,,,,',
'628,628,628,628,,628,628,628,628,,,,,628,628,,,,627,627,627,628,627',
'628,628,628,627,627,,,,627,,627,627,627,627,627,627,627,,,,,,627,627',
'627,627,627,627,627,,,627,,,,,,,627,,,627,627,627,627,627,627,627,627',
',627,627,627,,627,627,627,627,627,,,,,,,,,,,,,,,,,,,,627,,,627,,,627',
'627,,,627,,,,,,627,,,,,,,,,627,,,,,627,627,627,627,,627,627,627,627',
',,,,627,627,,,,626,626,626,627,626,627,627,627,626,626,,,,626,,626,626',
'626,626,626,626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,,,626',
',,626,626,626,626,626,626,626,626,,626,626,626,,626,626,626,626,626',
',,,,,,,,,,,,,,,,,,,626,,,626,,,626,626,,,626,,626,,,,626,,,,,,,,,626',
',,,,626,626,626,626,,626,626,626,626,,,,,626,626,,,,594,594,594,626',
'594,626,626,626,594,594,,,,594,,594,594,594,594,594,594,594,,,,,,594',
'594,594,594,594,594,594,,,594,,,,,,,594,,,594,594,594,594,594,594,594',
'594,594,594,594,594,,594,594,594,594,594,,,,,,,,,,,,,,,,,,,,594,,,594',
',,594,594,,,594,,594,,594,,594,,,594,,,,,,594,,,,,594,594,594,594,,594',
'594,594,594,,,,,594,594,,,,584,584,584,594,584,594,594,594,584,584,',
',,584,,584,584,584,584,584,584,584,,,,,,584,584,584,584,584,584,584',
',,584,,,,,,,584,,,584,584,584,584,584,584,584,584,584,584,584,584,,584',
'584,584,584,584,,,,,,,,,,,,,,,,,,,,584,,,584,,,584,584,,,584,,584,,584',
',584,,,584,,,,,,584,,,,,584,584,584,584,,584,584,584,584,,,,,584,584',
',,,583,583,583,584,583,584,584,584,583,583,,,,583,,583,583,583,583,583',
'583,583,,,,,,583,583,583,583,583,583,583,,,583,,,,,,,583,,,583,583,583',
'583,583,583,583,583,,583,583,583,,583,583,583,583,583,,,,,,,,,,,,,,',
',,,,,583,,,583,,,583,583,,,583,,583,,,,583,,,,,,,,,583,,,,,583,583,583',
'583,,583,583,583,583,,,,,583,583,,,,563,563,563,583,563,583,583,583',
'563,563,,,,563,,563,563,563,563,563,563,563,,,,,,563,563,563,563,563',
'563,563,,,563,,,,,,,563,,,563,563,563,563,563,563,563,563,,563,563,563',
',563,563,563,563,563,,,,,,,,,,,,,,,,,,,,563,,,563,,,563,563,,,563,,',
',,,563,,,,,,,,,563,,,,,563,563,563,563,,563,563,563,563,,,,,563,563',
',,,538,538,538,563,538,563,563,563,538,538,,,,538,,538,538,538,538,538',
'538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,,,538,,,538,538,538',
'538,538,538,538,538,538,538,538,538,,538,538,538,538,538,,,,,,,,,,,',
',,,,,,,,538,,,538,,,538,538,,,538,,,,,,538,,,538,,,,,,538,,,,,538,538',
'538,538,,538,538,538,538,,,,,538,538,,,,495,495,495,538,495,538,538',
'538,495,495,,,,495,,495,495,495,495,495,495,495,,,,,,495,495,495,495',
'495,495,495,,,495,,,,,,,495,,,495,495,495,495,495,495,495,495,495,495',
'495,495,,495,495,495,495,495,,,,,,,,,,,,,,,,,,,,495,,,495,,,495,495',
',,495,,495,,495,,495,,,495,,,,,,495,,,,,495,495,495,495,,495,495,495',
'495,,,,,495,495,,,,497,497,497,495,497,495,495,495,497,497,,,,497,,497',
'497,497,497,497,497,497,,,,,,497,497,497,497,497,497,497,,,497,,,,,',
',497,,,497,497,497,497,497,497,497,497,497,497,497,497,,497,497,497',
'497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,,,497,,497,,,497',
',,,,,497,,,,,497,497,497,497,,497,497,497,497,,,,,497,497,,,,499,499',
'499,497,499,497,497,497,499,499,,,,499,,499,499,499,499,499,499,499',
',,,,,499,499,499,499,499,499,499,,,499,,,,,,,499,,,499,499,499,499,499',
'499,499,499,,499,499,499,,499,499,499,499,499,,,,,,,,,,,,,,,,,,,,499',
',,499,,,499,499,,,499,,,,,,499,,,,,,,,,499,,,,,499,499,499,499,,499',
'499,499,499,,,,,499,499,,,,,,,499,,499,499,499,505,505,505,505,505,',
',,505,505,,,,505,,505,505,505,505,505,505,505,,,,,,505,505,505,505,505',
'505,505,,,505,,,,,,505,505,505,505,505,505,505,505,505,505,505,505,',
'505,505,505,,505,505,505,505,505,,,,,,,,,,,,,,,,,,,,505,,,505,,,505',
'505,,,505,,505,,,,505,,,,,,,,,505,,,,,505,505,505,505,,505,505,505,505',
',,,,505,505,,,,,,505,505,,505,505,505,535,535,535,,535,,,,535,535,,',
',535,,535,535,535,535,535,535,535,,,,,,535,535,535,535,535,535,535,',
',535,,,,,,,535,,,535,535,535,535,535,535,535,535,535,535,535,535,,535',
'535,535,535,535,,,,,,,,,,,,,,,,,,,,535,,,535,,,535,535,,,535,,535,,',
',535,,,535,,,,,,535,,,,,535,535,535,535,,535,535,535,535,,,,,535,535',
',,,529,529,529,535,529,535,535,535,529,529,,,,529,,529,529,529,529,529',
'529,529,,,,,,529,529,529,529,529,529,529,,,529,,,,,,,529,,,529,529,529',
'529,529,529,529,529,,529,529,529,,529,529,529,529,529,,,,,,,,,,,,,,',
',,,,,529,,,529,,,529,529,,,529,,,,,,529,,,,,,,,,529,,,,,529,529,529',
'529,,529,529,529,529,,,,,529,529,,,,525,525,525,529,525,529,529,529',
'525,525,,,,525,,525,525,525,525,525,525,525,,,,,,525,525,525,525,525',
'525,525,,,525,,,,,,,525,,,525,525,525,525,525,525,525,525,,525,525,525',
',525,525,525,525,525,,,,,,,,,,,,,,,,,,,,525,,,525,,,525,525,,,525,,',
',,,525,,,,,,,,,525,,,,,525,525,525,525,,525,525,525,525,,,,,525,525',
',,,,,,525,,525,525,525,623,623,623,623,623,623,623,623,623,623,623,623',
'623,623,623,623,623,623,623,623,623,623,623,623,,,,623,623,623,623,623',
'623,623,623,623,623,,,,,,623,623,623,623,623,623,623,623,623,,,623,',
',,,,,,623,623,,623,623,623,623,623,623,623,,,623,623,,,,623,623,623',
'623,,,,,,,,,,,,,,623,623,,623,623,623,623,623,623,623,623,623,623,623',
'623,,,623,623,,,,,,,,,,,,,,623,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9',
'9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9',
'9,9,9,9,,,9,9,,,,,,,,,,,,,,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8',
'8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8',
'8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8',
'8,8,8,8,,,8,8,,,,,,,,,,,,,,8,397,397,397,397,397,397,397,397,397,397',
'397,397,397,397,397,397,397,397,397,397,397,397,397,397,,,,397,397,397',
'397,397,397,397,397,397,397,,,,,,397,397,397,397,397,397,397,397,397',
',,397,,,,,,,,397,397,,397,397,397,397,397,397,397,,,397,397,,,,397,397',
'397,397,,,,,,,,,,,,,,397,397,,397,397,397,397,397,397,397,397,397,397',
'397,397,,,397,397,,,,,,,,,,,,,,397,745,745,745,745,745,745,745,745,745',
'745,745,745,745,745,745,745,745,745,745,745,745,745,745,745,,,,745,745',
'745,745,745,745,745,745,745,745,,,,,,745,745,745,745,745,745,745,745',
'745,,,745,,,,,,,,745,745,,745,745,745,745,745,745,745,,,745,745,,,,745',
'745,745,745,,,,,,,,,,,,,,745,745,,745,745,745,745,745,745,745,745,745',
'745,745,745,,,745,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71',
'71,71,71,71,71,71,71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,,,71',
'71,,,,71,71,71,71,,,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71',
'71,71,213,213,71,,213,,,,,,,,213,213,,213,213,213,213,213,213,213,,',
'213,213,,,,213,213,213,213,,,,,,213,,,,,,,,213,213,,213,213,213,213',
'213,213,213,213,213,213,213,213,214,214,213,,214,,,,,,,,214,214,,214',
'214,214,214,214,214,214,,,214,214,,,,214,214,214,214,,,,,,214,,,,,,',
',214,214,,214,214,214,214,214,214,214,214,214,214,214,214,261,261,214',
',261,,,,,,,,261,261,,261,261,261,261,261,261,261,,,261,261,,,,261,261',
'261,261,,,,,,,,,,,,,,261,261,,261,261,261,261,261,261,261,261,261,261',
'261,261,447,447,261,,447,,,,,,,,447,447,,447,447,447,447,447,447,447',
',,447,447,,,,447,447,447,447,,,,,,447,,,,,,,,447,447,,447,447,447,447',
'447,447,447,447,447,447,447,447,448,448,447,,448,,,,,,,,448,448,,448',
'448,448,448,448,448,448,,,448,448,,,,448,448,448,448,,,,,,448,,,,,,',
',448,448,,448,448,448,448,448,448,448,448,448,448,448,448,516,516,448',
',516,,,,,,,,516,516,,516,516,516,516,516,516,516,,,516,516,,,,516,516',
'516,516,,,,,,516,,,,,,,,516,516,,516,516,516,516,516,516,516,516,516',
'516,516,516,517,517,516,,517,,,,,,,,517,517,,517,517,517,517,517,517',
'517,,,517,517,,,,517,517,517,517,,,,,,517,,,,,,,,517,517,,517,517,517',
'517,517,517,517,517,517,517,517,517,526,526,517,,526,,,,,,,,526,526',
',526,526,526,526,526,526,526,,,526,526,,,,526,526,526,526,,,,,,526,',
',,,,,,526,526,,526,526,526,526,526,526,526,526,526,526,526,526,527,527',
'526,,527,,,,,,,,527,527,,527,527,527,527,527,527,527,,,527,527,,,,527',
'527,527,527,,,,,,527,,,,,,,,527,527,,527,527,527,527,527,527,527,527',
'527,527,527,527,585,585,527,,585,,,,,,,,585,585,,585,585,585,585,585',
'585,585,,,585,585,,,,585,585,585,585,,,,,,585,,,,,,,,585,585,,585,585',
'585,585,585,585,585,585,585,585,585,585,586,586,585,,586,,,,,,,,586',
'586,,586,586,586,586,586,586,586,,,586,586,,,,586,586,586,586,,,,,,586',
',,,,,,,586,586,,586,586,586,586,586,586,586,586,586,586,586,586,592',
'592,586,,592,,,,,,,,592,592,,592,592,592,592,592,592,592,,,592,592,',
',,592,592,592,592,,,,,,592,,,,,,,,592,592,,592,592,592,592,592,592,592',
'592,592,592,592,592,593,593,592,,593,,,,,,,,593,593,,593,593,593,593',
'593,593,593,,,593,593,,,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593',
'593,593,593,593,593,593,593,593,593,593,593,629,629,593,,629,,,,,,,',
'629,629,,629,629,629,629,629,629,629,,,629,629,,,,629,629,629,629,,',
',,,629,,,,,,,,629,629,,629,629,629,629,629,629,629,629,629,629,629,629',
'630,630,629,,630,,,,,,,,630,630,,630,630,630,630,630,630,630,,,630,630',
',,,630,630,630,630,,,,,,630,,,,,,,,630,630,,630,630,630,630,630,630',
'630,630,630,630,630,630,977,977,630,,977,,,,,,,,977,977,,977,977,977',
'977,977,977,977,,,977,977,,,,977,977,977,977,,,,,,977,,,,,,,,977,977',
',977,977,977,977,977,977,977,977,977,977,977,977,981,981,977,,981,,',
',,,,,981,981,,981,981,981,981,981,981,981,,,981,981,,,,981,981,981,981',
',,,,,981,,,,,,,,981,981,,981,981,981,981,981,981,981,981,981,981,981',
'981,982,982,981,,982,,,,,,,,982,982,,982,982,982,982,982,982,982,,,982',
'982,,,,982,982,982,982,,,,,,982,,,,,,,,982,982,,982,982,982,982,982',
'982,982,982,982,982,982,982,,926,982,926,926,926,926,926,,703,,703,703',
'703,703,703,926,,,,,,,,703,,1026,,1026,1026,1026,1026,1026,,,,,,926',
',,1026,,,,,703,926,926,926,926,,,,926,703,703,703,703,,,,703,1026,,743',
',743,743,743,743,743,,,1026,1026,,,,1026,743,,744,,744,744,744,744,744',
',701,,701,701,701,701,701,744,,,,,743,,,701,,,,,,743,743,743,743,,,',
'743,744,,,,,,,,701,744,744,744,744,,,,744,701,701,701,701,,,986,701',
'986,986,986,986,986,,543,,543,543,543,543,543,986,,,,,,,,543,,997,,997',
'997,997,997,997,,,,,,986,,,997,,,,,543,,,986,986,,,,986,543,543,543',
'543,,,,543,997,,891,,891,891,891,891,891,997,997,997,997,,,,997,891',
',893,,893,893,893,893,893,895,,895,895,895,895,895,,893,,,,,891,,895',
',,,,,,891,891,891,891,,,,891,893,,,,,,,895,,,,893,893,,,,893,,895,895',
',,897,895,897,897,897,897,897,,338,,338,338,338,338,338,897,,,,,,,,338',
',1003,,1003,1003,1003,1003,1003,,,,,,897,,,1003,,,,,338,338,,897,897',
',,,897,338,338,338,338,,,,338,1003,,1001,,1001,1001,1001,1001,1001,',
',1003,1003,,,,1003,1001,,924,,924,924,924,924,924,,,,,,,,,924,,,,,1001',
',,,,,,,,,,1001,1001,,,,1001,924,,,,,,,,,924,924,924,924,,,,924' ]
        racc_action_check = arr = ::Array.new(25405, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4357,   799,   nil,  -115,   nil, 19453,  1366,   728, 23409, 23281,
   727,   nil,   666,   663,   624,   676,   836,   566,   nil,   -83,
  9818,  2397,   702,   nil,   628,   nil,   174,   940,  1590,  9949,
 10080, 10211,   nil,  4217, 10342, 10473,   nil,   570,   287,   397,
   647,   386, 10612, 10743, 10874,   566,   984,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1208,   nil,   -71, 11136,
 11267,   -15,   nil, 11398, 11529,   nil,   nil, 11660, 11799, 11930,
 12061, 23778,   nil,   nil,   nil,   nil,   nil,   518,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   718,   nil,   nil,   386,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   662,
   nil, 12200,   nil,   nil,   nil,   nil, 12339, 12470, 12601, 12732,
 12871,  4637,   nil,   219,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   497,   nil,  5057, 13133, 13264, 13395,
  9163, 13657, 13788, 23839, 23900,   nil,   nil, 13919, 14050, 14181,
   nil,   nil,   832,   228,   166,   506,   117,   409,   385,   nil,
 14705,  5757,   335, 14836,  5888,  6019,  6150,  6281,  6412,  6543,
  6674,  6805,  6936,  7067,  7198,  7329,  7460,  7591,  7722,  7853,
  7984,  8115,  8246,  8377,  8508,  8639,  8770,  8901,  9032,   nil,
   nil, 23961,   nil,   nil,   294, 14967, 15098,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 15229,   nil,  2117,   nil,   232,   207,
   nil, 15491,   235, 15622,   nil,   nil, 15753, 15884,   nil,   nil,
   -73,   nil, 16023,  1322,  1148,  1110,  4917,  1110,  1148,  1093,
 16285,  3097,   908,   912,   948,  1164,   951,   nil,  1129,  1083,
    10,   nil,   nil,   nil,  1123,   335,  1078, 16817,   nil,   401,
  1144,   981,   nil,  1135,   nil, 17341,  3377, 17480,  1070,   nil,
   158,   208,  1102,  1069,   507,  1086,   nil,   nil, 25227,   395,
    -7,   -10, 17873, 18004,   152,  1148,  1028,    61,    39,   656,
  1082,    22,  1111,   nil,   nil,   279,   499,   306,   nil,   782,
   nil,  1024, 18266,   nil,   nil,   nil,   586,   582,   551,   529,
   513,   476,   443,   250,   -32,   nil,   691,   nil, 18397,   nil,
   425,   421,   430,   320,   382,   -12,   -31,   417,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1015, 23537,   nil,   nil,
   nil,   nil,   997,   nil,   nil,   973, 18659,   971,   nil,   nil,
   958,   nil,   800,   180,  1049,   nil,   nil,  1837,   nil,   nil,
   nil,   nil,   nil,  1977,   953,   nil,   943,   931,   188,    90,
  1480,   nil,   nil,   nil,   828,   276,   968,   nil,   nil,  1344,
  1072,   nil,   nil,   nil,   -12,   nil,   966, 24022, 24083, 19584,
   -82, 19715, 19846, 19977,  3937,  4077,   780,   335,   936,   934,
   933,   931,  4217,  4497,  4357,  3797,  1429,  1542,  1159,  1293,
  3097,  2817,  3517,  3377,  3657,  1055,  1222,  2957,  3237,  2537,
   934,   nil,  1702,   nil,   nil,   nil,   nil,   802,   nil,   810,
   nil,   906,   742,   nil,   nil, 22212,   nil, 22343,   nil, 22474,
   nil,   310,   nil,   nil,   nil, 22613,  1502,  3797,   727,   723,
   nil,   nil,   721, 13526,   722,  9425, 24144, 24205,   690,   754,
   nil,  9556,   714,   nil,  9294, 23014, 24266, 24327,  1699, 22883,
   851,   853,  1459,   681,   nil, 22752,   nil,   nil, 22081,   nil,
   nil,   nil,   nil, 25087,   nil,   741,   743,   nil,   746,   748,
   755,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   765,
   725,   nil,   nil, 21950,   nil,   nil,   nil,   866,   nil,   nil,
   nil,   868,   nil,   nil,   871,  4497,   915,   nil,  1837,    65,
    55,   928,   936, 21819, 21688, 24388, 24449,    65,   nil,   nil,
   580,   nil, 24510, 24571, 21557,   nil,   nil,   190,  4077,   875,
   nil,    19,   nil,   nil,   nil,   833,   nil,   nil,   nil,   849,
   nil,   nil,   169,   nil,   315,   nil,   nil,   835,   nil,   838,
   nil,   nil,   nil, 23153,   nil,   840, 21426, 21295, 21164, 24632,
 24693, 21033, 20894,   415,   901, 20763, 20632, 20501, 20370,   907,
   nil,   nil, 20239, 20108,   908,   nil,   nil,   nil,   471,   357,
   138,     0,   890,   894,   nil,   144,  1004,    -8,   924,   nil,
   nil,   110,   nil,   nil,   906,   nil,   968, 19314,   nil,   nil,
 19183,   nil,   946,   121, 19052,   927,   nil,   933,    27,   165,
   977,   167,   796,  1000,   958, 18921,   nil,  1029,   -14,  1082,
 18790,   nil,   972,   nil,   129,     3,   975,   554,   nil,   nil,
   317, 25027,   nil, 24946,   nil, 16332,   nil, 18528,   nil,  1079,
   nil,   974,   282,   987,   nil,   nil,   nil,   nil,   391,   nil,
  1110,   nil,   nil,   nil,   nil,  1116,   nil,    38,   999,    36,
    25,   172,   178, 18135,   611,   688,   nil,  1039,  4777, 17742,
   nil,  1162,  5197, 25002, 25019, 23665,   nil,   nil,   nil,   nil,
   nil,   nil,  2257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1054, 17611,  1068,   156,   355,   496,   608,   nil,  2677, 17210,
   nil,  1073,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil, 17079, 16948, 16686, 16555,   153, 16424,   nil,  1696,
   nil,  2117,   nil,   nil,   nil,  3237,   nil,   nil,   nil,   nil,
  1104,   234,   nil,   nil,  1231,   nil,  3657,  1110,  1159,   nil,
   nil,   nil,   nil,   nil,  3517,  2817,  1128,  1176,  -100,   nil,
   nil,   nil,   -79,   -32,   nil,    26,    53,   nil,    60,   nil,
   nil,   107,  1135,   115,  1409,   nil,   270,   nil, 16154,   297,
  2397,  1977,   nil, 15360,  3937,    68,    62,   nil,   441,   172,
  5617,   nil,   469,   385,   -77,   nil,   395,   398,   416,   nil,
   nil, 14574, 14443,  2257,   448,   454,   nil,   458,   462,   467,
   nil,   503,   489,   482, 14312,   nil,   nil,   nil,   nil,   nil,
  2537,   nil,   nil,    52, 13002,   nil,   519,   634,  1065,   nil,
   nil, 25143,   nil, 25160,   nil, 25167,   nil, 25219,   nil,   nil,
   nil,   nil,   275,  1140,   532,   nil,    32,   nil,   658,   659,
   nil,    18,   nil,   nil,   nil,   660,   nil,   nil,   nil,   583,
   nil,   894,   nil,   nil, 25300,   nil, 24938,   nil, 12108,   nil,
   nil,   580, 11005,   985,   642,   nil,  2677,     9,     6,   500,
   652,   100,   nil,   nil,   nil,   381,   nil,   nil,   nil,   603,
   604,   614,   615,   619,  1201,   623,  1279,  5477,   nil,   nil,
   nil,   nil,   nil,  5337,   nil,  2957,   630,   nil,   nil,   631,
   633,   636,   730,   nil,   640,   nil,  1010, 24754,   nil,   796,
  9687, 24815, 24876,    -1,   nil,  1176, 25079,   nil,   nil,   nil,
   nil,   933,   677,   453,   806,   808,   nil, 25104,   nil, 10520,
   nil, 25283,   nil, 25244,   nil,   nil,   730,   745,   nil,   708,
    18,   -11,    26,    -9,   nil,   813,   818,   nil,   nil,   nil,
   824,   829,   842,   858,    53,   nil, 24963,   nil,   nil,   nil,
   nil,   674,   nil ]

racc_action_default = [
    -3,  -600,    -1,  -586,    -4,  -600,    -7,  -600,  -600,  -600,
  -600,   -29,  -600,  -600,   -33,  -600,  -600,  -280,   -45,  -588,
  -600,   -50,   -52,   -53,   -54,   -57,  -257,  -257,  -257,  -294,
  -329,  -330,   -69,   -11,   -73,   -81,   -83,  -600,  -490,  -491,
  -600,  -600,  -600,  -600,  -600,  -588,  -236,  -271,  -272,  -273,
  -274,  -275,  -276,  -277,  -278,  -279,  -574,  -282,  -284,  -599,
  -564,  -302,  -390,  -600,  -600,  -307,  -310,  -586,  -600,  -600,
  -600,  -600,  -331,  -332,  -431,  -432,  -433,  -434,  -435,  -456,
  -438,  -439,  -458,  -460,  -443,  -448,  -452,  -454,  -470,  -458,
  -472,  -474,  -475,  -476,  -477,  -572,  -479,  -480,  -573,  -482,
  -483,  -484,  -485,  -486,  -487,  -488,  -489,  -494,  -495,  -600,
    -2,  -587,  -595,  -596,  -597,    -6,  -600,  -600,  -600,  -600,
  -600,    -3,   -17,  -600,  -112,  -113,  -114,  -115,  -116,  -117,
  -118,  -119,  -120,  -124,  -125,  -126,  -127,  -128,  -129,  -130,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,
  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,
  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,
  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,
  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,
  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,
  -191,  -192,  -193,  -194,   -22,  -121,   -11,  -600,  -600,  -600,
  -600,  -600,  -247,  -600,  -600,  -584,  -585,  -600,  -600,  -588,
  -589,   -49,  -600,  -490,  -491,  -600,  -280,  -600,  -600,  -228,
  -600,   -11,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -416,
  -398,  -600,  -582,  -583,   -58,  -247,  -600,  -301,  -402,  -413,
  -416,   -64,  -408,   -65,  -588,   -66,  -237,  -252,  -261,  -261,
  -256,  -600,  -262,  -600,  -456,  -566,  -600,  -600,   -67,   -68,
  -586,   -12,  -600,   -15,  -600,   -71,   -11,  -588,  -600,   -74,
   -77,   -11,   -89,   -90,  -600,  -600,   -97,  -294,  -297,  -588,
  -600,  -329,  -330,  -333,  -409,  -600,   -79,  -600,   -85,  -291,
  -473,  -600,  -213,  -214,  -229,  -600,   -11,  -600,  -588,  -238,
  -592,  -592,  -600,  -600,  -592,  -600,  -303,  -304,  -522,   -51,
  -600,  -600,  -600,  -600,  -586,  -600,  -587,  -490,  -491,  -600,
  -600,  -280,  -600,  -343,  -344,  -107,  -108,  -600,  -110,  -600,
  -280,  -498,  -600,  -490,  -491,  -322,  -112,  -113,  -154,  -155,
  -156,  -172,  -177,  -184,  -187,  -324,  -600,  -562,  -600,  -436,
  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  1033,    -5,
  -598,   -23,   -24,   -25,   -26,   -27,  -600,  -600,   -19,   -20,
   -21,  -122,  -600,   -30,   -32,  -267,  -600,  -600,  -266,   -31,
  -600,   -34,  -600,  -280,   -42,   -44,  -195,  -242,  -262,   -46,
   -47,   -35,  -196,  -242,  -588,  -248,  -261,  -261,  -575,  -576,
  -257,  -406,  -577,  -578,  -576,  -575,  -257,  -405,  -407,  -577,
  -578,   -41,  -203,   -48,  -588,  -300,  -600,  -600,  -600,  -247,
  -291,  -600,  -600,  -600,  -204,  -205,  -206,  -207,  -208,  -209,
  -210,  -211,  -215,  -216,  -217,  -218,  -219,  -220,  -221,  -222,
  -223,  -224,  -225,  -226,  -227,  -230,  -231,  -232,  -233,  -588,
  -600,  -417,  -257,  -575,  -576,  -413,   -59,  -588,  -258,  -600,
  -414,  -600,  -588,  -296,  -253,  -600,  -254,  -600,  -259,  -600,
  -263,  -600,  -569,  -571,   -10,  -587,   -14,    -3,  -588,   -70,
  -289,   -86,   -75,  -600,  -588,  -247,  -600,  -600,   -96,  -600,
  -473,  -600,   -82,   -87,  -600,  -600,  -600,  -600,  -234,  -600,
  -423,  -600,  -285,  -600,  -239,  -594,  -593,  -241,  -594,  -292,
  -293,  -565,  -391,  -522,  -394,  -561,  -561,  -505,  -507,  -507,
  -507,  -521,  -523,  -524,  -525,  -526,  -527,  -528,  -529,  -530,
  -600,  -532,  -534,  -536,  -541,  -543,  -544,  -546,  -551,  -553,
  -554,  -556,  -557,  -558,  -600,   -11,  -334,  -335,   -11,  -600,
  -600,  -600,  -600,  -600,  -247,  -600,  -600,  -291,  -315,  -107,
  -108,  -109,  -600,  -600,  -247,  -318,  -496,  -600,   -11,  -500,
  -326,  -588,  -437,  -457,  -462,  -600,  -464,  -440,  -459,  -600,
  -461,  -442,  -600,  -445,  -600,  -447,  -450,  -600,  -451,  -600,
  -471,    -8,   -18,  -600,   -28,  -270,  -600,  -600,  -247,  -600,
  -600,  -600,  -600,  -410,  -600,  -249,  -251,  -600,  -600,   -60,
  -246,  -403,  -600,  -600,   -62,  -404,  -299,  -590,  -575,  -576,
  -575,  -576,  -588,  -600,  -397,  -379,   -55,  -399,  -600,  -244,
  -411,  -379,  -412,  -295,  -261,  -260,  -264,  -600,  -567,  -568,
  -600,   -13,  -600,   -72,  -600,   -78,   -84,  -588,  -575,  -576,
  -245,  -579,   -95,  -600,   -80,  -600,  -202,  -212,  -588,  -599,
  -599,  -283,  -588,  -288,  -592,  -600,  -588,  -600,  -503,  -504,
  -600,  -600,  -514,  -600,  -517,  -600,  -519,  -600,  -345,  -600,
  -347,  -349,  -356,  -588,  -535,  -545,  -555,  -559,  -599,  -336,
  -599,  -308,  -337,  -338,  -311,  -600,  -314,  -600,  -588,  -575,
  -576,  -579,  -290,  -600,  -107,  -108,  -111,  -588,   -11,  -600,
  -320,  -600,   -11,  -522,  -522,  -600,  -563,  -463,  -466,  -467,
  -468,  -469,   -11,  -441,  -444,  -446,  -449,  -453,  -455,  -123,
  -268,  -600,  -588,  -575,  -576,  -576,  -575,   -43,  -243,  -600,
  -591,  -261,   -37,  -198,   -38,  -199,   -61,   -39,  -201,   -40,
  -200,   -63,  -600,  -600,  -600,  -600,  -410,  -600,  -380,  -588,
  -382,   -11,  -401,  -400,   -56,   -11,  -255,  -265,  -570,   -16,
   -76,  -410,   -88,  -298,  -599,  -341,   -11,  -424,  -599,  -425,
  -426,  -286,  -240,  -392,   -11,   -11,  -384,  -600,  -561,  -542,
  -560,  -506,  -507,  -507,  -533,  -507,  -507,  -552,  -507,  -530,
  -547,  -588,  -600,  -354,  -600,  -531,  -600,  -339,  -600,  -600,
   -11,   -11,  -313,  -600,   -11,  -410,  -600,  -410,  -600,  -600,
   -11,  -323,  -600,  -588,  -600,  -327,  -600,  -269,  -410,   -36,
  -197,  -250,  -600,  -235,  -561,  -561,  -361,  -363,  -363,  -363,
  -378,  -600,  -588,  -530,  -538,  -539,  -549,  -418,  -415,    -9,
   -11,  -430,  -342,  -600,  -600,  -428,  -600,  -600,  -600,  -393,
  -502,  -600,  -510,  -600,  -512,  -600,  -515,  -600,  -518,  -520,
  -346,  -348,  -352,  -600,  -357,  -305,  -600,  -306,  -600,  -600,
  -264,  -599,  -316,  -319,  -497,  -600,  -325,  -499,  -501,  -500,
  -465,  -600,  -359,  -360,  -369,  -371,  -600,  -374,  -600,  -376,
  -381,  -600,  -600,  -537,  -600,  -429,   -11,  -490,  -491,  -600,
  -600,  -280,  -427,  -395,  -396,  -588,  -386,  -388,  -389,  -507,
  -507,  -507,  -507,  -350,  -600,  -355,  -600,   -11,  -309,  -312,
  -419,  -420,  -421,   -11,  -321,   -11,  -561,  -540,  -362,  -363,
  -363,  -363,  -363,  -550,  -363,  -383,  -548,  -600,  -291,  -423,
  -247,  -600,  -600,  -291,  -385,  -600,  -600,  -508,  -511,  -513,
  -516,  -600,  -353,  -599,  -600,  -600,  -358,  -600,  -366,  -600,
  -368,  -600,  -372,  -600,  -375,  -377,  -290,  -579,  -422,  -588,
  -575,  -576,  -579,  -290,  -387,  -507,  -351,  -340,  -317,  -328,
  -363,  -363,  -363,  -363,  -410,  -509,  -600,  -364,  -367,  -370,
  -373,  -363,  -365 ]

clist = [
'218,336,422,299,375,213,689,26,442,329,268,272,26,262,260,277,277,277',
'486,408,409,582,424,261,127,127,325,26,742,313,313,2,122,205,531,668',
'26,26,26,836,26,111,551,340,341,534,537,344,114,541,6,316,496,544,591',
'6,320,824,489,279,279,279,380,313,313,313,522,110,130,130,26,26,132',
'132,26,487,668,295,297,804,827,339,339,698,699,339,904,127,817,331,334',
'721,724,264,271,273,391,392,393,394,868,823,115,825,948,415,713,946',
'415,665,839,665,114,973,415,901,361,365,26,575,578,480,381,26,26,26',
'26,26,26,387,960,345,491,808,339,339,339,339,883,430,436,379,278,278',
'278,275,288,289,791,612,614,382,396,383,795,955,221,384,385,386,747',
'6,739,822,819,967,752,623,332,657,395,6,330,1,668,377,333,337,397,633',
'421,871,404,352,973,595,441,482,354,869,376,326,327,692,328,342,840',
'431,277,445,496,948,343,841,1014,733,992,963,389,738,850,447,598,26',
'26,26,26,26,26,26,599,745,919,204,26,26,26,419,420,870,440,559,671,872',
'945,969,443,444,26,901,542,813,442,1016,422,338,695,551,879,665,665',
'277,277,824,493,831,661,725,696,652,277,655,675,,931,,,501,827,,684',
',26,26,658,,,509,298,,824,26,608,610,613,613,523,,608,736,519,949,,516',
'268,313,279,,272,26,,961,,26,279,,741,,26,533,526,,313,,1017,686,512',
',,,407,407,579,580,970,677,971,,505,,520,,,26,26,114,,,585,,295,508',
'506,403,414,295,514,414,965,26,26,,,414,504,,890,,912,824,339,339,,',
',262,,,,26,,,,430,436,600,,532,15,278,597,,488,15,,26,,278,,114,492',
',,776,728,,601,1020,781,668,,629,922,923,737,634,,786,581,812,16,15',
',127,640,16,,,,,645,622,,800,646,,,,773,775,222,431,801,778,780,277',
'559,796,762,222,222,222,680,16,304,304,848,551,551,,852,402,680,,,1008',
'26,130,853,854,653,132,,,440,,640,659,,,,,663,222,222,665,298,222,349',
'359,359,,523,845,,,,,673,15,523,,847,,676,,,639,15,15,431,277,809,644',
'996,,844,,313,,431,680,26,755,26,755,313,858,,680,,16,26,,415,664,222',
'222,222,222,16,16,,440,415,415,26,,672,415,415,298,,440,796,,298,688',
',656,,,,,,430,436,6,915,,860,,,,,694,,,,431,277,,,773,775,780,778,431',
',,277,746,26,,15,26,15,962,,15,,26,,,559,15,559,793,,,,26,440,,,26,772',
'774,440,15,,777,779,431,277,,16,222,412,222,222,412,222,,722,722,,412',
'222,222,874,,,634,26,26,559,559,26,127,810,16,740,523,26,26,440,759',
'792,26,26,,,860,802,,,,634,,708,,936,,640,771,415,645,803,313,15,,811',
'995,15,222,222,816,855,15,313,767,873,130,222,957,,132,,,,,,835,,,727',
',,,,,16,,15,15,16,,,634,304,16,,846,,,,,634,849,,,,,,,,304,,,,,,,,,16',
'16,859,,26,,,634,,26,26,,,26,,339,222,222,881,,,339,885,26,,127,874',
'414,1024,874,,874,,874,816,,222,414,414,,26,,414,414,,,,,559,,,,222',
',1009,,,,,702,704,706,26,,,,26,407,,,,,,708,,900,833,26,,,,873,906,873',
'718,26,26,720,,,,39,,,,,39,917,,,,,874,,874,,874,,874,26,,26,26,,,26',
',816,,,339,26,,222,39,303,303,,,,,874,,313,,,,,,,,,,313,,,,15,,15,,26',
',,873,722,,,914,348,364,364,364,918,,,,,,414,,680,,818,,,,,,16,,16,',
',,,,304,,222,984,313,981,,,304,708,,708,,,,39,222,,,,26,,335,,39,39',
',,,,15,,,15,,,,,,,,26,431,277,,,,26,,26,,,,15,,,,,,,,,16,,26,16,,634',
',,440,222,,,856,440,,,865,953,708,222,15,,,16,15,,,,,,15,15,,,,15,15',
',,,,,,,,38,,,39,,38,877,412,222,,878,16,,,,,,412,412,,,882,412,412,708',
',708,,39,886,887,,,38,302,302,,,,892,894,,896,898,,899,,,826,,828,,',
',304,908,909,,,911,,708,405,418,,304,,,347,363,363,363,,,,,,,,,,,,,',
',15,,,39,15,,,39,,935,,303,39,,15,820,,966,820,,865,,865,,865,38,,222',
'303,,,15,16,222,38,38,16,39,39,,,,,,,,16,,867,,498,,500,15,,502,503',
'15,,,,13,,412,,979,13,,15,,,,,,,,15,15,,,987,988,989,990,,16,993,,,16',
',,994,865,13,865,,865,,865,16,,15,15,,,15,866,16,16,,,15,,,,,,,,38,',
'865,,,,,,,353,,,222,,16,16,,,16,,,,15,,16,38,1025,,,,950,,951,,952,',
',,,,,,,,,,,,933,,,,13,,16,625,,,939,,,13,13,,,972,,974,,,,,925,927,929',
',,,15,,,,,,,,38,,,,38,,,,302,38,39,,39,15,,,,,303,15,976,15,,,16,302',
'303,,,,,,,820,38,38,866,,866,1015,866,,,,,16,,,,,1021,16,1022,16,1023',
',,,666,,335,13,669,410,,,410,,222,,,,410,,,,,,,1031,39,,,39,,,13,,998',
'1000,1002,1004,,1005,,,,,666,17,,335,,39,17,,,,,866,,866,,866,,866,',
',,,,,,,,,714,,,,,,17,306,306,,39,,866,1027,1028,1029,1030,,,,418,13',
',,1032,13,,,,,13,,,,,,,,,,,351,360,360,,,,,,,,,,303,,13,13,,,,,,,760',
'303,,,,,,,,666,335,,,,,,,,,,,17,,,38,,38,,,,17,17,302,,,,,,,,302,797',
',,798,,,,,,,,,,39,,,,39,,,,,,807,,,,39,,,,,,,,,,,,,830,,,,,,,,,,,,,38',
',,38,,,,,,,,,,39,,,,39,,,,,17,38,413,,,413,39,,,,,413,,,39,39,,,,857',
',,,,,17,,,,,,,,,38,,,,,,39,39,,,39,,,,,,39,,,,,13,,13,,,,,,,,,,,,,,',
',,364,,,302,,,39,,,,938,,17,,302,,17,,,,306,17,,,,,,910,,,,,,,,,,306',
',,,,,,,335,17,17,,,,13,,,13,,,,364,,,,39,,,,,38,,,,38,,,13,,,,,,,38',
',39,,,,,,39,,39,,,,,,,,,,,,410,,,,13,,,,,,410,410,,,,410,410,38,,,,38',
',,,,,,,,,,38,,,,,,,,38,38,,,,,,,,,,,,,,,,,,,,,,,,,38,38,,,38,,,,,,38',
',,,,,,,,,,,,,,,,,,,,,,,363,,,,,,38,,,,937,13,,,,13,,,,,,,17,,17,13,',
',,,306,,,,,,,,306,,,,410,,,,,,,,,,,,,,,,363,,,,38,,13,,,,13,,,,,,,,',
',,13,,,,38,,,,13,13,38,,38,17,,,17,,,,,,,,,,,,,,,,,,13,13,17,,13,,,',
',751,13,,,,,,,,,,,,,,,,,,,,,413,,,,17,,,,,13,413,413,,942,,413,413,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,229,,306,,,,,,,276,276,276,,306,,,,,,,13',
',322,323,324,,,,,,,,,,,,,,,276,276,13,,,,,,13,,13,,,,,,,,,,,,,,,,,17',
',,,17,,,,,,,,,,17,,,,,,,,,,,,,,,,,413,,,,,,,,,,,,,,,,,,,,,,17,,,,17',
',,,,,,,,,,17,,,,,,,,17,17,,,,,,,,,,,,,,,,,,,,,,,,,17,17,,,17,,,,,,17',
',,,,,,,,276,417,,,423,276,,,,,423,,,,,360,,,,,,17,,229,,941,454,455',
'456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472',
'473,474,475,476,477,478,479,,,,,,,276,276,,,,,,,,276,,,,,,360,276,,276',
'17,,276,276,,,,,,,,,,,,,,,,,,17,,,,,,17,,17,,,,,,,,,,,,528,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,423,423,423,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,276,,276,,,,,,,,,,,,,,,',
'276,,,,,,,,,423,687,,,,,,,,,,276,,,276,,,,,,,,,,,,,,,,,,,,,,,,,276,',
',,,,,,,,,,,,,,,,,,276,276,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,276,423,276,,,,768,,,276,276,423,423,,,,423,423,,,,,,,,,,,,,,,,,,',
',,,,,276,,,276,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,276,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,423,,,,,,,,,,',
',,423,423,423,423,,863,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,276,,,,,,,,,,,,,,,,,,276,423,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(3054, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'33,88,64,50,57,31,10,43,64,69,73,73,43,31,141,35,35,35,41,22,22,94,29',
'38,58,58,33,43,98,66,66,2,15,15,8,181,43,43,43,92,43,6,166,17,17,71',
'71,17,97,71,7,51,75,140,55,7,65,172,42,72,72,72,154,66,66,66,52,4,61',
'61,43,43,62,62,43,29,181,46,47,11,177,24,24,123,123,24,119,58,132,72',
'72,93,93,40,40,40,17,17,17,17,128,129,5,129,135,18,118,134,18,76,11',
'76,97,178,18,116,56,56,43,91,91,142,155,43,43,43,43,43,43,155,148,4',
'142,149,24,24,24,24,150,39,39,153,70,70,70,45,45,45,130,158,158,156',
'2,157,130,119,20,160,161,162,163,7,165,170,174,175,164,63,68,74,7,7',
'70,1,181,86,87,90,25,30,26,132,23,95,178,96,26,39,19,129,99,100,101',
'102,103,104,105,73,35,48,75,135,106,107,134,108,119,109,5,110,111,31',
'112,43,43,43,43,43,43,43,113,114,115,16,43,43,43,24,24,120,58,171,14',
'126,133,128,24,24,43,116,136,137,64,119,64,138,139,166,12,76,76,35,35',
'172,48,118,145,94,140,29,35,147,52,,132,,,154,177,,52,,43,43,42,,,48',
'9,,172,43,159,159,159,159,50,,159,55,33,129,,31,73,66,72,,73,43,,11',
',43,72,,8,,43,33,31,,66,,92,64,51,,,,70,70,17,17,129,29,129,,6,,65,',
',43,43,97,,,31,,46,47,7,20,20,46,47,20,98,43,43,,,20,4,,123,,93,172',
'24,24,,,,31,,,,43,,,,39,39,38,,7,27,70,24,,45,27,,43,,70,,97,45,,,41',
'29,,24,129,41,181,,31,123,123,29,33,,30,4,71,28,27,,58,73,28,,,,,73',
'15,,52,48,,,,64,64,28,73,30,64,64,35,171,75,29,28,28,28,39,28,28,28',
'8,166,166,,8,9,39,,,10,43,61,140,140,33,62,,,58,,73,48,,,,,48,28,28',
'76,9,28,28,28,28,,50,30,,,,,48,27,50,,30,,48,,,40,27,27,73,35,22,40',
'123,,91,,66,,73,39,43,159,43,159,66,30,,39,,28,43,,18,72,28,28,28,28',
'28,28,,58,18,18,43,,2,18,18,9,,58,75,,9,24,,40,,,,,,39,39,7,8,,64,,',
',,72,,,,73,35,,,64,64,64,64,73,,,35,48,43,,27,43,27,94,,27,,43,,,171',
'27,171,88,,,,43,58,,,43,26,26,58,27,,26,26,73,35,,28,28,28,28,28,28',
'28,,97,97,,28,28,28,173,,,33,43,43,171,171,43,58,69,28,97,50,43,43,58',
'15,141,43,43,,,64,50,,,,33,,117,,91,,73,72,18,73,48,66,27,,48,8,27,28',
'28,33,57,27,66,7,171,61,28,91,,62,,,,,,48,,,70,,,,,,28,,27,27,28,,,33',
'28,28,,17,,,,,33,17,,,,,,,,28,,,,,,,,,28,28,26,,43,,,33,,43,43,,,43',
',24,28,28,69,,,24,69,43,,58,173,20,30,173,,173,,173,33,,28,20,20,,43',
',20,20,,,,,171,,,,28,,29,,,,,169,169,169,43,,,,43,70,,,,,,117,,48,117',
'43,,,,171,17,171,9,43,43,9,,,,54,,,,,54,48,,,,,173,,173,,173,,173,43',
',43,43,,,43,,33,,,24,43,,28,54,54,54,,,,,173,,66,,,,,,,,,,66,,,,27,',
'27,,43,,,171,97,,,97,54,54,54,54,97,,,,,,20,,39,,122,,,,,,28,,28,,,',
',,28,,28,33,66,31,,,28,117,,117,,,,54,28,,,,43,,67,,54,54,,,,,27,,,27',
',,,,,,,43,73,35,,,,43,,43,,,,27,,,,,,,,,28,,43,28,,33,,,58,28,,,9,58',
',,122,117,117,28,27,,,28,27,,,,,,27,27,,,,27,27,,,,,,,,,53,,,54,,53',
'9,28,28,,9,28,,,,,,28,28,,,9,28,28,117,,117,,54,9,9,,,53,53,53,,,,169',
'169,,169,169,,169,,,127,,127,,,,28,9,9,,,9,,117,67,67,,28,,,53,53,53',
'53,,,,,,,,,,,,,,,27,,,54,27,,,54,,9,,54,54,,27,124,,122,124,,122,,122',
',122,53,,28,54,,,27,28,28,53,53,28,54,54,,,,,,,,28,,127,,67,,67,27,',
'67,67,27,,,,21,,28,,9,21,,27,,,,,,,,27,27,,,169,169,169,169,,28,9,,',
'28,,,9,122,21,122,,122,,122,28,,27,27,,,27,124,28,28,,,27,,,,,,,,53',
',122,,,,,,,21,,,28,,28,28,,,28,,,,27,,28,53,169,,,,127,,127,,127,,,',
',,,,,,,,,,28,,,,21,,28,67,,,28,,,21,21,,,127,,127,,,,,125,125,125,,',
',27,,,,,,,,53,,,,53,,,,53,53,54,,54,27,,,,,54,27,28,27,,,28,53,54,,',
',,,,124,53,53,124,,124,127,124,,,,,28,,,,,127,28,127,28,127,,,,67,,67',
'21,67,21,,,21,,28,,,,21,,,,,,,127,54,,,54,,,21,,125,125,125,125,,125',
',,,,67,32,,67,,54,32,,,,,124,,124,,124,,124,,,,,,,,,,,67,,,,,,32,32',
'32,,54,,124,125,125,125,125,,,,67,21,,,125,21,,,,,21,,,,,,,,,,,32,32',
'32,,,,,,,,,,54,,21,21,,,,,,,67,54,,,,,,,,67,67,,,,,,,,,,,32,,,53,,53',
',,,32,32,53,,,,,,,,53,67,,,67,,,,,,,,,,54,,,,54,,,,,,67,,,,54,,,,,,',
',,,,,,67,,,,,,,,,,,,,53,,,53,,,,,,,,,,54,,,,54,,,,,32,53,32,,,32,54',
',,,,32,,,54,54,,,,67,,,,,,32,,,,,,,,,53,,,,,,54,54,,,54,,,,,,54,,,,',
'21,,21,,,,,,,,,,,,,,,,,54,,,53,,,54,,,,54,,32,,53,,32,,,,32,32,,,,,',
'67,,,,,,,,,,32,,,,,,,,67,32,32,,,,21,,,21,,,,54,,,,54,,,,,53,,,,53,',
',21,,,,,,,53,,54,,,,,,54,,54,,,,,,,,,,,,21,,,,21,,,,,,21,21,,,,21,21',
'53,,,,53,,,,,,,,,,,53,,,,,,,,53,53,,,,,,,,,,,,,,,,,,,,,,,,,53,53,,,53',
',,,,,53,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,53,,,,53,21,,,,21,,,,,,,32,,32',
'21,,,,,32,,,,,,,,32,,,,21,,,,,,,,,,,,,,,,53,,,,53,,21,,,,21,,,,,,,,',
',,21,,,,53,,,,21,21,53,,53,32,,,32,,,,,,,,,,,,,,,,,,21,21,32,,21,,,',
',32,21,,,,,,,,,,,,,,,,,,,,,32,,,,32,,,,,21,32,32,,21,,32,32,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,34,,32,,,,,,,34,34,34,,32,,,,,,,21,,34,34,34,,,',
',,,,,,,,,,,34,34,21,,,,,,21,,21,,,,,,,,,,,,,,,,,32,,,,32,,,,,,,,,,32',
',,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,,,,32,,,,32,,,,,,,,,,,32,,,,,,',
',32,32,,,,,,,,,,,,,,,,,,,,,,,,,32,32,,,32,,,,,,32,,,,,,,,,34,34,,,34',
'34,,,,,34,,,,,32,,,,,,32,,34,,32,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,34,34,34,,,,,,,34,34,,,,,,,,34,,,,',
',32,34,,34,32,,34,34,,,,,,,,,,,,,,,,,,32,,,,,,32,,32,,,,,,,,,,,,34,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34,34,34',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34,,34,,,,,,,,,,,,,,,,34',
',,,,,,,,34,34,,,,,,,,,,34,,,34,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,',
',,,,,,,,,34,34,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,34,',
',,34,,,34,34,34,34,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,,,,,,,,',
',,,,,,,,,,34,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,34,,,,,,,,34,,,,,,,,,,,,,34,34,34,34,,34,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,34',
'34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3054, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   173,    31,   nil,    64,    97,    38,    50,  -292,   245,
  -524,  -610,  -556,   nil,  -273,    24,   214,   -20,  -103,   120,
   136,  1177,  -188,   -25,    18,    56,   -31,   378,   410,  -190,
  -245,   -11,  1421,   -19,  2073,   -14,   nil,   nil,    -1,   -74,
    67,  -246,  -211,     7,   nil,   116,    44,    45,   -20,   nil,
   -31,    16,  -251,  1030,   827,  -303,    47,   -67,    16,   nil,
   nil,    60,    64,  -234,  -209,    15,    -5,   885,   109,   -50,
   113,  -285,    30,   -16,  -313,  -227,  -386,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   104,   116,   -60,   nil,
   115,  -221,  -679,  -488,  -324,   115,  -176,    45,  -571,   119,
   134,   134,  -339,   136,   130,  -525,   136,  -521,  -383,  -705,
  -386,  -530,  -153,  -155,  -379,  -633,  -717,   100,  -454,  -748,
  -560,   nil,   212,  -462,   434,   441,  -556,   375,  -689,  -600,
  -507,   nil,  -608,  -654,  -781,  -784,   -98,  -454,   183,  -296,
  -285,    -8,  -138,   nil,   nil,  -234,   nil,  -220,  -781,  -557,
  -670,   nil,   nil,    64,   -17,    40,    68,    69,  -234,   -99,
    72,    72,    72,  -445,  -440,  -434,  -296,   nil,   nil,   247,
  -538,  -107,  -644,  -159,  -533,  -756,   nil,  -623,  -813,   nil,
   nil,  -462 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   346,   293,   nil,   530,
   nil,   837,   nil,   290,   291,   nil,   nil,   nil,    11,    12,
    18,   227,   nil,   nil,    14,   nil,   411,   228,   321,   nil,
   nil,   593,   226,   446,    21,    22,    23,    24,   nil,   683,
   nil,   nil,   nil,   310,    25,   425,    32,   nil,   nil,    34,
    37,    36,   nil,   223,   224,   358,   nil,   129,   433,   128,
   131,    75,    76,   nil,   416,    90,    46,   282,   nil,   805,
   426,   nil,   427,   438,   641,   494,   280,   266,    47,    48,
    49,    50,    51,    52,    53,    54,    55,   nil,   267,    61,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   576,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   710,   558,   nil,   711,
   968,   864,   546,   nil,   547,   nil,   nil,   548,   nil,   550,
   nil,   788,   nil,   nil,   nil,   556,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   437,   490,   nil,   481,   nil,   nil,   nil,
   nil,    74,    77,    78,   nil,   nil,   nil,   nil,   nil,   603,
   nil,   nil,   nil,   nil,   nil,   nil,   821,   744,   545,   nil,
   549,   829,   561,   563,   564,   875,   567,   568,   876,   571,
   574,   285 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  4, 150, :_reduce_8,
  4, 153, :_reduce_9,
  2, 154, :_reduce_10,
  0, 158, :_reduce_11,
  1, 158, :_reduce_12,
  3, 158, :_reduce_13,
  2, 158, :_reduce_14,
  1, 159, :_reduce_none,
  4, 159, :_reduce_16,
  0, 170, :_reduce_17,
  4, 152, :_reduce_18,
  3, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  2, 152, :_reduce_22,
  3, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  4, 152, :_reduce_28,
  1, 152, :_reduce_none,
  3, 152, :_reduce_30,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  1, 152, :_reduce_none,
  3, 163, :_reduce_34,
  3, 163, :_reduce_35,
  6, 163, :_reduce_36,
  5, 163, :_reduce_37,
  5, 163, :_reduce_38,
  5, 163, :_reduce_39,
  5, 163, :_reduce_40,
  3, 163, :_reduce_41,
  1, 171, :_reduce_none,
  3, 171, :_reduce_43,
  1, 171, :_reduce_none,
  1, 169, :_reduce_none,
  3, 169, :_reduce_46,
  3, 169, :_reduce_47,
  3, 169, :_reduce_48,
  2, 169, :_reduce_49,
  1, 169, :_reduce_none,
  1, 162, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_55,
  3, 186, :_reduce_56,
  1, 188, :_reduce_none,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 164, :_reduce_69,
  3, 164, :_reduce_70,
  1, 192, :_reduce_71,
  3, 192, :_reduce_72,
  1, 191, :_reduce_none,
  2, 191, :_reduce_74,
  3, 191, :_reduce_75,
  5, 191, :_reduce_76,
  2, 191, :_reduce_77,
  4, 191, :_reduce_78,
  2, 191, :_reduce_79,
  4, 191, :_reduce_80,
  1, 191, :_reduce_81,
  3, 191, :_reduce_82,
  1, 195, :_reduce_none,
  3, 195, :_reduce_84,
  2, 194, :_reduce_85,
  3, 194, :_reduce_86,
  1, 197, :_reduce_87,
  3, 197, :_reduce_88,
  1, 196, :_reduce_89,
  1, 196, :_reduce_90,
  4, 196, :_reduce_91,
  3, 196, :_reduce_92,
  3, 196, :_reduce_93,
  3, 196, :_reduce_94,
  3, 196, :_reduce_95,
  2, 196, :_reduce_96,
  1, 196, :_reduce_97,
  1, 166, :_reduce_98,
  1, 166, :_reduce_99,
  4, 166, :_reduce_100,
  3, 166, :_reduce_101,
  3, 166, :_reduce_102,
  3, 166, :_reduce_103,
  3, 166, :_reduce_104,
  2, 166, :_reduce_105,
  1, 166, :_reduce_106,
  1, 200, :_reduce_107,
  1, 200, :_reduce_none,
  2, 201, :_reduce_109,
  1, 201, :_reduce_110,
  3, 201, :_reduce_111,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 205, :_reduce_117,
  1, 205, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_121,
  0, 208, :_reduce_122,
  4, 161, :_reduce_123,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 179, :_reduce_195,
  3, 179, :_reduce_196,
  6, 179, :_reduce_197,
  5, 179, :_reduce_198,
  5, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  4, 179, :_reduce_202,
  3, 179, :_reduce_203,
  3, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  4, 179, :_reduce_212,
  2, 179, :_reduce_213,
  2, 179, :_reduce_214,
  3, 179, :_reduce_215,
  3, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  2, 179, :_reduce_228,
  2, 179, :_reduce_229,
  3, 179, :_reduce_230,
  3, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  6, 179, :_reduce_235,
  1, 179, :_reduce_none,
  1, 212, :_reduce_none,
  1, 213, :_reduce_none,
  2, 213, :_reduce_none,
  4, 213, :_reduce_240,
  2, 213, :_reduce_241,
  1, 209, :_reduce_none,
  3, 209, :_reduce_243,
  3, 218, :_reduce_244,
  0, 219, :_reduce_245,
  1, 219, :_reduce_none,
  0, 174, :_reduce_247,
  1, 174, :_reduce_none,
  2, 174, :_reduce_none,
  4, 174, :_reduce_250,
  2, 174, :_reduce_251,
  1, 190, :_reduce_252,
  2, 190, :_reduce_253,
  2, 190, :_reduce_254,
  4, 190, :_reduce_255,
  1, 190, :_reduce_256,
  0, 222, :_reduce_257,
  2, 185, :_reduce_258,
  2, 221, :_reduce_259,
  2, 220, :_reduce_260,
  0, 220, :_reduce_261,
  1, 215, :_reduce_262,
  2, 215, :_reduce_263,
  3, 215, :_reduce_264,
  4, 215, :_reduce_265,
  1, 168, :_reduce_266,
  1, 168, :_reduce_none,
  3, 167, :_reduce_268,
  4, 167, :_reduce_269,
  2, 167, :_reduce_270,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_281,
  0, 245, :_reduce_282,
  4, 211, :_reduce_283,
  0, 246, :_reduce_284,
  0, 247, :_reduce_285,
  5, 211, :_reduce_286,
  0, 248, :_reduce_287,
  4, 211, :_reduce_288,
  3, 211, :_reduce_289,
  3, 211, :_reduce_290,
  2, 211, :_reduce_291,
  3, 211, :_reduce_292,
  3, 211, :_reduce_293,
  1, 211, :_reduce_294,
  4, 211, :_reduce_295,
  3, 211, :_reduce_296,
  1, 211, :_reduce_297,
  5, 211, :_reduce_298,
  4, 211, :_reduce_299,
  3, 211, :_reduce_300,
  2, 211, :_reduce_301,
  1, 211, :_reduce_none,
  2, 211, :_reduce_303,
  2, 211, :_reduce_304,
  6, 211, :_reduce_305,
  6, 211, :_reduce_306,
  0, 249, :_reduce_307,
  0, 250, :_reduce_308,
  7, 211, :_reduce_309,
  0, 251, :_reduce_310,
  0, 252, :_reduce_311,
  7, 211, :_reduce_312,
  5, 211, :_reduce_313,
  4, 211, :_reduce_314,
  0, 253, :_reduce_315,
  0, 254, :_reduce_316,
  9, 211, :_reduce_317,
  0, 255, :_reduce_318,
  6, 211, :_reduce_319,
  0, 256, :_reduce_320,
  7, 211, :_reduce_321,
  0, 257, :_reduce_322,
  5, 211, :_reduce_323,
  0, 258, :_reduce_324,
  6, 211, :_reduce_325,
  0, 259, :_reduce_326,
  0, 260, :_reduce_327,
  9, 211, :_reduce_328,
  1, 211, :_reduce_329,
  1, 211, :_reduce_330,
  1, 211, :_reduce_331,
  1, 211, :_reduce_332,
  1, 173, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  2, 236, :_reduce_336,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 237, :_reduce_none,
  5, 237, :_reduce_340,
  1, 156, :_reduce_none,
  2, 156, :_reduce_342,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 261, :_reduce_345,
  3, 261, :_reduce_346,
  1, 264, :_reduce_347,
  3, 264, :_reduce_348,
  1, 263, :_reduce_none,
  4, 263, :_reduce_350,
  6, 263, :_reduce_351,
  3, 263, :_reduce_352,
  5, 263, :_reduce_353,
  2, 263, :_reduce_354,
  4, 263, :_reduce_355,
  1, 263, :_reduce_356,
  3, 263, :_reduce_357,
  4, 265, :_reduce_358,
  2, 265, :_reduce_359,
  2, 265, :_reduce_360,
  1, 265, :_reduce_361,
  2, 270, :_reduce_362,
  0, 270, :_reduce_363,
  6, 271, :_reduce_364,
  8, 271, :_reduce_365,
  4, 271, :_reduce_366,
  6, 271, :_reduce_367,
  4, 271, :_reduce_368,
  2, 271, :_reduce_none,
  6, 271, :_reduce_370,
  2, 271, :_reduce_371,
  4, 271, :_reduce_372,
  6, 271, :_reduce_373,
  2, 271, :_reduce_374,
  4, 271, :_reduce_375,
  2, 271, :_reduce_376,
  4, 271, :_reduce_377,
  1, 271, :_reduce_none,
  0, 275, :_reduce_379,
  1, 275, :_reduce_380,
  3, 276, :_reduce_381,
  1, 276, :_reduce_382,
  4, 276, :_reduce_383,
  1, 277, :_reduce_384,
  4, 277, :_reduce_385,
  1, 278, :_reduce_386,
  3, 278, :_reduce_387,
  1, 279, :_reduce_388,
  1, 279, :_reduce_none,
  0, 283, :_reduce_390,
  0, 284, :_reduce_391,
  4, 235, :_reduce_392,
  4, 281, :_reduce_393,
  1, 281, :_reduce_394,
  3, 282, :_reduce_395,
  3, 282, :_reduce_396,
  3, 286, :_reduce_397,
  2, 182, :_reduce_398,
  4, 182, :_reduce_399,
  5, 182, :_reduce_400,
  5, 182, :_reduce_401,
  2, 234, :_reduce_402,
  4, 234, :_reduce_403,
  4, 234, :_reduce_404,
  3, 234, :_reduce_405,
  3, 234, :_reduce_406,
  3, 234, :_reduce_407,
  2, 234, :_reduce_408,
  1, 234, :_reduce_409,
  4, 234, :_reduce_410,
  3, 233, :_reduce_411,
  3, 233, :_reduce_412,
  0, 289, :_reduce_413,
  0, 290, :_reduce_414,
  4, 187, :_reduce_415,
  0, 291, :_reduce_416,
  0, 292, :_reduce_417,
  4, 287, :_reduce_418,
  5, 239, :_reduce_419,
  1, 293, :_reduce_420,
  1, 293, :_reduce_none,
  6, 155, :_reduce_422,
  0, 155, :_reduce_423,
  1, 294, :_reduce_424,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  2, 295, :_reduce_427,
  1, 295, :_reduce_none,
  2, 157, :_reduce_429,
  1, 157, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 224, :_reduce_434,
  1, 297, :_reduce_435,
  2, 297, :_reduce_436,
  3, 298, :_reduce_437,
  1, 298, :_reduce_438,
  1, 298, :_reduce_439,
  3, 225, :_reduce_440,
  4, 226, :_reduce_441,
  3, 227, :_reduce_442,
  0, 302, :_reduce_443,
  3, 302, :_reduce_444,
  1, 303, :_reduce_445,
  2, 303, :_reduce_446,
  3, 229, :_reduce_447,
  0, 305, :_reduce_448,
  3, 305, :_reduce_449,
  3, 228, :_reduce_450,
  3, 230, :_reduce_451,
  0, 306, :_reduce_452,
  3, 306, :_reduce_453,
  0, 307, :_reduce_454,
  3, 307, :_reduce_455,
  0, 299, :_reduce_456,
  2, 299, :_reduce_457,
  0, 300, :_reduce_458,
  2, 300, :_reduce_459,
  0, 301, :_reduce_460,
  2, 301, :_reduce_461,
  1, 304, :_reduce_462,
  2, 304, :_reduce_463,
  0, 309, :_reduce_464,
  4, 304, :_reduce_465,
  1, 308, :_reduce_466,
  1, 308, :_reduce_467,
  1, 308, :_reduce_468,
  1, 308, :_reduce_none,
  1, 206, :_reduce_470,
  3, 207, :_reduce_471,
  1, 296, :_reduce_472,
  2, 296, :_reduce_473,
  1, 210, :_reduce_474,
  1, 210, :_reduce_475,
  1, 210, :_reduce_476,
  1, 210, :_reduce_477,
  1, 198, :_reduce_478,
  1, 198, :_reduce_479,
  1, 198, :_reduce_480,
  1, 198, :_reduce_481,
  1, 198, :_reduce_482,
  1, 199, :_reduce_483,
  1, 199, :_reduce_484,
  1, 199, :_reduce_485,
  1, 199, :_reduce_486,
  1, 199, :_reduce_487,
  1, 199, :_reduce_488,
  1, 199, :_reduce_489,
  1, 231, :_reduce_490,
  1, 231, :_reduce_491,
  1, 172, :_reduce_492,
  1, 172, :_reduce_493,
  1, 177, :_reduce_494,
  1, 177, :_reduce_495,
  0, 310, :_reduce_496,
  4, 241, :_reduce_497,
  0, 241, :_reduce_498,
  3, 243, :_reduce_499,
  0, 312, :_reduce_500,
  3, 243, :_reduce_501,
  4, 311, :_reduce_502,
  2, 311, :_reduce_503,
  2, 311, :_reduce_504,
  1, 311, :_reduce_505,
  2, 314, :_reduce_506,
  0, 314, :_reduce_507,
  6, 285, :_reduce_508,
  8, 285, :_reduce_509,
  4, 285, :_reduce_510,
  6, 285, :_reduce_511,
  4, 285, :_reduce_512,
  6, 285, :_reduce_513,
  2, 285, :_reduce_514,
  4, 285, :_reduce_515,
  6, 285, :_reduce_516,
  2, 285, :_reduce_517,
  4, 285, :_reduce_518,
  2, 285, :_reduce_519,
  4, 285, :_reduce_520,
  1, 285, :_reduce_521,
  0, 285, :_reduce_522,
  1, 280, :_reduce_523,
  1, 280, :_reduce_524,
  1, 280, :_reduce_525,
  1, 280, :_reduce_526,
  1, 262, :_reduce_none,
  1, 262, :_reduce_528,
  1, 316, :_reduce_529,
  1, 317, :_reduce_530,
  3, 317, :_reduce_531,
  1, 272, :_reduce_532,
  3, 272, :_reduce_533,
  1, 318, :_reduce_534,
  2, 319, :_reduce_535,
  1, 319, :_reduce_536,
  2, 320, :_reduce_537,
  1, 320, :_reduce_538,
  1, 266, :_reduce_539,
  3, 266, :_reduce_540,
  1, 313, :_reduce_541,
  3, 313, :_reduce_542,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  2, 267, :_reduce_545,
  1, 267, :_reduce_546,
  3, 322, :_reduce_547,
  3, 323, :_reduce_548,
  1, 273, :_reduce_549,
  3, 273, :_reduce_550,
  1, 315, :_reduce_551,
  3, 315, :_reduce_552,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  2, 274, :_reduce_555,
  1, 274, :_reduce_556,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  2, 269, :_reduce_559,
  2, 268, :_reduce_560,
  0, 268, :_reduce_561,
  1, 244, :_reduce_none,
  3, 244, :_reduce_563,
  0, 232, :_reduce_564,
  2, 232, :_reduce_none,
  1, 217, :_reduce_566,
  3, 217, :_reduce_567,
  3, 326, :_reduce_568,
  2, 326, :_reduce_569,
  4, 326, :_reduce_570,
  2, 326, :_reduce_571,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 176, :_reduce_584,
  1, 176, :_reduce_585,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 193, :_reduce_590,
  2, 175, :_reduce_591,
  0, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 242, :_reduce_595,
  1, 242, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 214, :_reduce_599 ]

racc_reduce_n = 600

racc_shift_n = 1033

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@2",
  "arg_rhs",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@3",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@4",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "@21",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@22",
  "@23",
  "@24",
  "@25",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@26",
  "@27",
  "args_tail",
  "@28",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 42 omitted

def _reduce_43(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 44 omitted

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

def _reduce_55(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = [ val[0], *val[1], val[2] ]
                    
    result
end

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_62(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 73 omitted

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

def _reduce_117(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_122(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_235(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_241(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 242 omitted

def _reduce_243(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val
                    
    result
end

def _reduce_245(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = []
                    
    result
end

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_251(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_253(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_255(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_256(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_258(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = []
                    
    result
end

def _reduce_262(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 267 omitted

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_270(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_283(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_285(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[4])
                    
    result
end

def _reduce_287(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_301(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_304(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_305(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_306(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_307(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_308(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_313(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_314(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_316(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_318(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_319(val, _values, result)
                      if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend

                      @def_level = val[4]
                    
    result
end

def _reduce_322(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_323(val, _values, result)
                      if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_324(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_325(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_326(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_327(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_329(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_330(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

def _reduce_336(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

def _reduce_340(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 341 omitted

def _reduce_342(val, _values, result)
                      result = val
                    
    result
end

# reduce 343 omitted

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_346(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_347(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_352(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_355(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = []
                    
    result
end

def _reduce_364(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 369 omitted

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_371(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_372(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_374(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_380(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_381(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_382(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_384(val, _values, result)
                      result = []
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_387(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_388(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 389 omitted

def _reduce_390(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_391(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_392(val, _values, result)
                      @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_393(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_394(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_395(val, _values, result)
                      result = [ val[0], val[1], val[2] ]
                    
    result
end

def _reduce_396(val, _values, result)
                      result = [ val[0], val[1], val[2] ]
                    
    result
end

def _reduce_397(val, _values, result)
                      result = [ val[0], *val[1], val[2] ]
                    
    result
end

def _reduce_398(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_399(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_400(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_401(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_402(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_410(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_411(val, _values, result)
                      result = [ val[0], *val[1], val[2] ]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = [ val[0], *val[1], val[2] ]
                    
    result
end

def _reduce_413(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_414(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg = val[1]
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_416(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg = val[1]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 421 omitted

def _reduce_422(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = []
                    
    result
end

def _reduce_424(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 425 omitted

# reduce 426 omitted

def _reduce_427(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 428 omitted

def _reduce_429(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

def _reduce_434(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_435(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_436(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_437(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_438(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_439(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_440(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_441(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = []
                    
    result
end

def _reduce_444(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = []
                    
    result
end

def _reduce_449(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = []
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = []
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = []
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = []
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = []
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_465(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_473(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_474(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_475(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_476(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_477(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_497(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_498(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_499(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_500(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_501(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_502(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_505(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_507(val, _values, result)
                      result = []
                    
    result
end

def _reduce_508(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_510(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_522(val, _values, result)
                      result = []
                    
    result
end

def _reduce_523(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_524(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_525(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_526(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 527 omitted

def _reduce_528(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_529(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_530(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_531(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_532(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_534(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_535(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_536(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_537(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_538(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_540(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_541(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_542(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 543 omitted

# reduce 544 omitted

def _reduce_545(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_546(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_547(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_548(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_549(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_551(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_552(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_556(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 557 omitted

# reduce 558 omitted

def _reduce_559(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_560(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_561(val, _values, result)
                      result = []
                    
    result
end

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_564(val, _values, result)
                      result = []
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_567(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_568(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_569(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_570(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_585(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 586 omitted

# reduce 587 omitted

# reduce 588 omitted

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_591(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 592 omitted

# reduce 593 omitted

# reduce 594 omitted

def _reduce_595(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

def _reduce_599(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby24
  end   # module Parser
