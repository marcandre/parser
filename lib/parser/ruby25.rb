# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class Ruby25 < Parser::Base


  def version
    25
  end

  def default_encoding
    Encoding::UTF_8
  end
##### State transition tables begin ###

clist = [
'-293,578,578,578,1004,578,-105,-293,-293,-293,272,-98,-293,-293,-293',
'221,-293,272,578,220,210,211,620,618,210,211,-293,-293,-293,114,-99',
'-106,-106,584,113,-101,-293,-293,-105,-293,-293,-293,-293,-293,-101',
'216,-103,-100,-84,816,-98,-104,451,210,211,210,211,-486,-70,-100,221',
'452,724,-103,-486,720,-293,-293,-293,-293,-293,-293,-293,-293,-293,-293',
'-293,-293,-293,-293,-102,724,-293,-293,-293,-99,786,-293,619,617,-293',
'724,267,-293,-293,590,-293,271,-293,591,-293,718,-293,-293,271,-293',
'-293,-293,-293,-293,217,-293,-104,-293,221,-96,-579,-102,221,114,114',
'114,-486,114,113,113,113,-293,113,-98,-293,-293,-293,-293,-98,-293,114',
'-293,-582,844,-97,113,-293,-104,-92,-582,-582,-582,-99,221,-106,-582',
'-582,-99,-582,-106,-105,-578,815,-89,-95,-105,-101,-582,-103,-100,114',
'-101,-91,-103,-100,113,-94,-94,-582,-582,784,-582,-582,-582,-582,-582',
'-578,-290,791,114,114,-93,-91,-579,113,113,-92,453,-90,114,272,791,-102',
'272,113,210,211,-102,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582',
'-582,-582,-582,-582,454,790,-582,-582,-582,-290,644,807,-93,584,-582',
'114,-104,-582,790,-103,113,-104,-582,717,-582,-94,-582,-582,218,-582',
'-582,-582,-582,-582,-293,-582,-582,-582,-578,-93,-91,-293,-293,-293',
'-92,716,267,-293,-293,267,-293,-582,221,537,-582,-582,536,-582,639,-582',
'537,-106,-582,539,708,-94,-582,-102,-94,271,-293,-293,271,-293,-293',
'-293,-293,-293,-94,-93,-91,114,-93,-91,-92,-106,113,-92,706,770,852',
'639,-93,-91,114,92,93,-92,638,113,-293,-293,-293,-293,-293,-293,-293',
'-293,-293,-293,-293,-293,-293,-293,-582,-103,-293,-293,-293,221,643',
'-582,986,704,-293,702,-578,-293,92,93,-582,638,-293,863,-293,-496,-293',
'-293,-94,-293,-293,-293,-293,-293,-484,-293,-100,-293,-103,-582,701',
'-484,-484,-484,114,-101,-484,-484,-484,113,-484,-293,698,537,-293,-293',
'539,-293,-484,-293,-484,-484,-484,94,95,-495,-293,-104,-92,-582,-484',
'-484,-90,-484,-484,-484,-484,-484,-101,521,-100,558,-99,555,554,553',
'558,556,555,554,553,-489,556,-496,783,524,94,95,-489,-267,-484,-484',
'-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,605,694',
'-484,-484,-484,221,-484,-484,-98,692,-484,404,605,-484,-484,605,-484',
'691,-484,605,-484,537,-484,-484,539,-484,-484,-484,-484,-484,605,-484',
'-481,-484,839,807,-99,-101,-105,-481,-481,-481,-489,391,-481,-481,-481',
'-484,-481,835,-484,-484,-484,-484,955,-484,-481,-484,-481,-481,-481',
'862,-484,-484,607,606,603,525,-481,-481,241,-481,-481,-481,-481,-481',
'607,606,686,607,606,671,605,607,606,621,755,401,605,757,574,573,403',
'402,607,606,603,221,-481,-481,-481,-481,-481,-481,-481,-481,-481,-481',
'-481,-481,-481,-481,839,807,-481,-481,-481,530,-481,-481,210,211,-481',
'605,221,-481,-481,605,-481,-492,-481,686,-481,218,-481,-481,-492,-481',
'-481,-481,-481,-481,-293,-481,881,-481,607,606,608,-293,-293,-293,607',
'606,616,-293,-293,221,-293,-481,258,259,-481,-481,-481,-481,-490,-481',
'-265,-481,-576,885,321,-490,-481,-481,889,890,-293,-293,-97,-293,-293',
'-293,-293,-293,701,607,606,612,-106,607,606,610,-492,-491,257,256,892',
'-484,-481,894,-491,896,898,898,-484,-481,-293,-293,-293,-293,-293,-293',
'-293,-293,-293,-293,-293,-293,-293,-293,-484,216,-293,-293,-293,221',
'643,-484,631,-490,-293,675,-576,-293,216,904,-484,629,-293,906,-293',
'593,-293,-293,-84,-293,-293,-293,-293,-293,595,-293,-582,-293,908,-576',
'320,221,-491,-582,-582,-582,-484,-481,540,-582,-582,-293,-582,261,-293',
'-293,-488,-95,216,-293,541,-582,914,-488,917,587,-293,-104,221,-484',
'217,921,-582,-582,585,-582,-582,-582,-582,-582,524,216,-268,217,499',
'216,-487,216,978,216,221,663,983,-487,265,922,265,595,701,925,927,981',
'-582,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582,-582',
'929,931,-582,-582,-582,-488,644,217,216,221,-582,-96,933,-582,661,978',
'212,221,-582,944,-582,-105,-582,-582,595,-582,-582,-582,-582,-582,217',
'-582,-582,-582,217,-487,217,945,217,-495,655,216,-294,770,957,-575,209',
'-582,215,-294,-582,-582,-582,-93,959,-582,960,213,-294,-582,-582,-582',
'-582,-102,-582,-582,-582,965,-582,744,749,750,241,217,751,108,109,-582',
'-582,-582,-582,948,241,555,554,553,-89,556,-582,-582,-91,-582,-582,-582',
'-582,-582,-98,-481,976,208,-100,-336,241,979,-481,207,217,-294,-336',
'-575,898,957,241,-481,984,1027,987,-336,-582,-582,-582,-582,-582,-582',
'-582,-582,-582,-582,-582,-582,-582,-582,-575,898,-582,-582,-582,898',
'785,-582,216,898,-582,992,957,-582,-582,527,-582,122,-582,701,-582,998',
'-582,-582,452,-582,-582,-582,-582,-582,-481,-582,-582,-582,-336,1000',
'1002,80,-493,1004,558,1004,555,554,553,-493,556,-582,691,81,-582,-582',
'-582,-582,-493,-582,241,-582,-583,82,110,485,-582,-102,1004,-583,-583',
'-583,563,393,-583,-583,-583,217,-583,957,1019,710,566,1020,648,241,267',
'-583,-583,-583,-583,588,238,589,-579,-578,240,239,-583,-583,221,-583',
'-583,-583,-583,-583,948,-493,555,554,553,-293,556,1004,1004,574,573',
'238,-293,597,567,240,239,-579,236,237,637,-293,-583,-583,-583,-583,-583',
'-583,-583,-583,-583,-583,-583,-583,-583,-583,636,-294,-583,-583,-583',
'221,632,-583,-294,628,-583,627,-265,-583,-583,625,-583,-294,-583,622',
'-583,584,-583,-583,499,-583,-583,-583,-583,-583,497,-583,-583,-583,-293',
'485,563,558,-283,555,554,553,216,556,495,-283,566,-583,507,517,-583',
'-583,-583,-583,-283,-583,-248,-583,515,221,788,261,-583,-248,-248,-248',
'-294,-69,-248,-248,-248,-494,-248,241,710,795,497,499,-494,574,573,-248',
'-248,-248,567,485,771,-494,800,220,686,221,-248,-248,221,-248,-248,-248',
'-248,-248,510,-293,267,-283,511,238,-266,217,-293,240,239,267,686,-579',
'456,241,759,-293,807,455,221,758,-248,-248,-248,-248,-248,-248,-248',
'-248,-248,-248,-248,-248,-248,-248,-494,221,-248,-248,-248,754,744,-248',
'518,267,-248,276,221,-248,-248,833,-248,727,-248,221,-248,807,-248,-248',
'843,-248,-248,-248,-248,-248,-293,-248,-248,-248,558,,555,554,553,563',
'556,,558,,555,554,553,-248,556,566,-248,-248,-248,-248,,-248,,,,-248',
'-248,-248,-248,,-248,-248,-248,,-248,,558,561,555,554,553,563,556,-248',
'-248,710,571,570,574,573,,566,,567,-248,-248,,-248,-248,-248,-248,-248',
',,,,558,,555,554,553,563,556,561,117,118,119,120,121,221,,566,571,570',
'574,573,,,,567,558,,555,554,553,-248,556,-284,,,,,-248,561,-284,-284',
'-284,267,-248,-284,-284,-284,,-284,574,573,,,,567,,,,-284,-284,-284',
',710,,,-248,-248,,-284,-284,,-284,-284,-284,-284,-284,,,,,-248,241,',
'-248,,,,558,-248,555,554,553,,556,,-248,,,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,-284,-284,-284,,238,-284,-284,-284,240,239',
'-284,236,237,-284,,710,-284,-284,,-284,,-284,,-284,713,-284,-284,,-284',
'-284,-284,-284,-284,,-284,-300,-284,117,118,119,120,121,-300,-300,-300',
',,-300,-300,-300,-284,-300,,-284,-284,-284,-284,,-284,,-284,-300,-300',
',,-284,117,118,119,120,121,-300,-300,,-300,-300,-300,-300,-300,558,',
'555,554,553,558,556,555,554,553,,556,117,118,119,120,121,,,,,,-300,-300',
'-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,-300,,710,-300',
'-300,-300,,710,-300,,276,-300,,,-300,-300,903,-300,,-300,,-300,,-300',
'-300,,-300,-300,-300,-300,-300,,-300,-584,-300,,,,,,-584,-584,-584,',
',-584,-584,-584,-300,-584,,-300,-300,,-300,,-300,,-584,-584,-584,-584',
',-300,,,,,,-584,-584,,-584,-584,-584,-584,-584,,,,,,558,,555,554,553',
',556,,,,,,,,,,,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584,-584',
'-584,-584,-584,,,-584,-584,-584,,710,-584,,,-584,,,-584,-584,713,-584',
',-584,,-584,,-584,-584,,-584,-584,-584,-584,-584,,-584,-584,-584,,,',
',,,,,,,,,,-584,,,-584,-584,-584,-584,,-584,-412,-584,,,,,-584,-412,-412',
'-412,,,-412,-412,-412,241,-412,,,,,,,,,-412,-412,-412,,,,251,252,,,',
'-412,-412,,-412,-412,-412,-412,-412,,,,238,,244,,240,239,,236,237,,',
'242,,243,,,,,,-412,-412,-412,-412,-412,-412,-412,-412,-412,-412,-412',
'-412,-412,-412,,,-412,-412,-412,,,-412,,267,-412,,,-412,-412,,-412,',
'-412,,-412,,-412,-412,,-412,-412,-412,-412,-412,,-412,-412,-412,,,,',
',,,,,,,,,-412,,,-412,-412,,-412,,-412,294,70,71,72,9,58,-412,,,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,633',
'8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41',
'241,245,246,247,248,258,259,253,254,249,250,,234,235,,,251,252,,40,',
',33,,,59,60,,,61,,35,238,,244,45,240,239,,236,237,257,256,242,20,243',
',,,90,80,83,84,,85,87,86,88,,,,,81,89,,255,,-240,,,63,,82,94,95,294',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102',
'101,103,104,,,19,,,,,633,8,46,296,10,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,241,245,246,247,248,258,259,253,254,249,250',
',234,235,,,251,252,,40,,,33,,,59,60,,,61,,35,238,,244,45,240,239,,236',
'237,257,256,242,20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,255,,',
',,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105,107,96,57',
'98,97,99,,100,108,109,,92,93,42,43,41,241,245,246,247,248,258,259,253',
'254,249,250,,234,235,,,251,252,,40,,,33,,,59,60,,,61,,35,238,,244,45',
'240,239,,236,237,257,256,242,20,243,,,,90,80,83,84,,85,87,86,88,,,,',
'81,89,,255,,,,,63,,82,94,95,5,70,71,72,9,58,,,,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,7,10,106,105',
'107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,241,245,246,247,248',
'258,259,253,254,249,250,,234,235,,,251,252,,40,,,33,,,59,60,,,61,,35',
'238,,244,45,240,239,,236,237,257,256,242,20,243,,,,90,80,83,84,,85,87',
'86,88,,,,,81,89,221,255,,,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,',
'8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41',
'241,245,246,247,248,258,259,253,254,249,250,,234,235,,,251,252,,40,',
',33,,,59,60,,,61,,35,238,,244,45,240,239,,236,237,257,256,242,20,243',
',,,90,80,83,84,,85,87,86,88,,,,,81,89,,255,,,,,63,,82,94,95,294,70,71',
'72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103',
'104,,,19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,241,245,246,247,248,258,259,253,254,249,250,,234,235,,,251',
'252,,40,,,33,,,59,60,,,61,,35,238,,244,45,240,239,,236,237,257,256,242',
'20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,255,,,,,63,,82,94,95,294',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102',
'101,103,104,,,19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,241,245,246,247,248,258,259,253,254,249,250,,234',
'235,,,251,252,,40,,,33,,,59,60,,,61,,35,238,,244,45,240,239,,236,237',
'257,256,242,20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,255,,,,,63',
',82,94,95,5,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,',
'29,28,27,102,101,103,104,,,19,,,,,,8,46,7,10,106,105,107,96,57,98,97',
'99,,100,108,109,,92,93,42,43,41,241,245,246,247,248,258,259,253,254',
'249,250,,234,235,,,251,252,,40,,,33,,,59,60,,,61,,35,238,,244,45,240',
'239,,236,237,257,256,242,20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89',
',255,,,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105',
'107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,241,245,246,247,248',
'258,259,253,254,249,250,,-603,-603,,,251,252,,40,,,33,,,59,60,,,61,',
'35,238,,244,45,240,239,,236,237,257,256,242,20,243,,,,90,80,83,84,,85',
'87,86,88,,,,,81,89,,,,,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46',
'296,10,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,241,245',
'246,247,248,258,259,253,254,249,250,,-603,-603,,,251,252,,40,,,33,,',
'59,60,,,61,,35,238,,244,45,240,239,,236,237,257,256,242,20,243,,,,90',
'80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,294,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,',
',19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
'42,43,41,241,-603,-603,-603,-603,258,259,,,-603,-603,,,,,,251,252,,40',
',,33,,,59,60,,,61,,35,238,,244,45,240,239,,236,237,257,256,242,20,243',
',,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,5,70,71,72',
'9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103',
'104,,,19,,,,,,8,46,7,10,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,241,-603,-603,-603,-603,258,259,,,-603,-603,,,,,,251,252',
',40,,,33,,,59,60,,,61,,35,238,,244,45,240,239,,236,237,257,256,242,20',
'243,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,294,70',
'71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101',
'103,104,,,19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109',
',92,93,42,43,41,241,-603,-603,-603,-603,258,259,,,-603,-603,,,,,,251',
'252,,40,,,33,,,59,60,,,61,,35,238,,244,45,240,239,,236,237,257,256,242',
'20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,294',
'70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102',
'101,103,104,,,19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,241,-603,-603,-603,-603,258,259,,,-603,-603,,,,',
',251,252,,40,,,298,,,59,60,,,61,,35,238,,244,45,240,239,,236,237,257',
'256,242,20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94',
'95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28',
'27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99',
',100,108,109,,92,93,42,43,41,241,-603,-603,-603,-603,258,259,,,-603',
'-603,,,,,,251,252,,40,,,33,,,59,60,,,61,,35,238,,244,45,240,239,,236',
'237,257,256,242,20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63',
',82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,',
',,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105,107,96,57,98',
'97,99,,100,108,109,,92,93,42,43,41,241,-603,-603,-603,-603,258,259,',
',-603,-603,,,,,,251,252,,40,,,33,,,59,60,,,61,,35,238,,244,45,240,239',
',236,237,257,256,242,20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,',
',,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,241,245,246,247,248,258,259',
',,249,250,,,,,,251,252,,40,,,298,,,59,60,,,61,,35,238,,244,45,240,239',
',236,237,257,256,242,20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,',
',,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,241,245,246,247,248,258,259',
'253,,249,250,,,,,,251,252,,40,,,33,,,59,60,,,61,,35,238,,244,45,240',
'239,,236,237,257,256,242,20,243,,,,90,80,83,84,,85,87,86,88,,,,,81,89',
',,,,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105,107',
'96,57,98,97,99,,100,108,109,,92,93,42,43,41,241,,,,,,,,,,,,,,,,251,252',
',40,,,33,,,59,60,,,61,,35,238,,244,45,240,239,,236,237,,,242,20,243',
',,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,294,70,71,72',
'9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103',
'104,,,19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,241,,,,,,,,,,,,,,,,251,252,,40,,,298,,,59,60,,,61,,35,238',
',244,45,240,239,,236,237,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89',
',,,,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105,107',
'96,57,98,97,99,,100,108,109,,92,93,42,43,41,241,,,,,,,,,,,,,,,,251,252',
',40,,,33,,,59,60,,,61,,35,238,,244,45,240,239,,236,237,,,,20,,,,,90',
'80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,294,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,',
',19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
'42,43,41,241,,,,,,,,,,,,,,,,251,252,,40,,,33,,,59,60,,,61,,35,238,,',
'45,240,239,,236,237,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,',
',,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33',
',,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81',
'89,,,,,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105',
'107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40',
',,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88',
',,,,81,89,,,,,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68,,66,67',
'69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106',
'105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,',
',,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87',
'86,88,,,,,81,89,,,,,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296',
'10,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,',
',,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,90,80,83,84',
',85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,294,70,71,72,9,58,,,,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,',
'8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41',
',,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,,,,,90',
'80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,294,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,',
',19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
'42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20',
',,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,294,70,71',
'72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103',
'104,,,19,,,,,,8,46,296,10,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,',
',,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94',
'95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,',
',233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,',
',90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,233,,,,',
',,46,,,106,105,107,96,57,98,97,99,288,100,108,109,,92,93,42,43,41,,',
',,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285,,283,,45,,,289,,,,,,231',
',,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64',
'65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,',
'233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,',
',90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,233,,,,',
',,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,',
',,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83',
'84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,,106',
'105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,',
',,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87',
'86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232',
',,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81',
'89,221,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,',
',,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,,106,105,107,96,57,98,97',
'99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60',
',,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27',
'102,101,103,104,,,19,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45',
',,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58',
'82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101',
'103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,',
',,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94',
'95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103',
'104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
'42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,409,,,,45,,,,,,',
',,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94',
'95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103',
'104,,,233,,,,,,,311,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
',,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,90',
'80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,',
'68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,',
',,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,',
',,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80',
'83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68',
',66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,',
',311,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,,,317,,,,,,,,',
',,,,,,,,,,,307,,,303,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,90,80,83,84,,85',
'87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69',
'313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106',
'105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,',
',,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87',
'86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313',
'314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105',
'107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226',
',,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88',
',,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73',
'74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232',
',,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81',
'89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,',
',,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98',
'97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59',
'60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,',
',,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309',
'310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99',
',100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,',
'61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310',
'316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,',
',,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316',
'102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45',
',,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58',
'82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101',
'103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,',
',,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94',
'95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103',
'104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
'42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231',
',,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64',
'65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,',
'233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,',
',90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65',
',,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233',
',,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,',
',,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90',
'80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,',
'68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,',
',,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,',
',,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80',
'83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68',
',66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,',
',46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,',
',,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83',
'84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66',
'67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46',
',,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,',
',,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84',
',85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67',
'69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106',
'105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,',
',,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87',
'86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313',
'314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105',
'107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226',
',,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88',
',,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73',
'74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232',
',,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81',
'89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,',
',,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98',
'97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59',
'60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,',
',,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309',
'310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99',
',100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,',
'61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310',
'316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,',
',,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316',
'102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45',
',,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58',
'82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101',
'103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,',
',,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94',
'95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103',
'104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
'42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231',
',,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64',
'65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,',
'233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,',
',90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65',
',,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233',
',,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,',
',,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90',
'80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,',
'68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,233,,,,,,,46',
',,106,105,107,96,57,98,97,99,288,100,108,109,,92,93,42,43,41,,,,,,,',
',,,,,,,,,,,,226,,,232,,,59,60,,,61,,285,,283,,45,,,289,,,,,,231,,,,',
'90,286,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,233,,,,',
',,46,,,106,105,107,96,57,98,97,99,288,100,108,109,,92,93,42,43,41,,',
',,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285,,283,,45,,,289,,,,,,231',
',,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,233,',
',,,,,46,,,106,105,107,96,57,98,97,99,288,100,108,109,,92,93,42,43,41',
',,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285,,283,,45,,,289,,,,,,231',
',,,,90,286,83,84,,85,87,86,88,,,,,81,89,221,,,70,71,72,63,58,82,94,95',
'64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,233',
',,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,',
',,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90',
'80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,',
'68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,',
',,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,',
',,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80',
'83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,233,,,,,,,46,',
',106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,',
',,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,',
'85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67',
'69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106',
'105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,',
',,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87',
'86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313',
'314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105',
'107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226',
',,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88',
',,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73',
'74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232',
',,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81',
'89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',29,28,27,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99',
',100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,',
'61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,',
'63,,82,94,95,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,',
',29,28,27,102,101,103,104,,,19,,,,,,8,46,,10,106,105,107,96,57,98,97',
'99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,',
',61,,35,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27',
'102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45',
',,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58',
'82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101',
'103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100,108,109',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,283,,45',
',,289,,,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63',
'58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102',
'101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,668,',
'283,,45,,,289,,,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310',
'316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,',
',,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82',
'94,95,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28',
'27,102,101,103,104,,,19,,,,,,8,46,,10,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35',
',,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101',
'103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100,108,109',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285,,283',
',45,,,289,,,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70,71',
'72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316',
'102,101,103,104,,,233,,,,,,,311,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,,,317,,,,,,,,,,,,,,,,,,,,307,,,232,,,59,60,,,61,,,558,,555',
'554,553,563,556,,,,,,,,,566,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,513',
',561,63,,82,94,95,70,71,72,,58,574,573,,64,65,567,,,68,,66,67,69,30',
'31,73,74,,,,,,29,28,27,102,101,103,104,,,233,,,,,,,46,,,106,105,107',
'96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,',
',232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,',
',,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73',
'74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232',
',,59,60,,,61,,762,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,',
',81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74',
',,,,,29,28,27,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98',
'97,99,288,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,',
',59,60,,,61,,285,,283,,45,,,289,,,,,,231,,,,,90,286,83,84,,85,87,86',
'88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31',
'73,74,,,,,,29,28,27,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96',
'57,98,97,99,288,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,',
',232,,,59,60,,,61,,285,,283,,45,,,289,,,,,,231,,,,,90,286,83,84,,85',
'87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69',
'313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106',
'105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,',
',,,226,,,232,,,59,60,,,61,,285,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85',
'87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69',
'313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106',
'105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,',
',,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87',
'86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313',
'314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105',
'107,96,57,98,97,99,288,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,',
',,226,,,232,,,59,60,,,61,,,,,,45,,,289,,,,,,231,,,,,90,286,83,84,,85',
'87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69',
'313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,311,,,106',
'105,107,96,57,98,97,99,,100,108,109,,92,93,,,317,,,,,,,,,,,,,,,,,,,',
'307,,,303,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,90,80,83,84,,85,87,86,88,',
',,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73',
'74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96',
'57,98,97,99,288,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,',
',232,,,59,60,,,61,,668,,,,45,,,289,,,,,,231,,,,,90,286,83,84,,85,87',
'86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232',
',,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81',
'89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,',
',,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98',
'97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59',
'60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,',
',,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309',
'310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99',
',100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,',
'61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310',
'316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,',
',,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316',
'102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,530,,59,60,,,61,,,',
',,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82',
'94,95,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28',
'27,102,101,103,104,,,19,,,,,,8,46,,10,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35',
',,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316',
'102,101,103,104,,,233,,,,,,,311,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,59,60,,,61,,,,,,,,,',
',,,,,,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94',
'95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,',
',233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100,108,109,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285,,283,,45,,,289',
',,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82',
'94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103',
'104,,,233,,,,,,,311,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
',,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,59,60,,,61,,,558,,555,554,553,563',
'556,,,,,,,,,566,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,561,63,,82',
'94,95,70,71,72,9,58,574,573,,64,65,567,,,68,,66,67,69,30,31,73,74,,',
',,,29,28,27,102,101,103,104,,,19,,,,,,8,46,296,10,106,105,107,96,57',
'98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59',
'60,,,61,,35,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89',
',,,,,393,63,,82,94,95,70,71,72,,58,,,,64,65,,,,68,,66,67,69,313,314',
'73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107',
'96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,',
',232,,,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,',
',,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73',
'74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96',
'57,98,97,99,288,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,',
',232,,,59,60,,,61,,,,283,,45,,,289,,,,,,231,,,,,90,286,83,84,,85,87',
'86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313',
'314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105',
'107,96,57,98,97,99,288,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,',
',,226,,,232,,,59,60,,,61,,668,,283,,45,,,289,,,,,,231,,,,,90,286,83',
'84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,233,,,,,,,46,,,106',
'105,107,96,57,98,97,99,288,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,',
',,,,,,226,,,232,,,59,60,,,61,,285,,283,,45,,,289,,,,,,231,,,,,90,286',
'83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,',
'106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,',
',,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85',
'87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,,106,105,107',
'96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,',
',232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,',
',,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73',
'74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232',
',,59,60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81',
'89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,',
',,,309,310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98',
'97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59',
'60,,,61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,',
',,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309',
'310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99',
',100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,',
'61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27',
'102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285',
',283,,45,,,289,,,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310',
'316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,',
',,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101',
'103,104,,,19,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,',
',,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94',
'95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,',
',19,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,',
'90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,70,71,72,9,58',
',,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,',
',19,,,,,,8,46,7,10,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,',
',,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64',
'65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,',
'233,,,,,,,311,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,,,317',
',,,,,,,,,,,,,,,,,,,935,,,232,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,90,80,83',
'84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66',
'67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,311',
',,106,105,107,96,57,98,97,99,,100,108,109,,92,93,,,317,,,,,,,,,,,,,',
',,,,,,941,,,232,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,90,80,83,84,,85,87,86',
'88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314',
'73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,311,,,106,105,107',
'96,57,98,97,99,,100,108,109,,92,93,,,317,,,,,,,,,,,,,,,,,,,,935,,,232',
',,59,60,,,61,,,,,,,,,,,,,,,,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,',
',,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309',
'310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99',
',100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,',
'61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310',
'316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,288',
'100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61',
',,,283,,45,,,289,,,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,',
',70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28',
'27,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,',
',,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316',
'102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,668,',
',,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101',
'103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100,108,109',
',92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285,,283',
',45,,,289,,,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70,71',
'72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102',
'101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285,',
'283,,45,,,289,,,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27',
'102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285',
',283,,45,,,289,,,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310',
'316,102,101,103,104,,,233,,,,,,,311,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,59,60,,,61,,302',
',,,,,,,,,,,,,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58',
'82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101',
'103,104,,,233,,,,,,,311,,,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,,,317,,,,,,,,,,,,,,,,,,,,307,,,232,,,59,60,,,61,,,558,,555,554,553',
'563,556,,,,,,,,,566,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,319,,561',
'63,,82,94,95,70,71,72,,58,574,573,,64,65,567,,,68,,66,67,69,30,31,73',
'74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,,106,105,107,96,57,98',
'97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59',
'60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,',
',70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309',
'310,316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99',
',100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,',
'61,,,,,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310',
'316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,',
',,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316',
'102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45',
',,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58',
'82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101',
'103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,',
',,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94',
'95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103',
'104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
'42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231',
',,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64',
'65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,',
'233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100,108,109,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,285,,,,45,,,289,,,',
',,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94',
'95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103',
'104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,288,100,108,109,,92',
'93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,289',
',,,,,231,,,,,90,286,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82',
'94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316,102,101,103',
'104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
'42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231',
',,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64',
'65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,',
',,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,',
',,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80',
'83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68',
',66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,',
'106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,',
',,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85',
'87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69',
'30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,,106,105,107',
'96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,',
',232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,',
',,81,89,114,,,,,113,63,,82,94,95,70,71,72,,58,,,,64,65,,,,68,,66,67',
'69,313,314,73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,311,,',
'106,105,107,96,57,98,97,99,,100,108,109,,92,93,,,317,,,,,,,,,,,,,,,',
',,,,353,,,33,,,59,60,,,61,,35,,,,,,,,,,,,,,,,,,90,80,83,84,,85,87,86',
'88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314',
'73,74,,,,,,309,310,316,102,101,103,104,,,233,,,,,,,311,,,106,105,107',
'358,57,98,97,359,,100,108,109,,92,93,,,317,,,,,,,,,,,,,,,,,365,,,360',
',,232,,,59,60,,,61,,,,,,,,,,,,,,,,,,,,90,80,83,84,,85,87,86,88,,,,,81',
'89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,',
',,,309,310,316,102,101,103,104,,,233,,,,,,,311,,,106,105,107,358,57',
'98,97,359,,100,108,109,,92,93,,,317,,,,,,,,,,,,,,,,,,,,360,,,232,,,59',
'60,,,61,,,,,,,,,,,,,,,,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70',
'71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310',
'316,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,',
',,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,313,314,73,74,,,,,,309,310,316',
'102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108',
'109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45',
',,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58',
'82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103',
'104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93',
'42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,231',
',,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,70,71,72,9',
'58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104',
',,19,,,,,,8,46,7,10,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42',
'43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59,60,,,61,,35,,,,45,,,,,,,,,20,',
',,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,,,393,63,,82,94,95,70,71,72',
',58,,,,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104',
',,19,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,',
'90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,',
',46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,',
',,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83',
'84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66',
'67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,,106',
'105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,',
',,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87',
'86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30',
'31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,,46,,,106,105,107,96',
'57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232',
',,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81',
'89,,,,,,,63,,82,94,95,70,71,72,9,58,,,,64,65,,,,68,,66,67,69,30,31,73',
'74,,,,,,29,28,27,102,101,103,104,,,19,,,,,,8,46,,10,106,105,107,96,57',
'98,97,99,,100,108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,59',
'60,,,61,,35,,,,45,,,,,,,,,20,,,,,90,80,83,84,,85,87,86,88,,,,,81,89',
',,,70,71,72,63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29',
'28,27,102,101,103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100',
'108,109,,92,93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,409',
',,,45,,,,,,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72',
'63,58,82,94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101',
'103,104,,,233,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92',
'93,42,43,41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,409,,,,45,,,',
',,,,,231,,,,,90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82',
'94,95,64,65,,,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104',
',,19,,,,,,,46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43',
'41,,,,,,,,,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,',
'90,80,83,84,,85,87,86,88,,,,,81,89,,,,70,71,72,63,58,82,94,95,64,65',
',,,68,,66,67,69,30,31,73,74,,,,,,29,28,27,102,101,103,104,,,19,,,,,',
',46,,,106,105,107,96,57,98,97,99,,100,108,109,,92,93,42,43,41,,,,,,',
',,,,,,,,,,,,,226,,,232,,,59,60,,,61,,,,,,45,,,,,,,,,20,,,,,90,80,83',
'84,,85,87,86,88,,,,,81,89,,,,,,,63,,82,94,95,174,185,175,198,171,191',
'181,180,201,202,196,179,178,173,199,203,204,183,172,186,190,192,184',
'177,,,,193,200,195,194,187,197,182,170,189,188,,,,,,169,176,167,168',
'164,165,166,125,127,,,126,,,,,,,,158,159,,155,137,138,139,146,143,145',
',,140,141,,,,160,161,147,148,,,,,,,,,,,,,,152,151,,136,157,154,153,162',
'149,150,144,142,134,156,135,,,163,90,,,,,,,,,,,,,,89,174,185,175,198',
'171,191,181,180,201,202,196,179,178,173,199,203,204,183,172,186,190',
'192,184,177,,,,193,200,195,194,187,197,182,170,189,188,,,,,,169,176',
'167,168,164,165,166,125,127,,,126,,,,,,,,158,159,,155,137,138,139,146',
'143,145,,,140,141,,,,160,161,147,148,,,,,,,,,,,,,,152,151,,136,157,154',
'153,162,149,150,144,142,134,156,135,,,163,90,,,,,,,,,,,,,,89,174,185',
'175,198,171,191,181,180,201,202,196,179,178,173,199,203,204,183,172',
'186,190,192,184,177,,,,193,200,195,194,187,197,182,170,189,188,,,,,',
'169,176,167,168,164,165,166,125,127,124,,126,,,,,,,,158,159,,155,137',
'138,139,146,143,145,,,140,141,,,,160,161,147,148,,,,,,,,,,,,,,152,151',
',136,157,154,153,162,149,150,144,142,134,156,135,,,163,90,,,,,,,,,,',
',,,89,174,185,175,198,171,191,181,180,201,202,196,179,178,173,199,203',
'204,183,172,186,190,192,184,177,,,,193,200,195,194,187,197,182,170,189',
'188,,,,,,169,176,167,168,164,165,166,125,127,,,126,,,,,,,,158,159,,155',
'137,138,139,146,143,145,,,140,141,,,,160,161,147,148,,,,,,,,,,,,,,152',
'151,,136,157,154,153,162,149,150,144,142,134,156,135,,,163,90,,,,,,',
',,,,,,,89,174,185,175,198,171,191,181,180,201,202,196,179,178,173,199',
'203,204,183,172,186,190,192,184,177,,,,193,200,195,376,375,377,374,170',
'189,188,,,,,,169,176,167,168,371,372,373,369,127,98,97,370,,100,,,,',
',158,159,,155,137,138,139,146,143,145,,,140,141,,,,160,161,147,148,',
',,,,381,,,,,,,,152,151,,136,157,154,153,162,149,150,144,142,134,156',
'135,,,163,174,185,175,198,171,191,181,180,201,202,196,179,178,173,199',
'203,204,183,172,186,190,192,184,177,,,,193,200,195,194,187,197,182,170',
'189,188,,,,,,169,176,167,168,164,165,166,125,127,,,126,,,,,,,,158,159',
',155,137,138,139,146,143,145,,,140,141,,,,160,161,147,148,,,,,,,,,,',
',,,152,151,,136,157,154,153,162,149,150,144,142,134,156,135,679,435',
'163,,680,,,,,,,,158,159,,155,137,138,139,146,143,145,,,140,141,,,,160',
'161,147,148,,,,,,267,,,,,,,,152,151,,136,157,154,153,162,149,150,144',
'142,134,156,135,438,442,163,,437,,,,,,,,158,159,,155,137,138,139,146',
'143,145,,,140,141,,,,160,161,147,148,,,,,,267,,,,,,,,152,151,,136,157',
'154,153,162,149,150,144,142,134,156,135,682,442,163,,683,,,,,,,,158',
'159,,155,137,138,139,146,143,145,,,140,141,,,,160,161,147,148,,,,,,267',
',,,,,,,152,151,,136,157,154,153,162,149,150,144,142,134,156,135,1013',
'442,163,,1014,,,,,,,,158,159,,155,137,138,139,146,143,145,,,140,141',
',,,160,161,147,148,,,,,,267,,,,,,,,152,151,,136,157,154,153,162,149',
'150,144,142,134,156,135,735,442,163,,736,,,,,,,,158,159,,155,137,138',
'139,146,143,145,,,140,141,,,,160,161,147,148,,,,,,267,,,,,,,,152,151',
',136,157,154,153,162,149,150,144,142,134,156,135,1008,442,163,,1007',
',,,,,,,158,159,,155,137,138,139,146,143,145,,,140,141,,,,160,161,147',
'148,,,,,,267,,,,,,,,152,151,,136,157,154,153,162,149,150,144,142,134',
'156,135,483,435,163,,484,,,,,,,,158,159,,155,137,138,139,146,143,145',
',,140,141,,,,160,161,147,148,,,,,,,,,,,,,,152,151,,136,157,154,153,162',
'149,150,144,142,134,156,135,732,442,163,,733,,,,,,,,158,159,,155,137',
'138,139,146,143,145,,,140,141,,,,160,161,147,148,,,,,,267,,,,,,,,152',
'151,,136,157,154,153,162,149,150,144,142,134,156,135,764,435,163,,765',
',,,,,,,158,159,,155,137,138,139,146,143,145,,,140,141,,,,160,161,147',
'148,,,,,,267,,,,,,,,152,151,,136,157,154,153,162,149,150,144,142,134',
'156,135,1011,435,163,,1012,,,,,,,,158,159,,155,137,138,139,146,143,145',
',,140,141,,,,160,161,147,148,,,,,,267,,,,,,,,152,151,,136,157,154,153',
'162,149,150,144,142,134,156,135,483,435,163,,484,,,,,,,,158,159,,155',
'137,138,139,146,143,145,,,140,141,,,,160,161,147,148,,,,,,267,,,,,,',
',152,151,,136,157,154,153,162,149,150,144,142,134,156,135,730,435,163',
',731,,,,,,,,158,159,,155,137,138,139,146,143,145,,,140,141,,,,160,161',
'147,148,,,,,,267,,,,,,,,152,151,,136,157,154,153,162,149,150,144,142',
'134,156,135,431,435,163,,432,,,,,,,,158,159,,155,137,138,139,146,143',
'145,,,140,141,,,,160,161,147,148,,,,,,267,,,,,,,,152,151,,136,157,154',
'153,162,149,150,144,142,134,156,135,651,442,163,,652,,,,,,,,158,159',
',155,137,138,139,146,143,145,,,140,141,,,,160,161,147,148,,,,,,267,',
',,,,,,152,151,,136,157,154,153,162,149,150,144,142,134,156,135,649,435',
'163,,650,,,,,,,,158,159,,155,137,138,139,146,143,145,,,140,141,,,,160',
'161,147,148,,,,,,267,,,,,,,,152,151,,136,157,154,153,162,149,150,144',
'142,134,156,135,649,435,163,,650,,,,,,,,158,159,,155,137,138,139,146',
'143,145,,,140,141,,,,160,161,147,148,,,,,,267,,,,,,,,152,151,,136,157',
'154,153,162,149,150,144,142,134,156,135,651,442,163,,652,,,,,,,,158',
'159,,155,137,138,139,146,143,145,,,140,141,,,,160,161,147,148,,,,,,267',
',,,,,,,152,151,,136,157,154,153,162,149,150,144,142,134,156,135,767',
'442,163,,766,,,,,,,,158,159,,155,137,138,139,146,143,145,,,140,141,',
',,160,161,147,148,,,,,,267,,,,,,,,152,151,,136,157,154,153,162,149,150',
'144,142,134,156,135,,558,163,555,554,553,563,556,,558,,555,554,553,563',
'556,566,,,,,,,,566,,558,,555,554,553,563,556,,,,,,561,,,566,,,,,561',
'571,570,574,573,,,,567,571,570,574,573,,,,567,561,,558,,555,554,553',
'563,556,571,570,574,573,,,,567,566,,558,,555,554,553,563,556,,558,,555',
'554,553,563,556,566,,,,,561,,,566,,,,,,571,570,574,573,,,,567,561,,',
',,,,,561,571,570,574,573,,,,567,571,570,574,573,,,558,567,555,554,553',
'563,556,558,,555,554,553,563,556,,566,,,,,,558,566,555,554,553,563,556',
'558,,555,554,553,563,556,,566,561,,,,,,566,561,,,,574,573,,,,567,,574',
'573,,561,,567,,,,,561,,571,570,574,573,,,,567,,574,573,,,558,567,555',
'554,553,563,556,558,,555,554,553,563,556,558,566,555,554,553,563,556',
'558,566,555,554,553,563,556,,566,,,,,,,566,561,544,,,,,,561,,571,570',
'574,573,,561,,567,,574,573,,561,,567,,574,573,,,,567,,574,573,,,558',
'567,555,554,553,563,556,,,,,,,,,566,,,,,,,,,,,,,,,,,,,,,,561,,,,,,,',
',571,570,574,573,,,,567' ]
        racc_action_table = arr = ::Array.new(25042, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'652,907,343,344,1032,884,588,652,652,652,658,938,652,652,652,729,652',
'62,728,19,602,602,389,388,447,447,652,652,652,850,939,354,942,582,850',
'730,652,652,984,652,652,652,652,652,1011,223,1012,1025,674,696,350,733',
'223,342,342,689,689,375,674,846,19,223,580,731,375,577,652,652,652,652',
'652,652,652,652,652,652,652,652,652,652,1013,581,652,652,652,351,652',
'652,389,388,652,847,316,652,652,360,652,658,652,360,652,575,652,652',
'62,652,652,652,652,652,223,652,1014,652,602,588,733,732,447,907,343',
'344,375,884,907,343,344,652,884,938,652,652,652,652,938,652,728,652',
'767,728,354,728,652,652,730,767,767,767,939,689,942,767,767,939,767',
'942,984,1013,696,350,733,984,1011,767,1012,1025,580,1011,846,1012,1025',
'580,731,680,767,767,650,767,767,767,767,767,732,59,662,581,855,682,802',
'1014,581,855,679,226,351,847,26,656,1013,312,847,598,598,1013,767,767',
'767,767,767,767,767,767,767,767,767,767,767,767,227,662,767,767,767',
'59,767,912,732,912,767,347,1014,767,656,650,347,1014,767,572,767,680',
'767,767,416,767,767,767,767,767,766,767,767,767,682,682,802,766,766',
'766,679,568,26,766,766,312,766,767,738,333,767,767,333,767,765,767,334',
'227,735,334,560,680,767,767,680,26,766,766,312,766,766,766,766,766,680',
'682,802,598,682,802,679,416,598,679,551,859,742,432,682,802,292,41,41',
'679,764,292,766,766,766,766,766,766,766,766,766,766,766,766,766,766',
'735,765,766,766,766,946,766,735,946,550,766,549,735,766,317,317,735',
'431,766,787,766,39,766,766,432,766,766,766,766,766,99,766,859,766,432',
'735,547,99,99,99,3,764,99,99,99,3,99,766,546,695,766,766,695,766,99',
'766,99,99,99,41,41,224,766,766,431,735,99,99,39,99,99,99,99,99,431,318',
'787,713,39,713,713,713,903,713,903,903,903,374,903,225,649,453,317,317',
'374,761,99,99,99,99,99,99,99,99,99,99,99,99,99,99,501,534,99,99,99,763',
'99,99,224,532,99,205,613,99,99,615,99,531,99,390,99,337,99,99,337,99',
'99,99,99,99,383,99,96,99,719,719,225,649,453,96,96,96,374,110,96,96',
'96,99,96,713,99,99,99,99,903,99,96,99,96,96,96,772,99,99,501,501,501',
'322,96,96,325,96,96,96,96,96,613,613,522,615,615,501,384,390,390,390',
'613,124,387,615,701,701,124,124,383,383,383,331,96,96,96,96,96,96,96',
'96,96,96,96,96,96,96,994,994,96,96,96,519,96,96,14,14,96,386,46,96,96',
'385,96,373,96,801,96,17,96,96,373,96,96,96,96,96,437,96,805,96,384,384',
'384,437,437,437,387,387,387,437,437,514,437,96,44,44,96,96,96,96,372',
'96,808,96,359,809,40,372,96,96,817,818,437,437,17,437,437,437,437,437',
'819,386,386,386,17,385,385,385,373,371,44,44,823,370,369,824,371,826',
'827,829,370,369,437,437,437,437,437,437,437,437,437,437,437,437,437',
'437,359,415,437,437,437,832,437,359,415,372,437,512,359,437,362,834',
'359,415,437,837,437,362,437,437,509,437,437,437,437,437,362,437,438',
'437,840,359,37,508,371,438,438,438,370,369,335,438,438,437,438,22,437',
'437,377,437,352,437,336,438,849,377,853,352,437,437,854,359,415,857',
'438,438,352,438,438,438,438,438,321,977,858,362,338,940,376,24,977,379',
'492,491,940,376,24,865,379,977,866,868,869,940,438,438,438,438,438,438',
'438,438,438,438,438,438,438,438,870,872,438,438,438,377,438,352,934',
'873,438,321,874,438,489,934,15,487,438,887,438,321,438,438,934,438,438',
'438,438,438,977,438,438,438,940,376,24,888,379,38,480,16,518,634,905',
'358,13,438,16,518,438,438,651,438,909,438,910,16,518,651,651,651,438',
'438,651,651,651,916,651,920,606,606,464,934,606,606,606,651,651,651',
'651,986,463,986,986,986,38,986,651,651,634,651,651,651,651,651,38,358',
'932,12,634,47,462,935,358,10,16,518,47,358,1016,1017,461,358,941,1021',
'950,47,651,651,651,651,651,651,651,651,651,651,651,651,651,651,358,951',
'651,651,651,952,651,651,323,953,651,954,956,651,651,323,651,7,651,967',
'651,970,651,651,323,651,651,651,651,651,358,651,651,651,47,971,972,78',
'304,973,992,975,992,992,992,304,992,651,980,78,651,651,651,651,304,651',
'460,651,442,78,1,640,651,651,1022,442,442,442,922,349,442,442,442,323',
'442,993,995,992,922,996,449,475,439,442,442,442,442,353,460,355,1007',
'1008,460,460,442,442,1010,442,442,442,442,442,889,304,889,889,889,736',
'889,1023,1024,922,922,475,736,364,922,475,475,736,475,475,430,736,442',
'442,442,442,442,442,442,442,442,442,442,442,442,442,429,591,442,442',
'442,427,417,442,591,413,442,410,408,442,442,405,442,591,442,399,442',
'348,442,442,284,442,442,442,442,442,281,442,442,442,736,645,698,955',
'308,955,955,955,306,955,280,308,698,442,296,306,442,442,442,442,308',
'442,433,442,306,653,654,657,442,433,433,433,591,297,433,433,433,305',
'433,459,955,659,665,667,305,698,698,433,433,433,698,266,635,305,673',
'233,676,678,433,433,299,433,433,433,433,433,300,683,681,308,301,459',
'626,306,683,459,459,684,685,683,229,688,620,683,690,228,693,618,433',
'433,433,433,433,433,433,433,433,433,433,433,433,433,305,697,433,433',
'433,610,600,433,307,433,433,310,311,433,433,712,433,583,433,714,433',
'721,433,433,726,433,433,433,433,433,683,433,433,433,790,,790,790,790',
'790,790,,904,,904,904,904,433,904,790,433,433,482,433,,433,,,,482,482',
'482,433,,482,482,482,,482,,925,790,925,925,925,925,925,482,482,904,790',
'790,790,790,,925,,790,482,482,,482,482,482,482,482,,,,,929,,929,929',
'929,929,929,925,295,295,295,295,295,790,,929,925,925,925,925,,,,925',
'835,,835,835,835,482,835,57,,,,,482,929,57,57,57,482,482,57,57,57,,57',
'929,929,,,,929,,,,57,57,57,,835,,,482,482,,57,57,,57,57,57,57,57,,,',
',482,474,,482,,,,561,482,561,561,561,,561,,482,,,57,57,57,57,57,57,57',
'57,57,57,57,57,57,57,,474,57,57,57,474,474,57,474,474,57,,561,57,57',
',57,,57,,57,561,57,57,,57,57,57,57,57,,57,28,57,6,6,6,6,6,28,28,28,',
',28,28,28,57,28,,57,57,57,57,,57,,57,28,28,,,57,533,533,533,533,533',
'28,28,,28,28,28,28,28,957,,957,957,957,833,957,833,833,833,,833,506',
'506,506,506,506,,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,957',
'28,28,28,,833,28,,28,28,,,28,28,833,28,,28,,28,,28,28,,28,28,28,28,28',
',28,443,28,,,,,,443,443,443,,,443,443,443,28,443,,28,28,,28,,28,,443',
'443,443,443,,28,,,,,,443,443,,443,443,443,443,443,,,,,,710,,710,710',
'710,,710,,,,,,,,,,,443,443,443,443,443,443,443,443,443,443,443,443,443',
'443,,,443,443,443,,710,443,,,443,,,443,443,710,443,,443,,443,,443,443',
',443,443,443,443,443,,443,443,443,,,,,,,,,,,,,,443,,,443,443,443,443',
',443,27,443,,,,,443,27,27,27,,,27,27,27,528,27,,,,,,,,,27,27,27,,,,528',
'528,,,,27,27,,27,27,27,27,27,,,,528,,528,,528,528,,528,528,,,528,,528',
',,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27',
',,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,,27,27,27,,,,,,,,,,,,,,27',
',,27,27,,27,,27,815,815,815,815,815,815,27,,,815,815,,,,815,,815,815',
'815,815,815,815,815,,,,,,815,815,815,815,815,815,815,,,815,,,,,420,815',
'815,815,815,815,815,815,815,815,815,815,815,,815,815,815,,815,815,815',
'815,815,420,420,420,420,420,420,420,420,420,420,420,,420,420,,,420,420',
',815,,,815,,,815,815,,,815,,815,420,,420,815,420,420,,420,420,420,420',
'420,815,420,,,,815,815,815,815,,815,815,815,815,,,,,815,815,,420,,420',
',,815,,815,815,815,329,329,329,329,329,329,,,,329,329,,,,329,,329,329',
'329,329,329,329,329,,,,,,329,329,329,329,329,329,329,,,329,,,,,426,329',
'329,329,329,329,329,329,329,329,329,329,329,,329,329,329,,329,329,329',
'329,329,426,426,426,426,426,426,426,426,426,426,426,,426,426,,,426,426',
',329,,,329,,,329,329,,,329,,329,426,,426,329,426,426,,426,426,426,426',
'426,329,426,,,,329,329,329,329,,329,329,329,329,,,,,329,329,,426,,,',
',329,,329,329,329,807,807,807,807,807,807,,,,807,807,,,,807,,807,807',
'807,807,807,807,807,,,,,,807,807,807,807,807,807,807,,,807,,,,,,807',
'807,807,807,807,807,807,807,807,807,807,807,,807,807,807,,807,807,807',
'807,807,278,278,278,278,278,278,278,278,278,278,278,,278,278,,,278,278',
',807,,,807,,,807,807,,,807,,807,278,,278,807,278,278,,278,278,278,278',
'278,807,278,,,,807,807,807,807,,807,807,807,807,,,,,807,807,,278,,,',
',807,,807,807,807,507,507,507,507,507,507,,,,507,507,,,,507,,507,507',
'507,507,507,507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,,507',
'507,507,507,507,507,507,507,507,507,507,507,,507,507,507,,507,507,507',
'507,507,478,478,478,478,478,478,478,478,478,478,478,,478,478,,,478,478',
',507,,,507,,,507,507,,,507,,507,478,,478,507,478,478,,478,478,478,478',
'478,507,478,,,,507,507,507,507,,507,507,507,507,,,,,507,507,478,478',
',,,,507,,507,507,507,851,851,851,851,851,851,,,,851,851,,,,851,,851',
'851,851,851,851,851,851,,,,,,851,851,851,851,851,851,851,,,851,,,,,',
'851,851,851,851,851,851,851,851,851,851,851,851,,851,851,851,,851,851',
'851,851,851,864,864,864,864,864,864,864,864,864,864,864,,864,864,,,864',
'864,,851,,,851,,,851,851,,,851,,851,864,,864,851,864,864,,864,864,864',
'864,864,851,864,,,,851,851,851,851,,851,851,851,851,,,,,851,851,,864',
',,,,851,,851,851,851,845,845,845,845,845,845,,,,845,845,,,,845,,845',
'845,845,845,845,845,845,,,,,,845,845,845,845,845,845,845,,,845,,,,,',
'845,845,845,845,845,845,845,845,845,845,845,845,,845,845,845,,845,845',
'845,845,845,21,21,21,21,21,21,21,21,21,21,21,,21,21,,,21,21,,845,,,845',
',,845,845,,,845,,845,21,,21,845,21,21,,21,21,21,21,21,845,21,,,,845',
'845,845,845,,845,845,845,845,,,,,845,845,,21,,,,,845,,845,845,845,796',
'796,796,796,796,796,,,,796,796,,,,796,,796,796,796,796,796,796,796,',
',,,,796,796,796,796,796,796,796,,,796,,,,,,796,796,796,796,796,796,796',
'796,796,796,796,796,,796,796,796,,796,796,796,796,796,529,529,529,529',
'529,529,529,529,529,529,529,,529,529,,,529,529,,796,,,796,,,796,796',
',,796,,796,529,,529,796,529,529,,529,529,529,529,529,796,529,,,,796',
'796,796,796,,796,796,796,796,,,,,796,796,,529,,,,,796,,796,796,796,0',
'0,0,0,0,0,,,,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0,,,0,,,,,,0,0',
'0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,769,769,769,769,769,769,769,769',
'769,769,769,,769,769,,,769,769,,0,,,0,,,0,0,,,0,,0,769,,769,0,769,769',
',769,769,769,769,769,0,769,,,,0,0,0,0,,0,0,0,0,,,,,0,0,,769,,,,,0,,0',
'0,0,792,792,792,792,792,792,,,,792,792,,,,792,,792,792,792,792,792,792',
'792,,,,,,792,792,792,792,792,792,792,,,792,,,,,,792,792,792,792,792',
'792,792,792,792,792,792,792,,792,792,792,,792,792,792,792,792,457,457',
'457,457,457,457,457,457,457,457,457,,457,457,,,457,457,,792,,,792,,',
'792,792,,,792,,792,457,,457,792,457,457,,457,457,457,457,457,792,457',
',,,792,792,792,792,,792,792,792,792,,,,,792,792,,,,,,,792,,792,792,792',
'966,966,966,966,966,966,,,,966,966,,,,966,,966,966,966,966,966,966,966',
',,,,,966,966,966,966,966,966,966,,,966,,,,,,966,966,966,966,966,966',
'966,966,966,966,966,966,,966,966,966,,966,966,966,966,966,458,458,458',
'458,458,458,458,458,458,458,458,,458,458,,,458,458,,966,,,966,,,966',
'966,,,966,,966,458,,458,966,458,458,,458,458,458,458,458,966,458,,,',
'966,966,966,966,,966,966,966,966,,,,,966,966,,,,,,,966,,966,966,966',
'842,842,842,842,842,842,,,,842,842,,,,842,,842,842,842,842,842,842,842',
',,,,,842,842,842,842,842,842,842,,,842,,,,,,842,842,842,842,842,842',
'842,842,842,842,842,842,,842,842,842,,842,842,842,842,842,468,468,468',
'468,468,468,468,,,468,468,,,,,,468,468,,842,,,842,,,842,842,,,842,,842',
'468,,468,842,468,468,,468,468,468,468,468,842,468,,,,842,842,842,842',
',842,842,842,842,,,,,842,842,,,,,,,842,,842,842,842,122,122,122,122',
'122,122,,,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122',
'122,122,122,122,122,,,122,,,,,,122,122,122,122,122,122,122,122,122,122',
'122,122,,122,122,122,,122,122,122,122,122,469,469,469,469,469,469,469',
',,469,469,,,,,,469,469,,122,,,122,,,122,122,,,122,,122,469,,469,122',
'469,469,,469,469,469,469,469,122,469,,,,122,122,122,122,,122,122,122',
'122,,,,,122,122,,,,,,,122,,122,122,122,207,207,207,207,207,207,,,,207',
'207,,,,207,,207,207,207,207,207,207,207,,,,,,207,207,207,207,207,207',
'207,,,207,,,,,,207,207,207,207,207,207,207,207,207,207,207,207,,207',
'207,207,,207,207,207,207,207,470,470,470,470,470,470,470,,,470,470,',
',,,,470,470,,207,,,207,,,207,207,,,207,,207,470,,470,207,470,470,,470',
'470,470,470,470,207,470,,,,207,207,207,207,,207,207,207,207,,,,,207',
'207,,,,,,,207,,207,207,207,298,298,298,298,298,298,,,,298,298,,,,298',
',298,298,298,298,298,298,298,,,,,,298,298,298,298,298,298,298,,,298',
',,,,,298,298,298,298,298,298,298,298,298,298,298,298,,298,298,298,,298',
'298,298,298,298,471,471,471,471,471,471,471,,,471,471,,,,,,471,471,',
'298,,,298,,,298,298,,,298,,298,471,,471,298,471,471,,471,471,471,471',
'471,298,471,,,,298,298,298,298,,298,298,298,298,,,,,298,298,,,,,,,298',
',298,298,298,232,232,232,232,232,232,,,,232,232,,,,232,,232,232,232',
'232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,232,232',
'232,232,232,232,232,232,232,232,232,232,,232,232,232,,232,232,232,232',
'232,472,472,472,472,472,472,472,,,472,472,,,,,,472,472,,232,,,232,,',
'232,232,,,232,,232,472,,472,232,472,472,,472,472,472,472,472,232,472',
',,,232,232,232,232,,232,232,232,232,,,,,232,232,,,,,,,232,,232,232,232',
'958,958,958,958,958,958,,,,958,958,,,,958,,958,958,958,958,958,958,958',
',,,,,958,958,958,958,958,958,958,,,958,,,,,,958,958,958,958,958,958',
'958,958,958,958,958,958,,958,958,958,,958,958,958,958,958,473,473,473',
'473,473,473,473,,,473,473,,,,,,473,473,,958,,,958,,,958,958,,,958,,958',
'473,,473,958,473,473,,473,473,473,473,473,958,473,,,,958,958,958,958',
',958,958,958,958,,,,,958,958,,,,,,,958,,958,958,958,303,303,303,303',
'303,303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303',
'303,303,303,303,303,,,303,,,,,,303,303,303,303,303,303,303,303,303,303',
'303,303,,303,303,303,,303,303,303,303,303,476,476,476,476,476,476,476',
',,476,476,,,,,,476,476,,303,,,303,,,303,303,,,303,,303,476,,476,303',
'476,476,,476,476,476,476,476,303,476,,,,303,303,303,303,,303,303,303',
'303,,,,,303,303,,,,,,,303,,303,303,303,881,881,881,881,881,881,,,,881',
'881,,,,881,,881,881,881,881,881,881,881,,,,,,881,881,881,881,881,881',
'881,,,881,,,,,,881,881,881,881,881,881,881,881,881,881,881,881,,881',
'881,881,,881,881,881,881,881,477,477,477,477,477,477,477,477,,477,477',
',,,,,477,477,,881,,,881,,,881,881,,,881,,881,477,,477,881,477,477,,477',
'477,477,477,477,881,477,,,,881,881,881,881,,881,881,881,881,,,,,881',
'881,,,,,,,881,,881,881,881,599,599,599,599,599,599,,,,599,599,,,,599',
',599,599,599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,,599',
',,,,,599,599,599,599,599,599,599,599,599,599,599,599,,599,599,599,,599',
'599,599,599,599,479,,,,,,,,,,,,,,,,479,479,,599,,,599,,,599,599,,,599',
',599,479,,479,599,479,479,,479,479,,,479,599,479,,,,599,599,599,599',
',599,599,599,599,,,,,599,599,,,,,,,599,,599,599,599,33,33,33,33,33,33',
',,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33',
',,,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,,33,33,33,33,33,466',
',,,,,,,,,,,,,,,466,466,,33,,,33,,,33,33,,,33,,33,466,,466,33,466,466',
',466,466,,,,33,,,,,33,33,33,33,,33,33,33,33,,,,,33,33,,,,,,,33,,33,33',
'33,753,753,753,753,753,753,,,,753,753,,,,753,,753,753,753,753,753,753',
'753,,,,,,753,753,753,753,753,753,753,,,753,,,,,,753,753,753,753,753',
'753,753,753,753,753,753,753,,753,753,753,,753,753,753,753,753,465,,',
',,,,,,,,,,,,,465,465,,753,,,753,,,753,753,,,753,,753,465,,465,753,465',
'465,,465,465,,,,753,,,,,753,753,753,753,,753,753,753,753,,,,,753,753',
',,,,,,753,,753,753,753,579,579,579,579,579,579,,,,579,579,,,,579,,579',
'579,579,579,579,579,579,,,,,,579,579,579,579,579,579,579,,,579,,,,,',
'579,579,579,579,579,579,579,579,579,579,579,579,,579,579,579,,579,579',
'579,579,579,467,,,,,,,,,,,,,,,,467,467,,579,,,579,,,579,579,,,579,,579',
'467,,,579,467,467,,467,467,,,,579,,,,,579,579,579,579,,579,579,579,579',
',,,,579,579,,,,,,,579,,579,579,579,576,576,576,576,576,576,,,,576,576',
',,,576,,576,576,576,576,576,576,576,,,,,,576,576,576,576,576,576,576',
',,576,,,,,,576,576,576,576,576,576,576,576,576,576,576,576,,576,576',
'576,,576,576,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576,,,576,576,,,576',
',576,,,,576,,,,,,,,,576,,,,,576,576,576,576,,576,576,576,576,,,,,576',
'576,,,,,,,576,,576,576,576,937,937,937,937,937,937,,,,937,937,,,,937',
',937,937,937,937,937,937,937,,,,,,937,937,937,937,937,937,937,,,937',
',,,,,937,937,937,937,937,937,937,937,937,937,937,937,,937,937,937,,937',
'937,937,937,937,,,,,,,,,,,,,,,,,,,,937,,,937,,,937,937,,,937,,937,,',
',937,,,,,,,,,937,,,,,937,937,937,937,,937,937,937,937,,,,,937,937,,',
',,,,937,,937,937,937,841,841,841,841,841,841,,,,841,841,,,,841,,841',
'841,841,841,841,841,841,,,,,,841,841,841,841,841,841,841,,,841,,,,,',
'841,841,841,841,841,841,841,841,841,841,841,841,,841,841,841,,841,841',
'841,841,841,,,,,,,,,,,,,,,,,,,,841,,,841,,,841,841,,,841,,841,,,,841',
',,,,,,,,841,,,,,841,841,841,841,,841,841,841,841,,,,,841,841,,,,,,,841',
',841,841,841,743,743,743,743,743,743,,,,743,743,,,,743,,743,743,743',
'743,743,743,743,,,,,,743,743,743,743,743,743,743,,,743,,,,,,743,743',
'743,743,743,743,743,743,743,743,743,743,,743,743,743,,743,743,743,743',
'743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,743,,,743,,743,,,,743,,,,,,,',
',743,,,,,743,743,743,743,,743,743,743,743,,,,,743,743,,,,,,,743,,743',
'743,743,964,964,964,964,964,964,,,,964,964,,,,964,,964,964,964,964,964',
'964,964,,,,,,964,964,964,964,964,964,964,,,964,,,,,,964,964,964,964',
'964,964,964,964,964,964,964,964,,964,964,964,,964,964,964,964,964,,',
',,,,,,,,,,,,,,,,,964,,,964,,,964,964,,,964,,964,,,,964,,,,,,,,,964,',
',,,964,964,964,964,,964,964,964,964,,,,,964,964,,,,,,,964,,964,964,964',
'739,739,739,739,739,739,,,,739,739,,,,739,,739,739,739,739,739,739,739',
',,,,,739,739,739,739,739,739,739,,,739,,,,,,739,739,739,739,739,739',
'739,739,739,739,739,739,,739,739,739,,739,739,739,739,739,,,,,,,,,,',
',,,,,,,,,739,,,739,,,739,739,,,739,,739,,,,739,,,,,,,,,739,,,,,739,739',
'739,739,,739,739,739,739,,,,,739,739,,,,,,,739,,739,739,739,816,816',
'816,816,816,816,,,,816,816,,,,816,,816,816,816,816,816,816,816,,,,,',
'816,816,816,816,816,816,816,,,816,,,,,,816,816,816,816,816,816,816,816',
'816,816,816,816,,816,816,816,,816,816,816,816,816,,,,,,,,,,,,,,,,,,',
',816,,,816,,,816,816,,,816,,816,,,,816,,,,,,,,,816,,,,,816,816,816,816',
',816,816,816,816,,,,,816,816,,,,212,212,212,816,212,816,816,816,212',
'212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212',
'212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,,212,212,212,',
'212,212,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,,',
',,212,,,,,,,,,212,,,,,212,212,212,212,,212,212,212,212,,,,,212,212,',
',,213,213,213,212,213,212,212,212,213,213,,,,213,,213,213,213,213,213',
'213,213,,,,,,213,213,213,213,213,213,213,,,213,,,,,,,213,,,213,213,213',
'213,213,213,213,213,213,213,213,213,,213,213,213,213,213,,,,,,,,,,,',
',,,,,,,,213,,,213,,,213,213,,,213,,213,,213,,213,,,213,,,,,,213,,,,',
'213,213,213,213,,213,213,213,213,,,,,213,213,,,,762,762,762,213,762',
'213,213,213,762,762,,,,762,,762,762,762,762,762,762,762,,,,,,762,762',
'762,762,762,762,762,,,762,,,,,,,762,,,762,762,762,762,762,762,762,762',
',762,762,762,,762,762,762,762,762,,,,,,,,,,,,,,,,,,,,762,,,762,,,762',
'762,,,762,,,,,,762,,,,,,,,,762,,,,,762,762,762,762,,762,762,762,762',
',,,,762,762,,,,218,218,218,762,218,762,762,762,218,218,,,,218,,218,218',
'218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218',
',,218,218,218,218,218,218,218,218,,218,218,218,,218,218,218,218,218',
',,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,,218,,',
',,218,218,218,218,,218,218,218,218,,,,,218,218,,,,219,219,219,218,219',
'218,218,218,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219',
'219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219',
',219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219',
'219,,,219,,,,,,219,,,,,,,,,219,,,,,219,219,219,219,,219,219,219,219',
',,,,219,219,,,,220,220,220,219,220,219,219,219,220,220,,,,220,,220,220',
'220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220',
',,220,220,220,220,220,220,220,220,,220,220,220,,220,220,220,220,220',
',,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,,220,,',
',,220,220,220,220,,220,220,220,220,,,,,220,220,220,,,740,740,740,220',
'740,220,220,220,740,740,,,,740,,740,740,740,740,740,740,740,,,,,,740',
'740,740,740,740,740,740,,,740,,,,,,,740,,,740,740,740,740,740,740,740',
'740,,740,740,740,,740,740,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,',
',740,740,,,740,,,,,,740,,,,,,,,,740,,,,,740,740,740,740,,740,740,740',
'740,,,,,740,740,,,,734,734,734,740,734,740,740,740,734,734,,,,734,,734',
'734,734,734,734,734,734,,,,,,734,734,734,734,734,734,734,,,734,,,,,',
',734,,,734,734,734,734,734,734,734,734,,734,734,734,,734,734,734,734',
'734,,,,,,,,,,,,,,,,,,,,734,,,734,,,734,734,,,734,,,,,,734,,,,,,,,,734',
',,,,734,734,734,734,,734,734,734,734,,,,,734,734,,,,708,708,708,734',
'708,734,734,734,708,708,,,,708,,708,708,708,708,708,708,708,,,,,,708',
'708,708,708,708,708,708,,,708,,,,,,,708,,,708,708,708,708,708,708,708',
'708,,708,708,708,,708,708,708,708,708,,,,,,,,,,,,,,,,,,,,708,,,708,',
',708,708,,,708,,,,,,708,,,,,,,,,708,,,,,708,708,708,708,,708,708,708',
'708,,,,,708,708,,,,691,691,691,708,691,708,708,708,691,691,,,,691,,691',
'691,691,691,691,691,691,,,,,,691,691,691,691,691,691,691,,,691,,,,,',
',691,,,691,691,691,691,691,691,691,691,,691,691,691,,691,691,691,691',
'691,,,,,,,,,,,,,,,,,,,,691,,,691,,,691,691,,,691,,691,,,,691,,,,,,,',
',691,,,,,691,691,691,691,,691,691,691,691,,,,,691,691,,,,686,686,686',
'691,686,691,691,691,686,686,,,,686,,686,686,686,686,686,686,686,,,,',
',686,686,686,686,686,686,686,,,686,,,,,,,686,,,686,686,686,686,686,686',
'686,686,,686,686,686,,686,686,,,686,,,,,,,,,,,,,,,,,,,,686,,,686,,,686',
'686,,,686,,,,,,,,,,,,,,,,,,,,686,686,686,686,,686,686,686,686,,,,,686',
'686,,,,231,231,231,686,231,686,686,686,231,231,,,,231,,231,231,231,231',
'231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231',
'231,231,231,231,231,231,,231,231,231,,231,231,231,231,231,,,,,,,,,,',
',,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,,231,,,,,231,231',
'231,231,,231,231,231,231,,,,,231,231,,,,675,675,675,231,675,231,231',
'231,675,675,,,,675,,675,675,675,675,675,675,675,,,,,,675,675,675,675',
'675,675,675,,,675,,,,,,,675,,,675,675,675,675,675,675,675,675,,675,675',
'675,,675,675,,,675,,,,,,,,,,,,,,,,,,,,675,,,675,,,675,675,,,675,,,,',
',,,,,,,,,,,,,,,675,675,675,675,,675,675,675,675,,,,,675,675,,,,234,234',
'234,675,234,675,675,675,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234',
'234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234',
',,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234,234,,234',
'234,234,234,,,,,234,234,,,,235,235,235,234,235,234,234,234,235,235,',
',,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235',
',,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,,235',
'235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235',
',,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235,,,,236',
'236,236,235,236,235,235,235,236,236,,,,236,,236,236,236,236,236,236',
'236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236',
'236,236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,',
',236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236,236',
',236,236,236,236,,,,,236,236,,,,237,237,237,236,237,236,236,236,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,',
',,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237,',
',,238,238,238,237,238,237,237,237,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,',
',,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238',
'238,,238,238,238,238,,,,,238,238,,,,239,239,239,238,239,238,238,238',
'239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,240,240,240,239,240,239,239,239,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,',
',,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240',
'240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240,240,240',
'241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241',
'241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241',
',241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,',
',,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241',
',,,242,242,242,241,242,241,241,241,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,',
',,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242',
'242,,242,242,242,242,,,,,242,242,,,,243,243,243,242,243,242,242,242',
'243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243',
'243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243',
',243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,',
',,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243',
',,,244,244,244,243,244,243,243,243,244,244,,,,244,,244,244,244,244,244',
'244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244',
'244,244,244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,',
',,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244',
'244,,244,244,244,244,,,,,244,244,,,,245,245,245,244,245,244,244,244',
'245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245',
'245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245',
',245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,246,246,246,245,246,245,245,245,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,',
',,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246',
'246,,246,246,246,246,,,,,246,246,,,,247,247,247,246,247,246,246,246',
'247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247',
'247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247',
',247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,',
',,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',,,248,248,248,247,248,247,247,247,248,248,,,,248,,248,248,248,248,248',
'248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248',
'248,248,248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,',
',,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248',
'248,,248,248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248',
'249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,',
',,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249',
',,,250,250,250,249,250,249,249,249,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,',
',,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250',
'250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250',
'251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,252,252,252,251,252,251,251,251,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,',
',,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253',
'253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253',
',253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,',
',,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254',
'254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254',
'255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255',
'255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255',
',255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,',
',,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',,,260,260,260,255,260,255,255,255,260,260,,,,260,,260,260,260,260,260',
'260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260',
'260,260,260,260,260,,260,260,260,,260,260,260,260,260,,,,,,,,,,,,,,',
',,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,,260,,,,,260,260,260',
'260,,260,260,260,260,,,,,260,260,,,,671,671,671,260,671,260,260,260',
'671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671,671,671',
'671,671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671,671',
',671,671,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,',
',,,671,,,,,,,,,671,,,,,671,671,671,671,,671,671,671,671,,,,,671,671',
',,,668,668,668,671,668,671,671,671,668,668,,,,668,,668,668,668,668,668',
'668,668,,,,,,668,668,668,668,668,668,668,,,668,,,,,,,668,,,668,668,668',
'668,668,668,668,668,,668,668,668,,668,668,668,668,668,,,,,,,,,,,,,,',
',,,,,668,,,668,,,668,668,,,668,,,,,,668,,,,,,,,,668,,,,,668,668,668',
'668,,668,668,668,668,,,,,668,668,,,,267,267,267,668,267,668,668,668',
'267,267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267',
'267,267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,267,267,267',
'267,,267,267,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267',
',267,,267,,267,,,267,,,,,,267,,,,,267,267,267,267,,267,267,267,267,',
',,,267,267,,,,268,268,268,267,268,267,267,267,268,268,,,,268,,268,268',
'268,268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268,,,,,,,268',
',,268,268,268,268,268,268,268,268,268,268,268,268,,268,268,268,268,268',
',,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,268,,268,,268,,,268,,',
',,,268,,,,,268,268,268,268,,268,268,268,268,,,,,268,268,,,,276,276,276',
'268,276,268,268,268,276,276,,,,276,,276,276,276,276,276,276,276,,,,',
',276,276,276,276,276,276,276,,,276,,,,,,,276,,,276,276,276,276,276,276',
'276,276,276,276,276,276,,276,276,276,276,276,,,,,,,,,,,,,,,,,,,,276',
',,276,,,276,276,,,276,,276,,276,,276,,,276,,,,,,276,,,,,276,276,276',
'276,,276,276,276,276,,,,,276,276,276,,,644,644,644,276,644,276,276,276',
'644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644,644,644,644,644',
'644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644,644,,644,644,644',
',644,644,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,',
',,,644,,,,,,,,,644,,,,,644,644,644,644,,644,644,644,644,,,,,644,644',
',,,283,283,283,644,283,644,644,644,283,283,,,,283,,283,283,283,283,283',
'283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283',
'283,283,283,283,283,,283,283,283,,283,283,283,283,283,,,,,,,,,,,,,,',
',,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,,283,,,,,283,283,283',
'283,,283,283,283,283,,,,,283,283,,,,643,643,643,283,643,283,283,283',
'643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643,643,643,643',
'643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643,643,,643,643,643',
',643,643,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643,,',
',,,643,,,,,,,,,643,,,,,643,643,643,643,,643,643,643,643,,,,,643,643',
',,,285,285,285,643,285,643,643,643,285,285,,,,285,,285,285,285,285,285',
'285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285,,,285,285,285',
'285,285,285,285,285,,285,285,285,,285,285,285,285,285,,,,,,,,,,,,,,',
',,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,,,,285,,,,,285,285,285',
'285,,285,285,285,285,,,,,285,285,,,,288,288,288,285,288,285,285,285',
'288,288,,,,288,,288,288,288,288,288,288,288,,,,,,288,288,288,288,288',
'288,288,,,288,,,,,,,288,,,288,288,288,288,288,288,288,288,,288,288,288',
',288,288,288,288,288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,',
',,,288,,,,,,,,,288,,,,,288,288,288,288,,288,288,288,288,,,,,288,288',
',,,289,289,289,288,289,288,288,288,289,289,,,,289,,289,289,289,289,289',
'289,289,,,,,,289,289,289,289,289,289,289,,,289,,,,,,,289,,,289,289,289',
'289,289,289,289,289,,289,289,289,,289,289,289,289,289,,,,,,,,,,,,,,',
',,,,,289,,,289,,,289,289,,,289,,,,,,289,,,,,,,,,289,,,,,289,289,289',
'289,,289,289,289,289,,,,,289,289,,,,639,639,639,289,639,289,289,289',
'639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639,639,639,639',
'639,639,,,639,,,,,,,639,,,639,639,639,639,639,639,639,639,,639,639,639',
',639,639,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,,639,639,,,639,,',
',,,639,,,,,,,,,639,,,,,639,639,639,639,,639,639,639,639,,,,,639,639',
',,,,,,639,,639,639,639,294,294,294,294,294,,,,294,294,,,,294,,294,294',
'294,294,294,294,294,,,,,,294,294,294,294,294,294,294,,,294,,,,,,294',
'294,,294,294,294,294,294,294,294,294,294,,294,294,294,,294,294,294,294',
'294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,,294,,294,,,,294,,,,,,,',
',294,,,,,294,294,294,294,,294,294,294,294,,,,,294,294,,,,638,638,638',
'294,638,294,294,294,638,638,,,,638,,638,638,638,638,638,638,638,,,,',
',638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638',
'638,638,,638,638,638,,638,638,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638',
',,638,638,,,638,,,,,,638,,,,,,,,,638,,,,,638,638,638,638,,638,638,638',
'638,,,,,638,638,,,,637,637,637,638,637,638,638,638,637,637,,,,637,,637',
'637,637,637,637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,',
',637,,,637,637,637,637,637,637,637,637,637,637,637,637,,637,637,637',
'637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,,,637,,637,,,637',
',,,,,637,,,,,637,637,637,637,,637,637,637,637,,,,,637,637,,,,636,636',
'636,637,636,637,637,637,636,636,,,,636,,636,636,636,636,636,636,636',
',,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636',
'636,636,636,636,636,636,636,,636,636,636,636,636,,,,,,,,,,,,,,,,,,,',
'636,,,636,,,636,636,,,636,,636,,636,,636,,,636,,,,,,636,,,,,636,636',
'636,636,,636,636,636,636,,,,,636,636,,,,633,633,633,636,633,636,636',
'636,633,633,,,,633,,633,633,633,633,633,633,633,,,,,,633,633,633,633',
'633,633,633,,,633,,,,,,,633,,,633,633,633,633,633,633,633,633,,633,633',
'633,,633,633,633,633,633,,,,,,,,,,,,,,,,,,,,633,,,633,,,633,633,,,633',
',,,,,633,,,,,,,,,633,,,,,633,633,633,633,,633,633,633,633,,,,,633,633',
',,,,,,633,,633,633,633,632,632,632,632,632,,,,632,632,,,,632,,632,632',
'632,632,632,632,632,,,,,,632,632,632,632,632,632,632,,,632,,,,,,632',
'632,,632,632,632,632,632,632,632,632,632,,632,632,632,,632,632,632,632',
'632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,632,,,,632,,,,,,,',
',632,,,,,632,632,632,632,,632,632,632,632,,,,,632,632,,,,629,629,629',
'632,629,632,632,632,629,629,,,,629,,629,629,629,629,629,629,629,,,,',
',629,629,629,629,629,629,629,,,629,,,,,,,629,,,629,629,629,629,629,629',
'629,629,629,629,629,629,,629,629,629,629,629,,,,,,,,,,,,,,,,,,,,629',
',,629,,,629,629,,,629,,629,,629,,629,,,629,,,,,,629,,,,,629,629,629',
'629,,629,629,629,629,,,,,629,629,,,,302,302,302,629,302,629,629,629',
'302,302,,,,302,,302,302,302,302,302,302,302,,,,,,302,302,302,302,302',
'302,302,,,302,,,,,,,302,,,302,302,302,302,302,302,302,302,,302,302,302',
',302,302,,,302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,706,,706',
'706,706,706,706,,,,,,,,,706,,302,302,302,302,,302,302,302,302,,,,,302',
'302,,,,302,,706,302,,302,302,302,628,628,628,,628,706,706,,628,628,706',
',,628,,628,628,628,628,628,628,628,,,,,,628,628,628,628,628,628,628',
',,628,,,,,,,628,,,628,628,628,628,628,628,628,628,,628,628,628,,628',
'628,628,628,628,,,,,,,,,,,,,,,,,,,,628,,,628,,,628,628,,,628,,,,,,628',
',,,,,,,,628,,,,,628,628,628,628,,628,628,628,628,,,,,628,628,,,,627',
'627,627,628,627,628,628,628,627,627,,,,627,,627,627,627,627,627,627',
'627,,,,,,627,627,627,627,627,627,627,,,627,,,,,,,627,,,627,627,627,627',
'627,627,627,627,,627,627,627,,627,627,627,627,627,,,,,,,,,,,,,,,,,,',
',627,,,627,,,627,627,,,627,,627,,,,627,,,,,,,,,627,,,,,627,627,627,627',
',627,627,627,627,,,,,627,627,,,,595,595,595,627,595,627,627,627,595',
'595,,,,595,,595,595,595,595,595,595,595,,,,,,595,595,595,595,595,595',
'595,,,595,,,,,,,595,,,595,595,595,595,595,595,595,595,595,595,595,595',
',595,595,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595,,595',
',595,,595,,,595,,,,,,595,,,,,595,595,595,595,,595,595,595,595,,,,,595',
'595,,,,585,585,585,595,585,595,595,595,585,585,,,,585,,585,585,585,585',
'585,585,585,,,,,,585,585,585,585,585,585,585,,,585,,,,,,,585,,,585,585',
'585,585,585,585,585,585,585,585,585,585,,585,585,585,585,585,,,,,,,',
',,,,,,,,,,,,585,,,585,,,585,585,,,585,,585,,585,,585,,,585,,,,,,585',
',,,,585,585,585,585,,585,585,585,585,,,,,585,585,,,,584,584,584,585',
'584,585,585,585,584,584,,,,584,,584,584,584,584,584,584,584,,,,,,584',
'584,584,584,584,584,584,,,584,,,,,,,584,,,584,584,584,584,584,584,584',
'584,,584,584,584,,584,584,584,584,584,,,,,,,,,,,,,,,,,,,,584,,,584,',
',584,584,,,584,,584,,,,584,,,,,,,,,584,,,,,584,584,584,584,,584,584',
'584,584,,,,,584,584,,,,564,564,564,584,564,584,584,584,564,564,,,,564',
',564,564,564,564,564,564,564,,,,,,564,564,564,564,564,564,564,,,564',
',,,,,,564,,,564,564,564,564,564,564,564,564,,564,564,564,,564,564,564',
'564,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564,564,,,564,,,,,,564,,,,,,',
',,564,,,,,564,564,564,564,,564,564,564,564,,,,,564,564,,,,539,539,539',
'564,539,564,564,564,539,539,,,,539,,539,539,539,539,539,539,539,,,,',
',539,539,539,539,539,539,539,,,539,,,,,,,539,,,539,539,539,539,539,539',
'539,539,539,539,539,539,,539,539,539,539,539,,,,,,,,,,,,,,,,,,,,539',
',,539,,,539,539,,,539,,,,,,539,,,539,,,,,,539,,,,,539,539,539,539,,539',
'539,539,539,,,,,539,539,,,,319,319,319,539,319,539,539,539,319,319,',
',,319,,319,319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319',
',,319,,,,,,,319,,,319,319,319,319,319,319,319,319,,319,319,319,,319',
'319,,,319,,,,,,,,,,,,,,,,,,,,319,,,319,,,319,319,,,319,,,,,,,,,,,,,',
',,,,,,319,319,319,319,,319,319,319,319,,,,,319,319,,,,536,536,536,319',
'536,319,319,319,536,536,,,,536,,536,536,536,536,536,536,536,,,,,,536',
'536,536,536,536,536,536,,,536,,,,,,,536,,,536,536,536,536,536,536,536',
'536,536,536,536,536,,536,536,536,536,536,,,,,,,,,,,,,,,,,,,,536,,,536',
',,536,536,,,536,,536,,,,536,,,536,,,,,,536,,,,,536,536,536,536,,536',
'536,536,536,,,,,536,536,,,,530,530,530,536,530,536,536,536,530,530,',
',,530,,530,530,530,530,530,530,530,,,,,,530,530,530,530,530,530,530',
',,530,,,,,,,530,,,530,530,530,530,530,530,530,530,,530,530,530,,530',
'530,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530,,,,,,530',
',,,,,,,,530,,,,,530,530,530,530,,530,530,530,530,,,,,530,530,,,,525',
'525,525,530,525,530,530,530,525,525,,,,525,,525,525,525,525,525,525',
'525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525,525',
'525,525,525,525,,525,525,525,,525,525,525,525,525,,,,,,,,,,,,,,,,,,',
',525,,,525,,,525,525,,,525,,,,,,525,,,,,,,,,525,,,,,525,525,525,525',
',525,525,525,525,,,,,525,525,,,,524,524,524,525,524,525,525,525,524',
'524,,,,524,,524,524,524,524,524,524,524,,,,,,524,524,524,524,524,524',
'524,,,524,,,,,,,524,,,524,524,524,524,524,524,524,524,,524,524,524,',
'524,524,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,,',
',,524,,,,,,,,,524,,,,,524,524,524,524,,524,524,524,524,,,,,524,524,',
',,326,326,326,524,326,524,524,524,326,326,,,,326,,326,326,326,326,326',
'326,326,,,,,,326,326,326,326,326,326,326,,,326,,,,,,,326,,,326,326,326',
'326,326,326,326,326,,326,326,326,,326,326,326,326,326,,,,,,,,,,,,,,',
',,,,,326,,,326,,,326,326,,,326,,,,,,326,,,,,,,,,326,,,,,326,326,326',
'326,,326,326,326,326,,,,,326,326,,,,328,328,328,326,328,326,326,326',
'328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328,328',
'328,328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328',
',328,328,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,328,,328,328,,,328',
',,,,,328,,,,,,,,,328,,,,,328,328,328,328,,328,328,328,328,,,,,328,328',
',,,,,,328,,328,328,328,330,330,330,330,330,,,,330,330,,,,330,,330,330',
'330,330,330,330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,,330',
'330,,330,330,330,330,330,330,330,330,330,,330,330,330,,330,330,330,330',
'330,,,,,,,,,,,,,,,,,,,,330,,,330,,,330,330,,,330,,330,,,,330,,,,,,,',
',330,,,,,330,330,330,330,,330,330,330,330,,,,,330,330,,,,521,521,521',
'330,521,330,330,330,521,521,,,,521,,521,521,521,521,521,521,521,,,,',
',521,521,521,521,521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521',
'521,521,,521,521,521,,521,521,,,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521',
'521,,,521,,,,,,,,,,,,,,,,,,,,521,521,521,521,,521,521,521,521,,,,,521',
'521,,,,515,515,515,521,515,521,521,521,515,515,,,,515,,515,515,515,515',
'515,515,515,,,,,,515,515,515,515,515,515,515,,,515,,,,,,,515,,,515,515',
'515,515,515,515,515,515,515,515,515,515,,515,515,515,515,515,,,,,,,',
',,,,,,,,,,,,515,,,515,,,515,515,,,515,,515,,515,,515,,,515,,,,,,515',
',,,,515,515,515,515,,515,515,515,515,,,,,515,515,,,,513,513,513,515',
'513,515,515,515,513,513,,,,513,,513,513,513,513,513,513,513,,,,,,513',
'513,513,513,513,513,513,,,513,,,,,,,513,,,513,513,513,513,513,513,513',
'513,,513,513,513,,513,513,,,513,,,,,,,,,,,,,,,,,,,,513,,,513,,,513,513',
',,513,,,987,,987,987,987,987,987,,,,,,,,,987,,513,513,513,513,,513,513',
'513,513,,,,,513,513,,,,,,987,513,,513,513,513,505,505,505,505,505,987',
'987,,505,505,987,,,505,,505,505,505,505,505,505,505,,,,,,505,505,505',
'505,505,505,505,,,505,,,,,,505,505,505,505,505,505,505,505,505,505,505',
'505,,505,505,505,,505,505,505,505,505,,,,,,,,,,,,,,,,,,,,505,,,505,',
',505,505,,,505,,505,,,,505,,,,,,,,,505,,,,,505,505,505,505,,505,505',
'505,505,,,,,505,505,,,,,,505,505,,505,505,505,499,499,499,,499,,,,499',
'499,,,,499,,499,499,499,499,499,499,499,,,,,,499,499,499,499,499,499',
'499,,,499,,,,,,,499,,,499,499,499,499,499,499,499,499,,499,499,499,',
'499,499,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,,',
',,499,,,,,,,,,499,,,,,499,499,499,499,,499,499,499,499,,,,,499,499,',
',,497,497,497,499,497,499,499,499,497,497,,,,497,,497,497,497,497,497',
'497,497,,,,,,497,497,497,497,497,497,497,,,497,,,,,,,497,,,497,497,497',
'497,497,497,497,497,497,497,497,497,,497,497,497,497,497,,,,,,,,,,,',
',,,,,,,,497,,,497,,,497,497,,,497,,,,497,,497,,,497,,,,,,497,,,,,497',
'497,497,497,,497,497,497,497,,,,,497,497,,,,495,495,495,497,495,497',
'497,497,495,495,,,,495,,495,495,495,495,495,495,495,,,,,,495,495,495',
'495,495,495,495,,,495,,,,,,,495,,,495,495,495,495,495,495,495,495,495',
'495,495,495,,495,495,495,495,495,,,,,,,,,,,,,,,,,,,,495,,,495,,,495',
'495,,,495,,495,,495,,495,,,495,,,,,,495,,,,,495,495,495,495,,495,495',
'495,495,,,,,495,495,,,,981,981,981,495,981,495,495,495,981,981,,,,981',
',981,981,981,981,981,981,981,,,,,,981,981,981,981,981,981,981,,,981',
',,,,,,981,,,981,981,981,981,981,981,981,981,981,981,981,981,,981,981',
'981,981,981,,,,,,,,,,,,,,,,,,,,981,,,981,,,981,981,,,981,,981,,981,',
'981,,,981,,,,,,981,,,,,981,981,981,981,,981,981,981,981,,,,,981,981',
',,,345,345,345,981,345,981,981,981,345,345,,,,345,,345,345,345,345,345',
'345,345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,,345,,,345,345,345',
'345,345,345,345,345,,345,345,345,,345,345,345,345,345,,,,,,,,,,,,,,',
',,,,,345,,,345,,,345,345,,,345,,,,,,345,,,,,,,,,345,,,,,345,345,345',
'345,,345,345,345,345,,,,,345,345,,,,346,346,346,345,346,345,345,345',
'346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346,346,346,346',
'346,346,,,346,,,,,,,346,,,346,346,346,346,346,346,346,346,,346,346,346',
',346,346,346,346,346,,,,,,,,,,,,,,,,,,,,346,,,346,,,346,346,,,346,,',
',,,346,,,,,,,,,346,,,,,346,346,346,346,,346,346,346,346,,,,,346,346',
',,,456,456,456,346,456,346,346,346,456,456,,,,456,,456,456,456,456,456',
'456,456,,,,,,456,456,456,456,456,456,456,,,456,,,,,,,456,,,456,456,456',
'456,456,456,456,456,,456,456,456,,456,456,456,456,456,,,,,,,,,,,,,,',
',,,,,456,,,456,,,456,456,,,456,,,,,,456,,,,,,,,,456,,,,,456,456,456',
'456,,456,456,456,456,,,,,456,456,,,,455,455,455,456,455,456,456,456',
'455,455,,,,455,,455,455,455,455,455,455,455,,,,,,455,455,455,455,455',
'455,455,,,455,,,,,,,455,,,455,455,455,455,455,455,455,455,,455,455,455',
',455,455,455,455,455,,,,,,,,,,,,,,,,,,,,455,,,455,,,455,455,,,455,,',
',,,455,,,,,,,,,455,,,,,455,455,455,455,,455,455,455,455,,,,,455,455',
',,,454,454,454,455,454,455,455,455,454,454,,,,454,,454,454,454,454,454',
'454,454,,,,,,454,454,454,454,454,454,454,,,454,,,,,,,454,,,454,454,454',
'454,454,454,454,454,,454,454,454,,454,454,454,454,454,,,,,,,,,,,,,,',
',,,,,454,,,454,,,454,454,,,454,,,,,,454,,,,,,,,,454,,,,,454,454,454',
'454,,454,454,454,454,,,,,454,454,,,,452,452,452,454,452,454,454,454',
'452,452,,,,452,,452,452,452,452,452,452,452,,,,,,452,452,452,452,452',
'452,452,,,452,,,,,,,452,,,452,452,452,452,452,452,452,452,452,452,452',
'452,,452,452,452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452,,,452,452,,,452',
',452,,452,,452,,,452,,,,,,452,,,,,452,452,452,452,,452,452,452,452,',
',,,452,452,,,,409,409,409,452,409,452,452,452,409,409,,,,409,,409,409',
'409,409,409,409,409,,,,,,409,409,409,409,409,409,409,,,409,,,,,,,409',
',,409,409,409,409,409,409,409,409,,409,409,409,,409,409,409,409,409',
',,,,,,,,,,,,,,,,,,,409,,,409,,,409,409,,,409,,,,,,409,,,,,,,,,409,,',
',,409,409,409,409,,409,409,409,409,,,,,409,409,,,,381,381,381,409,381',
'409,409,409,381,381,,,,381,,381,381,381,381,381,381,381,,,,,,381,381',
'381,381,381,381,381,,,381,,,,,,,381,,,381,381,381,381,381,381,381,381',
',381,381,381,,381,381,381,381,381,,,,,,,,,,,,,,,,,,,,381,,,381,,,381',
'381,,,381,,,,,,381,,,,,,,,,381,,,,,381,381,381,381,,381,381,381,381',
',,,,381,381,,,,365,365,365,381,365,381,381,381,365,365,,,,365,,365,365',
'365,365,365,365,365,,,,,,365,365,365,365,365,365,365,,,365,,,,,,,365',
',,365,365,365,365,365,365,365,365,,365,365,365,,365,365,365,365,365',
',,,,,,,,,,,,,,,,,,,365,,,365,,,365,365,,,365,,,,,,365,,,,,,,,,365,,',
',,365,365,365,365,,365,365,365,365,,,,,365,365,,,,,,,365,,365,365,365',
'5,5,5,5,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5',
'5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5',
',,5,,5,,,,5,,,,,,,,,5,,,,,5,5,5,5,,5,5,5,5,,,,,5,5,,,,933,933,933,5',
'933,5,5,5,933,933,,,,933,,933,933,933,933,933,933,933,,,,,,933,933,933',
'933,933,933,933,,,933,,,,,,,933,,,933,933,933,933,933,933,933,933,,933',
'933,933,,933,933,,,933,,,,,,,,,,,,,,,,,,,,933,,,933,,,933,933,,,933',
',,,,,,,,,,,,,,,,,,,933,933,933,933,,933,933,933,933,,,,,933,933,,,,885',
'885,885,933,885,933,933,933,885,885,,,,885,,885,885,885,885,885,885',
'885,,,,,,885,885,885,885,885,885,885,,,885,,,,,,,885,,,885,885,885,885',
'885,885,885,885,,885,885,885,,885,885,,,885,,,,,,,,,,,,,,,,,,,,885,',
',885,,,885,885,,,885,,,,,,,,,,,,,,,,,,,,885,885,885,885,,885,885,885',
'885,,,,,885,885,,,,875,875,875,885,875,885,885,885,875,875,,,,875,,875',
'875,875,875,875,875,875,,,,,,875,875,875,875,875,875,875,,,875,,,,,',
',875,,,875,875,875,875,875,875,875,875,,875,875,875,,875,875,,,875,',
',,,,,,,,,,,,,,,,,,875,,,875,,,875,875,,,875,,,,,,,,,,,,,,,,,,,,875,875',
'875,875,,875,875,875,875,,,,,875,875,,,,863,863,863,875,863,875,875',
'875,863,863,,,,863,,863,863,863,863,863,863,863,,,,,,863,863,863,863',
'863,863,863,,,863,,,,,,,863,,,863,863,863,863,863,863,863,863,,863,863',
'863,,863,863,863,863,863,,,,,,,,,,,,,,,,,,,,863,,,863,,,863,863,,,863',
',,,,,863,,,,,,,,,863,,,,,863,863,863,863,,863,863,863,863,,,,,863,863',
',,,862,862,862,863,862,863,863,863,862,862,,,,862,,862,862,862,862,862',
'862,862,,,,,,862,862,862,862,862,862,862,,,862,,,,,,,862,,,862,862,862',
'862,862,862,862,862,862,862,862,862,,862,862,862,862,862,,,,,,,,,,,',
',,,,,,,,862,,,862,,,862,862,,,862,,,,862,,862,,,862,,,,,,862,,,,,862',
'862,862,862,,862,862,862,862,,,,,862,862,,,,20,20,20,862,20,862,862',
'862,20,20,,,,20,,20,20,20,20,20,20,20,,,,,,20,20,20,20,20,20,20,,,20',
',,,,,,20,,,20,20,20,20,20,20,20,20,,20,20,20,,20,20,20,20,20,,,,,,,',
',,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,,20,,,,,20,20,20,20',
',20,20,20,20,,,,,20,20,,,,844,844,844,20,844,20,20,20,844,844,,,,844',
',844,844,844,844,844,844,844,,,,,,844,844,844,844,844,844,844,,,844',
',,,,,,844,,,844,844,844,844,844,844,844,844,,844,844,844,,844,844,844',
'844,844,,,,,,,,,,,,,,,,,,,,844,,,844,,,844,844,,,844,,844,,,,844,,,',
',,,,,844,,,,,844,844,844,844,,844,844,844,844,,,,,844,844,,,,29,29,29',
'844,29,844,844,844,29,29,,,,29,,29,29,29,29,29,29,29,,,,,,29,29,29,29',
'29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29,29,29,,29,29',
'29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29,,29,,,29,,',
',,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,30,30,30,29,30,29,29',
'29,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30',
',,,,,,30,,,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,',
',,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30',
'30,30,,30,30,30,30,,,,,30,30,,,,31,31,31,30,31,30,30,30,31,31,,,,31',
',31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31',
'31,31,31,31,31,31,31,31,31,31,,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,31',
',,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31,,,,,31,31,31,31,,31,31,31',
'31,,,,,31,31,,,,34,34,34,31,34,31,31,31,34,34,,,,34,,34,34,34,34,34',
'34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34',
'34,,34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34',
',,,,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,35,35,35,34,35',
'34,34,34,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35',
',,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35,35,,,35,,,,,,',
',,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,1000,,1000,1000,1000,1000,1000,',
',,,,,,,1000,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,1000,35,,35,35',
'35,839,839,839,,839,1000,1000,,839,839,1000,,,839,,839,839,839,839,839',
'839,839,,,,,,839,839,839,839,839,839,839,,,839,,,,,,,839,,,839,839,839',
'839,839,839,839,839,,839,839,839,,839,839,839,839,839,,,,,,,,,,,,,,',
',,,,,839,,,839,,,839,839,,,839,,,,,,839,,,,,,,,,839,,,,,839,839,839',
'839,,839,839,839,839,,,,,839,839,,,,42,42,42,839,42,839,839,839,42,42',
',,,42,,42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42',
',,42,42,42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,',
',,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42',
'42,,,,,42,42,,,,43,43,43,42,43,42,42,42,43,43,,,,43,,43,43,43,43,43',
'43,43,,,,,,43,43,43,43,43,43,43,,,43,,,,,,,43,,,43,43,43,43,43,43,43',
'43,,43,43,43,,43,43,43,43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43',
',,,,,43,,,,,,,,,43,,,,,43,43,43,43,,43,43,43,43,,,,,43,43,,,,45,45,45',
'43,45,43,43,43,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45',
'45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,45,45',
'45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,,45,,,,,45',
'45,45,45,,45,45,45,45,,,,,45,45,,,,788,788,788,45,788,45,45,45,788,788',
',,,788,,788,788,788,788,788,788,788,,,,,,788,788,788,788,788,788,788',
',,788,,,,,,,788,,,788,788,788,788,788,788,788,788,,788,788,788,,788',
'788,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,,,,,,788',
',,,,,,,,788,,,,,788,788,788,788,,788,788,788,788,,,,,788,788,,,,786',
'786,786,788,786,788,788,788,786,786,,,,786,,786,786,786,786,786,786',
'786,,,,,,786,786,786,786,786,786,786,,,786,,,,,,,786,,,786,786,786,786',
'786,786,786,786,,786,786,786,,786,786,786,786,786,,,,,,,,,,,,,,,,,,',
',786,,,786,,,786,786,,,786,,,,,,786,,,,,,,,,786,,,,,786,786,786,786',
',786,786,786,786,,,,,786,786,,,,60,60,60,786,60,786,786,786,60,60,,',
',60,,60,60,60,60,60,60,60,,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,',
'60,60,60,60,60,60,60,60,60,60,60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,',
',,,60,,,60,,,60,60,,,60,,60,,,,60,,,60,,,,,,60,,,,,60,60,60,60,,60,60',
'60,60,,,,,60,60,,,,61,61,61,60,61,60,60,60,61,61,,,,61,,61,61,61,61',
'61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61',
'61,61,61,61,61,61,,61,61,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61',
',,61,,,,,,61,,,61,,,,,,61,,,,,61,61,61,61,,61,61,61,61,,,,,61,61,,,',
'785,785,785,61,785,61,61,61,785,785,,,,785,,785,785,785,785,785,785',
'785,,,,,,785,785,785,785,785,785,785,,,785,,,,,,,785,,,785,785,785,785',
'785,785,785,785,,785,785,785,,785,785,785,785,785,,,,,,,,,,,,,,,,,,',
',785,,,785,,,785,785,,,785,,,,,,785,,,,,,,,,785,,,,,785,785,785,785',
',785,785,785,785,,,,,785,785,,,,64,64,64,785,64,785,785,785,64,64,,',
',64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,',
'64,64,64,64,64,64,64,64,,64,64,64,,64,64,64,64,64,,,,,,,,,,,,,,,,,,',
',64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,,,64,64,64,64,,64,64,64,64',
',,,,64,64,,,,65,65,65,64,65,64,64,64,65,65,,,,65,,65,65,65,65,65,65',
'65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65,65,65,65,65,65',
',65,65,65,,65,65,65,65,65,,,,,,,,,,,,,,,,,,,,65,,,65,,,65,65,,,65,,',
',,,65,,,,,,,,,65,,,,,65,65,65,65,,65,65,65,65,,,,,65,65,,,,68,68,68',
'65,68,65,65,65,68,68,,,,68,,68,68,68,68,68,68,68,,,,,,68,68,68,68,68',
'68,68,,,68,,,,,,,68,,,68,68,68,68,68,68,68,68,,68,68,68,,68,68,68,68',
'68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68,,,68,,,,,,68,,,,,,,,,68,,,,,68',
'68,68,68,,68,68,68,68,,,,,68,68,68,,,,,68,68,,68,68,68,69,69,69,,69',
',,,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69,69,69,69,69,,,69',
',,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69,,,69,,,,,,,,,,,',
',,,,,,,,69,,,69,,,69,69,,,69,,69,,,,,,,,,,,,,,,,,,69,69,69,69,,69,69',
'69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,,,,70,,70,70,70,70',
'70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70',
'70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,70,,,70,,,70,,,70,70,,,70',
',,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,,,,71,71,71,70',
'71,70,70,70,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71',
'71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,71,,,',
',,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,,,,,,,,,,,,,,,,,,,71,71,71,71',
',71,71,71,71,,,,,71,71,,,,784,784,784,71,784,71,71,71,784,784,,,,784',
',784,784,784,784,784,784,784,,,,,,784,784,784,784,784,784,784,,,784',
',,,,,,784,,,784,784,784,784,784,784,784,784,,784,784,784,,784,784,784',
'784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784,,,784,,,,,,784,,,,,,',
',,784,,,,,784,784,784,784,,784,784,784,784,,,,,784,784,,,,783,783,783',
'784,783,784,784,784,783,783,,,,783,,783,783,783,783,783,783,783,,,,',
',783,783,783,783,783,783,783,,,783,,,,,,,783,,,783,783,783,783,783,783',
'783,783,,783,783,783,,783,783,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783',
',,783,783,,,783,,,,,,783,,,,,,,,,783,,,,,783,783,783,783,,783,783,783',
'783,,,,,783,783,,,,770,770,770,783,770,783,783,783,770,770,,,,770,,770',
'770,770,770,770,770,770,,,,,,770,770,770,770,770,770,770,,,770,,,,,',
',770,,,770,770,770,770,770,770,770,770,,770,770,770,,770,770,770,770',
'770,,,,,,,,,,,,,,,,,,,,770,,,770,,,770,770,,,770,,,,,,770,,,,,,,,,770',
',,,,770,770,770,770,,770,770,770,770,,,,,770,770,,,,,,,770,,770,770',
'770,112,112,112,112,112,,,,112,112,,,,112,,112,112,112,112,112,112,112',
',,,,,112,112,112,112,112,112,112,,,112,,,,,,112,112,112,112,112,112',
'112,112,112,112,112,112,,112,112,112,,112,112,112,112,112,,,,,,,,,,',
',,,,,,,,,112,,,112,,,112,112,,,112,,112,,,,112,,,,,,,,,112,,,,,112,112',
'112,112,,112,112,112,112,,,,,112,112,,,,,,112,112,,112,112,112,117,117',
'117,,117,,,,117,117,,,,117,,117,117,117,117,117,117,117,,,,,,117,117',
'117,117,117,117,117,,,117,,,,,,,117,,,117,117,117,117,117,117,117,117',
',117,117,117,,117,117,117,117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117',
'117,,,117,,,,,,117,,,,,,,,,117,,,,,117,117,117,117,,117,117,117,117',
',,,,117,117,,,,118,118,118,117,118,117,117,117,118,118,,,,118,,118,118',
'118,118,118,118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118',
',,118,118,118,118,118,118,118,118,,118,118,118,,118,118,118,118,118',
',,,,,,,,,,,,,,,,,,,118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118,,',
',,118,118,118,118,,118,118,118,118,,,,,118,118,,,,119,119,119,118,119',
'118,118,118,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119',
'119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119',
',119,119,119,,119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119',
'119,,,119,,,,,,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119,119',
',,,,119,119,,,,120,120,120,119,120,119,119,119,120,120,,,,120,,120,120',
'120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,,120',
',,120,120,120,120,120,120,120,120,,120,120,120,,120,120,120,120,120',
',,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,,120,,',
',,120,120,120,120,,120,120,120,120,,,,,120,120,,,,,,,120,,120,120,120',
'121,121,121,121,121,,,,121,121,,,,121,,121,121,121,121,121,121,121,',
',,,,121,121,121,121,121,121,121,,,121,,,,,,121,121,,121,121,121,121',
'121,121,121,121,121,,121,121,121,,121,121,121,121,121,,,,,,,,,,,,,,',
',,,,,121,,,121,,,121,121,,,121,,121,,,,121,,,,,,,,,121,,,,,121,121,121',
'121,,121,121,121,121,,,,,121,121,,,,208,208,208,121,208,121,121,121',
'208,208,,,,208,,208,208,208,208,208,208,208,,,,,,208,208,208,208,208',
'208,208,,,208,,,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208',
',208,208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,208',
',,,208,,,,,,,,,208,,,,,208,208,208,208,,208,208,208,208,,,,,208,208',
',,,209,209,209,208,209,208,208,208,209,209,,,,209,,209,209,209,209,209',
'209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209',
'209,209,209,209,209,,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,',
',,,,,209,,,209,,,209,209,,,209,,209,,,,209,,,,,,,,,209,,,,,209,209,209',
'209,,209,209,209,209,,,,,209,209,,,,210,210,210,209,210,209,209,209',
'210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210',
'210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210',
',210,210,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,',
',,,210,,,,,,,,,210,,,,,210,210,210,210,,210,210,210,210,,,,,210,210',
',,,211,211,211,210,211,210,210,210,211,211,,,,211,,211,211,211,211,211',
'211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211',
'211,211,211,211,211,,211,211,211,,211,211,211,211,211,,,,,,,,,,,,,,',
',,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,,211,,,,,211,211,211',
'211,,211,211,211,211,,,,,211,211,,,,,,,211,,211,211,211,624,624,624',
'624,624,624,624,624,624,624,624,624,624,624,624,624,624,624,624,624',
'624,624,624,624,,,,624,624,624,624,624,624,624,624,624,624,,,,,,624',
'624,624,624,624,624,624,624,624,,,624,,,,,,,,624,624,,624,624,624,624',
'624,624,624,,,624,624,,,,624,624,624,624,,,,,,,,,,,,,,624,624,,624,624',
'624,624,624,624,624,624,624,624,624,624,,,624,624,,,,,,,,,,,,,,624,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9',
',,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9',
'9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,8,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8,',
',,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8',
'8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,400',
'400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400,400',
'400,400,400,400,400,400,,,,400,400,400,400,400,400,400,400,400,400,',
',,,,400,400,400,400,400,400,400,400,400,,,400,,,,,,,,400,400,,400,400',
'400,400,400,400,400,,,400,400,,,,400,400,400,400,,,,,,,,,,,,,,400,400',
',400,400,400,400,400,400,400,400,400,400,400,400,,,400,400,,,,,,,,,',
',,,,400,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72',
'72,72,72,72,,,,72,72,72,72,72,72,72,72,72,72,,,,,,72,72,72,72,72,72',
'72,72,72,72,72,72,,72,,,,,,72,72,,72,72,72,72,72,72,72,,,72,72,,,,72',
'72,72,72,,,,,,72,,,,,,,,72,72,,72,72,72,72,72,72,72,72,72,72,72,72,',
',72,746,746,746,746,746,746,746,746,746,746,746,746,746,746,746,746',
'746,746,746,746,746,746,746,746,,,,746,746,746,746,746,746,746,746,746',
'746,,,,,,746,746,746,746,746,746,746,746,746,,,746,,,,,,,,746,746,,746',
'746,746,746,746,746,746,,,746,746,,,,746,746,746,746,,,,,,,,,,,,,,746',
'746,,746,746,746,746,746,746,746,746,746,746,746,746,516,516,746,,516',
',,,,,,,516,516,,516,516,516,516,516,516,516,,,516,516,,,,516,516,516',
'516,,,,,,516,,,,,,,,516,516,,516,516,516,516,516,516,516,516,516,516',
'516,516,215,215,516,,215,,,,,,,,215,215,,215,215,215,215,215,215,215',
',,215,215,,,,215,215,215,215,,,,,,215,,,,,,,,215,215,,215,215,215,215',
'215,215,215,215,215,215,215,215,517,517,215,,517,,,,,,,,517,517,,517',
'517,517,517,517,517,517,,,517,517,,,,517,517,517,517,,,,,,517,,,,,,',
',517,517,,517,517,517,517,517,517,517,517,517,517,517,517,983,983,517',
',983,,,,,,,,983,983,,983,983,983,983,983,983,983,,,983,983,,,,983,983',
'983,983,,,,,,983,,,,,,,,983,983,,983,983,983,983,983,983,983,983,983',
'983,983,983,593,593,983,,593,,,,,,,,593,593,,593,593,593,593,593,593',
'593,,,593,593,,,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593,593,593',
'593,593,593,593,593,593,593,593,593,978,978,593,,978,,,,,,,,978,978',
',978,978,978,978,978,978,978,,,978,978,,,,978,978,978,978,,,,,,978,',
',,,,,,978,978,,978,978,978,978,978,978,978,978,978,978,978,978,263,263',
'978,,263,,,,,,,,263,263,,263,263,263,263,263,263,263,,,263,263,,,,263',
'263,263,263,,,,,,,,,,,,,,263,263,,263,263,263,263,263,263,263,263,263',
'263,263,263,587,587,263,,587,,,,,,,,587,587,,587,587,587,587,587,587',
'587,,,587,587,,,,587,587,587,587,,,,,,587,,,,,,,,587,587,,587,587,587',
'587,587,587,587,587,587,587,587,587,630,630,587,,630,,,,,,,,630,630',
',630,630,630,630,630,630,630,,,630,630,,,,630,630,630,630,,,,,,630,',
',,,,,,630,630,,630,630,630,630,630,630,630,630,630,630,630,630,982,982',
'630,,982,,,,,,,,982,982,,982,982,982,982,982,982,982,,,982,982,,,,982',
'982,982,982,,,,,,982,,,,,,,,982,982,,982,982,982,982,982,982,982,982',
'982,982,982,982,594,594,982,,594,,,,,,,,594,594,,594,594,594,594,594',
'594,594,,,594,594,,,,594,594,594,594,,,,,,594,,,,,,,,594,594,,594,594',
'594,594,594,594,594,594,594,594,594,594,586,586,594,,586,,,,,,,,586',
'586,,586,586,586,586,586,586,586,,,586,586,,,,586,586,586,586,,,,,,586',
',,,,,,,586,586,,586,586,586,586,586,586,586,586,586,586,586,586,214',
'214,586,,214,,,,,,,,214,214,,214,214,214,214,214,214,214,,,214,214,',
',,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214,214,214',
'214,214,214,214,214,451,451,214,,451,,,,,,,,451,451,,451,451,451,451',
'451,451,451,,,451,451,,,,451,451,451,451,,,,,,451,,,,,,,,451,451,,451',
'451,451,451,451,451,451,451,451,451,451,451,450,450,451,,450,,,,,,,',
'450,450,,450,450,450,450,450,450,450,,,450,450,,,,450,450,450,450,,',
',,,450,,,,,,,,450,450,,450,450,450,450,450,450,450,450,450,450,450,450',
'526,526,450,,526,,,,,,,,526,526,,526,526,526,526,526,526,526,,,526,526',
',,,526,526,526,526,,,,,,526,,,,,,,,526,526,,526,526,526,526,526,526',
'526,526,526,526,526,526,527,527,526,,527,,,,,,,,527,527,,527,527,527',
'527,527,527,527,,,527,527,,,,527,527,527,527,,,,,,527,,,,,,,,527,527',
',527,527,527,527,527,527,527,527,527,527,527,527,631,631,527,,631,,',
',,,,,631,631,,631,631,631,631,631,631,631,,,631,631,,,,631,631,631,631',
',,,,,631,,,,,,,,631,631,,631,631,631,631,631,631,631,631,631,631,631',
'631,,704,631,704,704,704,704,704,,702,,702,702,702,702,702,704,,,,,',
',,702,,544,,544,544,544,544,544,,,,,,704,,,544,,,,,702,704,704,704,704',
',,,704,702,702,702,702,,,,702,544,,745,,745,745,745,745,745,544,544',
'544,544,,,,544,745,,744,,744,744,744,744,744,,998,,998,998,998,998,998',
'744,,,,,745,,,998,,,,,,745,745,745,745,,,,745,744,,,,,,,,998,744,744',
'744,744,,,,744,998,998,998,998,,,1002,998,1002,1002,1002,1002,1002,1004',
',1004,1004,1004,1004,1004,,1002,,,,,,892,1004,892,892,892,892,892,1027',
',1027,1027,1027,1027,1027,,892,1002,,,,,,1027,1004,,,,1002,1002,,,,1002',
',1004,1004,,892,,1004,,,,,1027,,892,892,892,892,,,,892,,1027,1027,,',
'341,1027,341,341,341,341,341,894,,894,894,894,894,894,896,341,896,896',
'896,896,896,898,894,898,898,898,898,898,,896,,,,,,,898,341,341,,,,,',
'894,,341,341,341,341,,896,,341,,894,894,,898,,894,,896,896,,,,896,,898',
'898,,,927,898,927,927,927,927,927,,,,,,,,,927,,,,,,,,,,,,,,,,,,,,,,927',
',,,,,,,,927,927,927,927,,,,927' ]
        racc_action_check = arr = ::Array.new(25042, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2784,   964,   nil,   238,   nil, 17439,  1384,   809, 23114, 22986,
   765,   nil,   728,   675,   522,   702,   736,   485,   nil,   -70,
 18225,  2504,   682,   nil,   666,   nil,   171,  1669,  1421, 18487,
 18618, 18749,   nil,  4464, 18880, 19011,   nil,   563,   725,   263,
   555,   248, 19281, 19412,   527, 19543,   432,   796,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1309,   nil,    93,
 19936, 20067,    -8,   nil, 20329, 20460,   nil,   nil, 20591, 20730,
 20861, 20992, 23370,   nil,   nil,   nil,   nil,   nil,   825,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   470,   nil,   nil,   358,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   481,   nil, 21524,   nil,   nil,   nil,   nil, 21663, 21794, 21925,
 22056, 22195,  3344,   nil,   472,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   316,   nil,  3484, 22326, 22457,
 22588, 22719,  5855,  5986, 24276, 23605,   nil,   nil,  6248,  6379,
  6510,   nil,   nil,   -32,   303,   331,   138,   132,  1018,  1070,
   nil,  7296,  3764,  1042,  7558,  7689,  7820,  7951,  8082,  8213,
  8344,  8475,  8606,  8737,  8868,  8999,  9130,  9261,  9392,  9523,
  9654,  9785,  9916, 10047, 10178, 10309,   nil,   nil,   nil,   nil,
 10440,   nil,   nil, 23910,   nil,   nil,  1031, 10833, 10964,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 11095,   nil,  2084,   nil,
   953,   939,   nil, 11357,   979, 11619,   nil,   nil, 11750, 11881,
   nil,   nil,   178,   nil, 12151,  1247,   978,   966,  3624,  1006,
  1052,  1013, 13076,  4044,   865,  1036,  1007,  1131,  1003,   nil,
  1100,  1060,   174,   nil,   nil,   nil,     3,   281,   270, 14132,
   nil,   650,   439,   835,   nil,   442, 14787,   nil, 14918,  1944,
 15057,   405,   nil,   137,   144,   610,   603,   329,   653,   nil,
   nil, 24864,    17,   -10,    -9, 16252, 16383,    99,  1047,   838,
    26,    61,   637,   936,     7,   969,   nil,   nil,   792,   583,
    44,   nil,   597,   nil,   912, 17300,   nil,   nil,   nil,   561,
   560,   556,   527,   490,   338,   -20,   665,   635,   nil,   668,
   nil, 17169,   nil,   408,   460,   505,   501,   466,   -37,   -38,
   397,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   948,
 23242,   nil,   nil,   nil,   nil,   944,   nil,   nil,   921, 17038,
   920,   nil,   nil,   908,   nil,   584,   156,  1005,   nil,   nil,
  1804,   nil,   nil,   nil,   nil,   nil,  1944,   917,   nil,   909,
   893,   259,   219,  1098,   nil,   nil,   nil,   580,   692,   897,
   nil,   nil,   962,  1533,   nil,   nil,   nil,   -12,   nil,   894,
 24398, 24337, 16907,   333, 16776, 16645, 16514,  2924,  3064,  1049,
   894,   818,   808,   788,   778,  4604,  4464,  4744,  3204,  3344,
  3484,  3624,  3764,  3904,  1292,   919,  4044,  4184,  2224,  4324,
   803,   nil,  1230,   nil,   nil,   nil,   nil,   659,   nil,   673,
   nil,   738,   616,   nil,   nil, 15990,   nil, 15859,   nil, 15728,
   nil,   378,   nil,   nil,   nil, 15589,  1438,  2224,   567,   551,
   nil,   nil,   538, 15450,   465, 15319, 23544, 23666,   737,   466,
   nil, 15188,   383,   nil, 14656, 14525, 24459, 24520,  1618,  2644,
 14394,   448,   438,  1413,   349,   nil, 14263,   nil,   nil, 14001,
   nil,   nil,   nil,   nil, 24668,   nil,   243,   231,   nil,   206,
   204,   169,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   135,  1313,   nil,   nil, 13870,   nil,   nil,   nil,   208,   nil,
   nil,   nil,   186,   nil,   nil,    50,  4884,    53,   nil,  4744,
    36,    55,    17,  1186, 13739, 13608, 24215, 23971,   -18,   nil,
   nil,   966,   nil, 23788, 24154, 13477,   nil,   nil,   165,  4324,
  1095,   nil,   -16,   nil,   nil,   nil,   789,   nil,   nil,   nil,
  1064,   nil,   nil,   390,   nil,   393,   nil,   nil,  1029,   nil,
  1024,   nil,   nil,   nil, 22858,   nil,  1015, 13346, 13215, 12945,
 24032, 24581, 12814, 12675,   729,  1034, 12544, 12413, 12282, 12012,
   869,   nil,   nil, 11488, 11226,   981,   nil,   nil,   nil,   332,
    90,   824,     0,   971,   970,   nil,   123,  1076,   -15,  1004,
   nil,   nil,   110,   nil,   nil,   985,   nil,  1032, 10702,   nil,
   nil, 10571,   nil,  1017,   -85,  7427,   999,   nil,  1003,   168,
   149,  1055,   163,  1066,  1064,  1021,  7165,   nil,  1091,    19,
  1146,  7034,   nil,  1032,   nil,   247,    21,  1049,  1022,   nil,
   nil,   429, 24651,   nil, 24643,   nil, 13123,   nil,  6903,   nil,
  1531,   nil,  1060,   354,  1067,   nil,   nil,   nil,   nil,   459,
   nil,  1185,   nil,   nil,   nil,   nil,  1193,   nil,     6,  -115,
    11,    39,    93,    27,  6772,   251,   934,   nil,   136,  5584,
  6641,   nil,   295,  5304, 24724, 24707, 23483,   nil,   nil,   nil,
   nil,   nil,   nil,  4604,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   290,  6117,   313,   226,   186,   248,   138,   nil,  2784,
 21385,   nil,   366,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil, 21254, 21123, 20198, 19805,   261, 19674,   nil,
  1161,   nil,  2924,   nil,   nil,   nil,  2644,   nil,   nil,   nil,
   nil,   436,   164,   nil,   nil,   574,   nil,  2084,   473,   522,
   nil,   nil,   nil,   nil,   nil,  1804,  5724,   479,   525,   491,
   nil,   nil,   nil,   503,   506,   nil,   508,   509,   nil,   510,
   nil,   nil,   535,  1419,   542,  1251,   nil,   670,   nil, 19150,
   685,  5164,  3204,   nil, 18356,  2504,    35,    65,   nil,   709,
  -101,  2364,   nil,   711,   594,    56,   nil,   600,   605,   217,
   nil,   nil, 18094, 17963,  2364,   618,   621,   nil,   622,   623,
   639,   nil,   664,   651,   641, 17832,   nil,   nil,   nil,   nil,
   nil,  4184,   nil,   nil,    -7, 17701,   nil,   678,   800,   955,
   nil,   nil, 24805,   nil, 24871,   nil, 24878,   nil, 24885,   nil,
   nil,   nil,   nil,   359,  1169,   683,   nil,   -11,   nil,   817,
   819,   nil,   211,   nil,   nil,   nil,   830,   nil,   nil,   nil,
   752,   nil,   916,   nil,   nil,  1197,   nil, 24937,   nil,  1227,
   nil,   nil,   761, 17570,   703,   820,   nil,  5024,    -1,    18,
   664,   831,    20,   nil,   nil,   nil,   203,   nil,   nil,   nil,
   755,   772,   776,   780,   782,  1028,   783,  1414,  3904,   nil,
   nil,   nil,   nil,   nil,  5444,   nil,  3064,   790,   nil,   nil,
   792,   806,   807,   810,   nil,   812,   nil,   660, 23849,   nil,
   945, 16121, 24093, 23727,    26,   nil,   802, 15497,   nil,   nil,
   nil,   nil,   893,   846,   537,   971,   974,   nil, 24732,   nil,
 19058,   nil, 24784,   nil, 24791,   nil,   nil,   905,   906,   nil,
   870,    32,    34,    68,   100,   nil,   749,   750,   nil,   nil,
   nil,   754,   835,   880,   881,    35,   nil, 24812,   nil,   nil,
   nil,   nil,  -129,   nil ]

racc_action_default = [
    -3,  -603,    -1,  -589,    -4,  -603,    -7,  -603,  -603,  -603,
  -603,   -29,  -603,  -603,   -33,  -603,  -603,  -283,   -45,  -591,
  -603,   -50,   -52,   -53,   -54,   -57,  -260,  -260,  -260,  -297,
  -332,  -333,   -69,   -11,   -73,   -81,   -83,  -603,  -493,  -494,
  -603,  -603,  -603,  -603,  -219,  -603,  -591,  -233,  -274,  -275,
  -276,  -277,  -278,  -279,  -280,  -281,  -282,  -577,  -285,  -287,
  -602,  -567,  -305,  -393,  -603,  -603,  -310,  -313,  -589,  -603,
  -603,  -603,  -603,  -334,  -335,  -434,  -435,  -436,  -437,  -438,
  -459,  -441,  -442,  -461,  -463,  -446,  -451,  -455,  -457,  -473,
  -461,  -475,  -477,  -478,  -479,  -480,  -575,  -482,  -483,  -576,
  -485,  -486,  -487,  -488,  -489,  -490,  -491,  -492,  -497,  -498,
  -603,    -2,  -590,  -598,  -599,  -600,    -6,  -603,  -603,  -603,
  -603,  -603,    -3,   -17,  -603,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,  -194,   -22,  -121,   -11,  -603,  -603,
  -603,  -603,  -603,  -250,  -603,  -603,  -587,  -588,  -603,  -603,
  -591,  -592,   -49,  -603,  -493,  -494,  -603,  -283,  -603,  -603,
  -225,  -603,   -11,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
  -603,  -603,  -603,  -603,  -603,  -603,  -234,  -235,  -236,  -237,
  -603,  -419,  -401,  -603,  -585,  -586,   -58,  -250,  -603,  -304,
  -405,  -416,  -419,   -64,  -411,   -65,  -591,   -66,  -240,  -255,
  -264,  -264,  -259,  -603,  -265,  -603,  -459,  -569,  -603,  -603,
   -67,   -68,  -589,   -12,  -603,   -15,  -603,   -71,   -11,  -591,
  -603,   -74,   -77,   -11,   -89,   -90,  -603,  -603,   -97,  -297,
  -300,  -591,  -603,  -332,  -333,  -336,  -412,  -603,   -79,  -603,
   -85,  -294,  -476,  -603,  -213,  -214,  -603,  -226,  -603,   -11,
  -603,  -591,  -241,  -595,  -595,  -603,  -603,  -595,  -603,  -306,
  -307,  -525,   -51,  -603,  -603,  -603,  -603,  -589,  -603,  -590,
  -493,  -494,  -603,  -603,  -283,  -603,  -346,  -347,  -107,  -108,
  -603,  -110,  -603,  -283,  -501,  -603,  -493,  -494,  -325,  -112,
  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -327,  -603,
  -565,  -603,  -439,  -603,  -603,  -603,  -603,  -603,  -603,  -603,
  -603,  1034,    -5,  -601,   -23,   -24,   -25,   -26,   -27,  -603,
  -603,   -19,   -20,   -21,  -122,  -603,   -30,   -32,  -270,  -603,
  -603,  -269,   -31,  -603,   -34,  -603,  -283,   -42,   -44,  -195,
  -245,  -265,   -46,   -47,   -35,  -196,  -245,  -591,  -251,  -264,
  -264,  -578,  -579,  -260,  -409,  -580,  -581,  -579,  -578,  -260,
  -408,  -410,  -580,  -581,   -41,  -203,   -48,  -591,  -303,  -603,
  -603,  -603,  -250,  -294,  -603,  -603,  -603,  -204,  -205,  -206,
  -207,  -208,  -209,  -210,  -211,  -215,  -216,  -217,  -218,  -220,
  -221,  -222,  -223,  -224,  -227,  -228,  -229,  -230,  -591,  -238,
  -603,  -420,  -260,  -578,  -579,  -416,   -59,  -591,  -261,  -603,
  -417,  -603,  -591,  -299,  -256,  -603,  -257,  -603,  -262,  -603,
  -266,  -603,  -572,  -574,   -10,  -590,   -14,    -3,  -591,   -70,
  -292,   -86,   -75,  -603,  -591,  -250,  -603,  -603,   -96,  -603,
  -476,  -603,   -82,   -87,  -603,  -603,  -603,  -603,  -239,  -231,
  -603,  -426,  -603,  -288,  -603,  -242,  -597,  -596,  -244,  -597,
  -295,  -296,  -568,  -394,  -525,  -397,  -564,  -564,  -508,  -510,
  -510,  -510,  -524,  -526,  -527,  -528,  -529,  -530,  -531,  -532,
  -533,  -603,  -535,  -537,  -539,  -544,  -546,  -547,  -549,  -554,
  -556,  -557,  -559,  -560,  -561,  -603,   -11,  -337,  -338,   -11,
  -603,  -603,  -603,  -603,  -603,  -250,  -603,  -603,  -294,  -318,
  -107,  -108,  -109,  -603,  -603,  -250,  -321,  -499,  -603,   -11,
  -503,  -329,  -591,  -440,  -460,  -465,  -603,  -467,  -443,  -462,
  -603,  -464,  -445,  -603,  -448,  -603,  -450,  -453,  -603,  -454,
  -603,  -474,    -8,   -18,  -603,   -28,  -273,  -603,  -603,  -250,
  -603,  -603,  -603,  -603,  -413,  -603,  -252,  -254,  -603,  -603,
   -60,  -249,  -406,  -603,  -603,   -62,  -407,  -302,  -593,  -578,
  -579,  -578,  -579,  -591,  -603,  -400,  -382,   -55,  -402,  -603,
  -247,  -414,  -382,  -415,  -298,  -264,  -263,  -267,  -603,  -570,
  -571,  -603,   -13,  -603,   -72,  -603,   -78,   -84,  -591,  -578,
  -579,  -248,  -582,   -95,  -603,   -80,  -603,  -202,  -212,  -591,
  -602,  -602,  -286,  -591,  -291,  -595,  -603,  -591,  -603,  -506,
  -507,  -603,  -603,  -517,  -603,  -520,  -603,  -522,  -603,  -348,
  -603,  -350,  -352,  -359,  -591,  -538,  -548,  -558,  -562,  -602,
  -339,  -602,  -311,  -340,  -341,  -314,  -603,  -317,  -603,  -591,
  -578,  -579,  -582,  -293,  -603,  -107,  -108,  -111,  -591,   -11,
  -603,  -323,  -603,   -11,  -525,  -525,  -603,  -566,  -466,  -469,
  -470,  -471,  -472,   -11,  -444,  -447,  -449,  -452,  -456,  -458,
  -123,  -271,  -603,  -591,  -578,  -579,  -579,  -578,   -43,  -246,
  -603,  -594,  -264,   -37,  -198,   -38,  -199,   -61,   -39,  -201,
   -40,  -200,   -63,  -603,  -603,  -603,  -603,  -413,  -603,  -383,
  -591,  -385,   -11,  -404,  -403,   -56,   -11,  -258,  -268,  -573,
   -16,   -76,  -413,   -88,  -301,  -602,  -344,   -11,  -427,  -602,
  -428,  -429,  -289,  -243,  -395,   -11,   -11,  -387,  -603,  -564,
  -545,  -563,  -509,  -510,  -510,  -536,  -510,  -510,  -555,  -510,
  -533,  -550,  -591,  -603,  -357,  -603,  -534,  -603,  -342,  -603,
  -603,   -11,   -11,  -316,  -603,   -11,  -413,  -603,  -413,  -603,
  -603,   -11,  -326,  -603,  -591,  -603,  -330,  -603,  -272,  -413,
   -36,  -197,  -253,  -603,  -232,  -564,  -564,  -364,  -366,  -366,
  -366,  -381,  -603,  -591,  -533,  -541,  -542,  -552,  -421,  -418,
    -9,   -11,  -433,  -345,  -603,  -603,  -431,  -603,  -603,  -603,
  -396,  -505,  -603,  -513,  -603,  -515,  -603,  -518,  -603,  -521,
  -523,  -349,  -351,  -355,  -603,  -360,  -308,  -603,  -309,  -603,
  -603,  -267,  -602,  -319,  -322,  -500,  -603,  -328,  -502,  -504,
  -503,  -468,  -603,  -362,  -363,  -372,  -374,  -603,  -377,  -603,
  -379,  -384,  -603,  -603,  -540,  -603,  -432,   -11,  -493,  -494,
  -603,  -603,  -283,  -430,  -398,  -399,  -591,  -389,  -391,  -392,
  -510,  -510,  -510,  -510,  -353,  -603,  -358,  -603,   -11,  -312,
  -315,  -422,  -423,  -424,   -11,  -324,   -11,  -564,  -543,  -365,
  -366,  -366,  -366,  -366,  -553,  -366,  -386,  -551,  -603,  -294,
  -426,  -250,  -603,  -603,  -294,  -388,  -603,  -603,  -511,  -514,
  -516,  -519,  -603,  -356,  -602,  -603,  -603,  -361,  -603,  -369,
  -603,  -371,  -603,  -375,  -603,  -378,  -380,  -293,  -582,  -425,
  -591,  -578,  -579,  -582,  -293,  -390,  -510,  -354,  -343,  -320,
  -331,  -366,  -366,  -366,  -366,  -413,  -512,  -603,  -367,  -370,
  -373,  -376,  -366,  -368 ]

clist = [
'219,128,128,378,279,279,279,332,16,262,263,270,274,16,339,214,690,2',
'583,411,412,576,579,264,486,837,38,328,223,427,634,38,343,344,133,133',
'347,223,223,223,669,16,306,306,743,666,560,666,301,222,115,111,496,112',
'123,206,299,433,439,38,304,304,828,522,489,128,131,131,318,818,322,869',
'223,223,532,714,223,352,362,362,448,825,669,487,592,394,395,396,397',
'902,722,725,266,273,275,350,366,366,366,535,538,947,297,542,116,545',
'482,949,480,383,905,281,281,281,805,115,348,300,974,491,16,388,552,389',
'384,223,223,223,223,16,16,390,315,315,364,368,493,753,38,399,342,342',
'334,337,342,840,740,38,38,6,613,615,699,700,6,609,611,614,614,509,792',
'609,872,277,290,291,796,315,315,315,823,820,968,748,624,326,400,335',
'407,956,669,280,280,280,1,357,666,666,279,974,205,658,672,342,342,342',
'342,380,1015,434,336,496,880,340,949,355,970,596,443,379,329,392,333',
'902,330,16,223,415,223,223,415,223,450,693,832,331,415,223,223,345,993',
'841,346,38,842,734,964,406,417,739,16,417,279,279,851,932,599,417,600',
'560,828,279,726,746,424,920,787,676,38,871,444,6,873,946,543,685,814',
'1017,653,341,398,6,696,662,656,223,223,825,659,961,809,802,884,382,223',
'385,422,423,386,387,,405,519,433,439,446,447,270,,,1018,274,16,,825',
'516,16,647,697,,306,16,534,580,581,501,300,737,,,38,508,526,,38,552',
'514,306,304,38,,678,846,523,,512,962,16,16,115,504,848,505,,742,304',
'520,660,,,281,586,664,223,223,38,38,913,281,681,410,410,,,966,601,859',
'297,674,681,,,297,223,677,,,,264,,,,300,825,756,,756,300,,223,,,,128',
'115,582,,,777,,315,729,488,782,,669,845,560,635,560,492,738,666,,630',
',,315,641,801,280,342,342,,646,891,133,279,280,681,,,,,,434,797,681',
',,,598,,506,443,763,623,39,,560,560,,39,,,,,602,131,654,223,813,747',
',,1009,,641,,,,923,924,433,439,,,,,533,39,305,305,,849,,425,,853,,279',
',445,,,874,,,,640,,434,810,418,,645,418,,854,855,443,434,418,16,,16',
'351,367,367,367,443,306,,223,673,552,552,523,,306,,38,,38,827,523,829',
'878,223,304,,,,797,,,,304,657,804,,,,812,,,,,,39,279,,937,,,,,,39,39',
'279,434,,997,836,,15,665,,434,443,15,963,,16,958,443,16,,,,,,223,,,916',
'560,703,705,707,,38,223,279,38,689,16,,15,794,315,,1025,,434,,128,695',
'315,868,,,,443,38,,723,723,,874,,874,,635,,415,223,811,824,16,826,,',
'793,741,415,415,,,133,415,415,,39,,6,417,38,635,719,,,721,,,641,417',
'417,646,760,,417,417,,,,856,817,39,773,775,131,306,,778,780,,15,523',
',,901,,306,,,15,15,,803,304,847,874,,,,,850,,635,996,304,,918,,,,772',
'635,,,951,,952,,953,870,445,,425,,709,,,,728,,,128,,39,223,,635,39,',
'16,223,305,39,16,882,,,,886,973,,975,,16,,,,38,305,,,38,,817,,315,,',
'39,39,415,38,,768,,15,315,15,,,15,,,,,,15,,,1010,687,417,16,,,,16,,821',
'907,15,821,342,,860,,,16,342,1016,38,,,,38,16,16,681,,,1022,950,1023',
',1024,38,,,,857,,819,,38,38,410,,,,223,,16,16,,,16,817,,,1032,,16,,',
'971,,972,,,38,38,,15,38,893,895,15,897,899,38,900,15,879,709,,934,834',
',,,,16,,883,,940,723,,,915,867,887,888,366,919,,,15,15,38,,,,938,774',
'776,,342,,779,781,,,,418,,,909,910,985,,912,,866,418,418,,1021,,418',
'418,982,,977,,,,16,,,,,,,39,,39,,279,,,366,305,,,38,,936,16,434,305',
',,443,16,315,16,,443,,,,17,,,315,38,17,,,,223,38,635,38,,,875,,,,988',
'989,990,991,,709,,709,,,,,,,17,308,308,926,928,930,,,980,,39,,,39,,',
'338,821,315,,867,,867,,867,,,,,994,,861,,39,,995,354,363,363,,,,,,774',
'776,781,779,,,967,418,1026,866,,866,,866,,,,954,709,,,,39,,15,,15,,',
',,,,,,17,,,,,,,,,17,17,,,,867,,867,13,867,,867,,13,,,,999,1001,1003',
'1005,305,1006,,,709,875,709,,875,,875,305,875,867,,861,,866,,866,13',
'866,,866,,,,,,,15,,,15,,,,,,,,709,,,,,866,1028,1029,1030,1031,,,15,408',
'421,356,,1033,,,,,,39,17,,416,39,,416,,,,,,416,,39,,,875,15,875,,875',
'15,875,,,17,,15,15,,,,15,15,13,,,,,,,,,13,13,875,,,,,,,39,,,,39,,,,',
',,,498,,500,39,,502,503,,,,,39,39,,,,,,,,,,,17,,,,17,,,,308,17,,,,,39',
'39,,,39,,,,,,39,308,,,,,,,,,,17,17,,,,,15,13,,413,15,,413,367,,,,,413',
'39,15,,,939,,,,,,,,,13,,,,,15,,,,,,,,,,,,,,,,,,,,,,15,,,,15,,,,,626',
',,367,,,15,39,,,,,,,15,15,,,,,,,,,,,13,,39,,13,,,,39,13,39,,,,15,15',
',,15,,,,,,15,,,,,,,,,,,13,13,,,,,,,,,,,,,,,,,,15,,,,,,667,,338,,670',
',,,,,,,,,,,,,,,,,17,,17,,,,,,308,,,,,,,,308,,,667,,,338,,,,,,15,,,,',
',,,,,,,,,,,,,,715,,15,,,,,,15,,15,,,,,,,,,,421,,,,17,,,17,,,,,,,,,,',
',,,,,,,,,17,,,,,,,752,,,,,,,,,761,,,,,,,,,667,338,,,416,,,,17,,13,,13',
',416,416,,,,416,416,,,,,,,,,,,,798,,,799,,,,,,,,,,,,,,,,308,,,,808,',
',,,,,308,,,,,,,,,,831,,,,,,,,,13,,,13,,,,,,,,,,,,,,,,,,,,13,,,,,,,,',
',,17,,,,17,,,,,,,858,,,17,,,,413,,,,13,,,,,,413,413,,416,,413,413,,',
',,,,,,,,,,,,,,,,17,,,,17,,,,,,,,,,,17,230,,,,,,,17,17,278,278,278,,',
',,,,,,,,324,325,911,327,,,,,,,,17,17,,,17,,,278,278,338,17,,,,,,,,,',
',,,,,,,13,,,,13,,,363,,,,,,17,13,,,942,,,,,,,,,,,,,,413,,,,,,,,,,,,',
',,,,,,,,,13,,,,13,,,,,,,,363,,,13,17,,,,,,,13,13,,,,,,,,,,,,,17,,,,',
',17,,17,,,,13,13,,,13,,,,,,13,,,,,,,,,,,,,,,,278,420,,,426,278,,,,,426',
',,,13,,,,943,,,,,230,,,457,458,459,460,461,462,463,464,465,466,467,468',
'469,470,471,472,473,474,475,476,477,478,,,,,479,,,,,,,278,278,,,,,,',
',278,,13,,,,,278,,278,,,278,278,,,,,,,,,,13,,,,,,13,,13,,,,,,,,,,,,',
',,,,,,528,,529,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,312,312,,,,,,,312,312,,312,,278,,,,,,,,,,,,,312,312,,',
',,,,,312,312,312,,,,,,,,,,,,,,,,,,,278,,426,426,426,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,278,,278,,278,,,,,,,,,,,,,,,,278,,,,,,,,,426,688',
',,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278',
'278,,,,,,,,312,,278,312,312,312,312,312,312,312,312,312,312,312,312',
'312,312,312,312,312,312,312,312,312,312,,,,,312,,,,,278,426,278,,,,769',
',,278,278,426,426,,,,426,426,312,,312,,,312,312,,,,,,,,,,,,,312,,,,278',
',,278,,,,,,,,,,312,,,,,,,312,,312,278,,,,,,,,,,,,,,,,,278,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,426,312,,,,,,',
',,,,,426,426,426,426,,864,,,,,,,,,,,,,,,,,,,,,,,,,,,,312,312,312,,,',
',,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,312,,312,,312,278,426,,,,,,,,',
',,,312,,,,,,,,312,,,312,312,,,,,,,,,,,312,,,312,,,,,,,,,,,,,,,,,,,,',
',,,,312,,,,,,,,,,,,,,,,,,,,312,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278',
',,,,,,,312,,,,,,312,,,312,312,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,312,,,312',
',,,312,,,,,,,,,,,312,,,,,312,,,,,,,,,,,,,,,,,312,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,312,,,,,,,,,,,,,,,,,,,,,312,312,312',
'312,,312,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,312',
',,,,,,,,,,,,,,,,,312,312,,,,,,,,,,,,312,,,,,,,,,,312,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,312' ]
        racc_goto_table = arr = ::Array.new(3064, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'33,58,58,57,35,35,35,71,28,143,38,75,75,28,90,31,10,2,96,22,22,93,93',
'31,41,94,53,33,28,29,30,53,17,17,62,62,17,28,28,28,183,28,28,28,100',
'78,173,78,50,20,99,4,77,6,15,15,47,39,39,53,53,53,179,52,42,58,61,61',
'51,134,65,130,28,28,8,120,28,28,28,28,48,174,183,29,55,17,17,17,17,118',
'95,95,40,40,40,53,53,53,53,73,73,136,46,73,5,142,39,137,144,156,121',
'74,74,74,11,99,4,9,180,144,28,163,168,164,157,28,28,28,28,28,28,157',
'67,67,56,56,48,166,53,2,24,24,74,74,24,11,167,53,53,7,160,160,125,125',
'7,161,161,161,161,48,132,161,134,45,45,45,132,67,67,67,172,176,177,165',
'63,68,25,70,23,121,183,72,72,72,1,19,78,78,35,180,16,76,14,24,24,24',
'24,88,136,75,89,77,12,92,137,97,130,98,58,101,102,5,72,118,103,28,28',
'28,28,28,28,28,31,104,120,105,28,28,28,106,121,107,108,53,109,110,111',
'20,20,112,28,20,35,35,113,134,114,20,115,173,179,35,96,116,26,117,30',
'52,53,122,26,7,128,135,138,52,139,121,29,140,7,7,141,147,149,28,28,174',
'42,150,151,30,152,155,28,158,24,24,159,162,,9,33,39,39,24,24,75,,,94',
'75,28,,174,31,28,48,142,,28,28,33,17,17,156,9,55,,,53,47,31,,53,168',
'47,28,53,53,,29,30,50,,51,11,28,28,99,4,30,6,,8,53,65,48,,,74,31,48',
'28,28,53,53,95,74,39,72,72,,,100,38,30,46,48,39,,,46,28,48,,,,31,,,',
'9,174,161,,161,9,,28,,,,58,99,4,,,41,,67,29,45,41,,183,93,173,33,173',
'45,29,78,,31,,,67,75,52,72,24,24,,75,125,62,35,72,39,,,,,,75,77,39,',
',,24,,7,58,29,15,54,,173,173,,54,,,,,24,61,33,28,73,48,,,10,,75,,,,125',
'125,39,39,,,,,7,54,54,54,,8,,64,,8,,35,,64,,,173,,,,40,,75,22,18,,40',
'18,,142,142,58,75,18,28,,28,54,54,54,54,58,28,,28,2,168,168,50,,28,',
'53,,53,129,50,129,8,28,53,,,,77,,,,53,40,48,,,,48,,,,,,54,35,,93,,,',
',,54,54,35,75,,125,48,,27,74,,75,58,27,96,,28,93,58,28,,,,,,28,,,8,173',
'171,171,171,,53,28,35,53,24,28,,27,90,67,,30,,75,,58,74,67,129,,,,58',
'53,,99,99,,173,,173,,33,,28,28,71,131,28,131,,,143,99,28,28,,,62,28',
'28,,54,,7,20,53,33,9,,,9,,,75,20,20,75,15,,20,20,,,,57,33,54,26,26,61',
'28,,26,26,,27,50,,,48,,28,,,27,27,,50,53,17,173,,,,,17,,33,8,53,,48',
',,,74,33,,,129,,129,,129,131,64,,64,,119,,,,72,,,58,,54,28,,33,54,,28',
'28,54,54,28,71,,,,71,129,,129,,28,,,,53,54,,,53,,33,,67,,,54,54,28,53',
',7,,27,67,27,,,27,,,,,,27,,,29,64,20,28,,,,28,,126,17,27,126,24,,26',
',,28,24,129,53,,,,53,28,28,39,,,129,131,129,,129,53,,,,9,,124,,53,53',
'72,,,,28,,28,28,,,28,33,,,129,,28,,,131,,131,,,53,53,,27,53,171,171',
'27,171,171,53,171,27,9,119,,28,119,,,,,28,,9,,28,99,,,99,126,9,9,53',
'99,,,27,27,53,,,,53,64,64,,24,,64,64,,,,18,,,9,9,33,,9,,124,18,18,,131',
',18,18,31,,28,,,,28,,,,,,,54,,54,,35,,,53,54,,,53,,9,28,75,54,,,58,28',
'67,28,,58,,,,32,,,67,53,32,,,,28,53,33,53,,,175,,,,171,171,171,171,',
'119,,119,,,,,,,32,32,32,127,127,127,,,9,,54,,,54,,,69,126,67,,126,,126',
',126,,,,,9,,64,,54,,9,32,32,32,,,,,,64,64,64,64,,,124,18,171,124,,124',
',124,,,,119,119,,,,54,,27,,27,,,,,,,,,32,,,,,,,,,32,32,,,,126,,126,21',
'126,,126,,21,,,,127,127,127,127,54,127,,,119,175,119,,175,,175,54,175',
'126,,64,,124,,124,21,124,,124,,,,,,,27,,,27,,,,,,,,119,,,,,124,127,127',
'127,127,,,27,69,69,21,,127,,,,,,54,32,,32,54,,32,,,,,,32,,54,,,175,27',
'175,,175,27,175,,,32,,27,27,,,,27,27,21,,,,,,,,,21,21,175,,,,,,,54,',
',,54,,,,,,,,69,,69,54,,69,69,,,,,54,54,,,,,,,,,,,32,,,,32,,,,32,32,',
',,,54,54,,,54,,,,,,54,32,,,,,,,,,,32,32,,,,,27,21,,21,27,,21,54,,,,',
'21,54,27,,,54,,,,,,,,,21,,,,,27,,,,,,,,,,,,,,,,,,,,,,27,,,,27,,,,,69',
',,54,,,27,54,,,,,,,27,27,,,,,,,,,,,21,,54,,21,,,,54,21,54,,,,27,27,',
',27,,,,,,27,,,,,,,,,,,21,21,,,,,,,,,,,,,,,,,,27,,,,,,69,,69,,69,,,,',
',,,,,,,,,,,,,32,,32,,,,,,32,,,,,,,,32,,,69,,,69,,,,,,27,,,,,,,,,,,,',
',,,,,,69,,27,,,,,,27,,27,,,,,,,,,,69,,,,32,,,32,,,,,,,,,,,,,,,,,,,,32',
',,,,,,32,,,,,,,,,69,,,,,,,,,69,69,,,32,,,,32,,21,,21,,32,32,,,,32,32',
',,,,,,,,,,,69,,,69,,,,,,,,,,,,,,,,32,,,,69,,,,,,,32,,,,,,,,,,69,,,,',
',,,,21,,,21,,,,,,,,,,,,,,,,,,,,21,,,,,,,,,,,32,,,,32,,,,,,,69,,,32,',
',,21,,,,21,,,,,,21,21,,32,,21,21,,,,,,,,,,,,,,,,,,,32,,,,32,,,,,,,,',
',,32,34,,,,,,,32,32,34,34,34,,,,,,,,,,,34,34,69,34,,,,,,,,32,32,,,32',
',,34,34,69,32,,,,,,,,,,,,,,,,,21,,,,21,,,32,,,,,,32,21,,,32,,,,,,,,',
',,,,,21,,,,,,,,,,,,,,,,,,,,,,21,,,,21,,,,,,,,32,,,21,32,,,,,,,21,21',
',,,,,,,,,,,,32,,,,,,32,,32,,,,21,21,,,21,,,,,,21,,,,,,,,,,,,,,,,34,34',
',,34,34,,,,,34,,,,21,,,,21,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,,,,,34,,,,,,,34,34,,,,,,,,34,,21,,',
',,34,,34,,,34,34,,,,,,,,,,21,,,,,,21,,21,,,,,,,,,,,,,,,,,,,34,,34,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,43',
'43,,,,,,,43,43,,43,,34,,,,,,,,,,,,,43,43,,,,,,,,43,43,43,,,,,,,,,,,',
',,,,,,,34,,34,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34,,34',
',,,,,,,,,,,,,,,34,,,,,,,,,34,34,,,,,,,,,,,34,,,34,,,,,,,,,,,,,,,,,,',
',,,,,,34,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,43,,34,43,43,43,43,43,43,43',
'43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,,,,,43,,,,,34,34,34,,,',
'34,,,34,34,34,34,,,,34,34,43,,43,,,43,43,,,,,,,,,,,,,43,,,,34,,,34,',
',,,,,,,,43,,,,,,,43,,43,34,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,34,43,,,,,,,,,,,,34,34,34,34',
',34,,,,,,,,,,,,,,,,,,,,,,,,,,,,43,43,43,,,,,,,,,,,,,,,,,,,,,,,,,,34',
',,,,,,,,,,,,43,,43,,43,34,34,,,,,,,,,,,,43,,,,,,,,43,,,43,43,,,,,,,',
',,,43,,,43,,,,,,,,,,,,,,,,,,,,,,,,,43,,,,,,,,,,,,,,,,,,,,43,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,43,,,,,,43,,,43,43,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,43,,,43,,,,43,,,,,,,,,,,43,,,,,43,,,,,,,,,,,,,,,,,43',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,43,,,,,,,,,,,,',
',,,,,,,,43,43,43,43,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,43,,,,,,,,,,,,,,,,,,43,43,,,,,,,,,,,,43,,,,,,,,,,43,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,43' ]
        racc_goto_check = arr = ::Array.new(3064, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   184,    17,   nil,    48,    99,    50,   149,  -255,    84,
  -515,  -576,  -603,   nil,  -313,    46,   181,   -32,   294,   116,
    29,  1109,  -189,   -30,    76,    53,    42,   576,     8,  -184,
  -397,    -1,   980,   -19,  1768,   -25,   nil,   nil,   -14,  -157,
    66,  -242,  -207,  2130,   nil,   134,    69,    23,  -140,   nil,
    14,    33,  -256,    26,   447,  -276,    64,   -69,    -7,   nil,
   nil,    58,    26,  -230,   274,    29,   nil,    98,   131,   968,
   117,   -53,   152,  -234,    82,   -15,  -291,  -229,  -450,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   125,   139,
   -48,   nil,   140,  -322,  -694,  -490,  -330,   136,  -157,    47,
  -556,   137,   152,   155,  -310,   166,   163,  -491,   165,  -491,
  -354,  -677,  -357,  -497,  -122,  -130,  -348,  -601,  -744,   171,
  -486,  -725,  -531,   nil,   141,  -394,   108,   148,  -528,  -170,
  -719,   -63,  -496,   nil,  -628,  -626,  -788,  -782,   -77,  -430,
   206,  -271,  -236,   -13,  -153,   nil,   nil,  -217,   nil,  -207,
  -633,  -411,  -527,   nil,   nil,   205,    29,    41,   201,   203,
  -236,  -229,   203,    34,    35,  -433,  -470,  -451,  -219,   nil,
   nil,    49,  -532,  -295,  -621,   205,  -527,  -750,   nil,  -642,
  -809,   nil,   nil,  -457 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   349,   295,   nil,   531,
   nil,   838,   nil,   292,   293,   nil,   nil,   nil,    11,    12,
    18,   228,   nil,   nil,    14,   nil,   414,   229,   323,   nil,
   nil,   594,   227,   449,    21,    22,    23,    24,   nil,   684,
   nil,   nil,   nil,    26,    25,   428,    32,   nil,   nil,    34,
    37,    36,   nil,   224,   225,   361,   nil,   130,   436,   129,
   132,    76,    77,   nil,   419,    91,    44,    47,   260,   284,
   nil,   806,   429,   nil,   430,   441,   642,   494,   282,   268,
    48,    49,    50,    51,    52,    53,    54,    55,    56,   nil,
   269,    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   577,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   711,   559,
   nil,   712,   969,   865,   547,   nil,   548,   nil,   nil,   549,
   nil,   551,   nil,   789,   nil,   nil,   nil,   557,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   440,   490,   nil,   481,   nil,
   nil,   nil,   nil,    75,    78,    79,   nil,   nil,   nil,   nil,
   nil,   604,   nil,   nil,   nil,   nil,   nil,   nil,   822,   745,
   546,   nil,   550,   830,   562,   564,   565,   876,   568,   569,
   877,   572,   575,   287 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  4, 150, :_reduce_8,
  4, 153, :_reduce_9,
  2, 154, :_reduce_10,
  0, 158, :_reduce_11,
  1, 158, :_reduce_12,
  3, 158, :_reduce_13,
  2, 158, :_reduce_14,
  1, 159, :_reduce_none,
  4, 159, :_reduce_16,
  0, 170, :_reduce_17,
  4, 152, :_reduce_18,
  3, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  2, 152, :_reduce_22,
  3, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  4, 152, :_reduce_28,
  1, 152, :_reduce_none,
  3, 152, :_reduce_30,
  3, 152, :_reduce_31,
  3, 152, :_reduce_32,
  1, 152, :_reduce_none,
  3, 163, :_reduce_34,
  3, 163, :_reduce_35,
  6, 163, :_reduce_36,
  5, 163, :_reduce_37,
  5, 163, :_reduce_38,
  5, 163, :_reduce_39,
  5, 163, :_reduce_40,
  3, 163, :_reduce_41,
  1, 171, :_reduce_none,
  3, 171, :_reduce_43,
  1, 171, :_reduce_none,
  1, 169, :_reduce_none,
  3, 169, :_reduce_46,
  3, 169, :_reduce_47,
  3, 169, :_reduce_48,
  2, 169, :_reduce_49,
  1, 169, :_reduce_none,
  1, 162, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_55,
  3, 186, :_reduce_56,
  1, 188, :_reduce_none,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 164, :_reduce_69,
  3, 164, :_reduce_70,
  1, 192, :_reduce_71,
  3, 192, :_reduce_72,
  1, 191, :_reduce_none,
  2, 191, :_reduce_74,
  3, 191, :_reduce_75,
  5, 191, :_reduce_76,
  2, 191, :_reduce_77,
  4, 191, :_reduce_78,
  2, 191, :_reduce_79,
  4, 191, :_reduce_80,
  1, 191, :_reduce_81,
  3, 191, :_reduce_82,
  1, 195, :_reduce_none,
  3, 195, :_reduce_84,
  2, 194, :_reduce_85,
  3, 194, :_reduce_86,
  1, 197, :_reduce_87,
  3, 197, :_reduce_88,
  1, 196, :_reduce_89,
  1, 196, :_reduce_90,
  4, 196, :_reduce_91,
  3, 196, :_reduce_92,
  3, 196, :_reduce_93,
  3, 196, :_reduce_94,
  3, 196, :_reduce_95,
  2, 196, :_reduce_96,
  1, 196, :_reduce_97,
  1, 166, :_reduce_98,
  1, 166, :_reduce_99,
  4, 166, :_reduce_100,
  3, 166, :_reduce_101,
  3, 166, :_reduce_102,
  3, 166, :_reduce_103,
  3, 166, :_reduce_104,
  2, 166, :_reduce_105,
  1, 166, :_reduce_106,
  1, 200, :_reduce_107,
  1, 200, :_reduce_none,
  2, 201, :_reduce_109,
  1, 201, :_reduce_110,
  3, 201, :_reduce_111,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 205, :_reduce_117,
  1, 205, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_121,
  0, 208, :_reduce_122,
  4, 161, :_reduce_123,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 179, :_reduce_195,
  3, 179, :_reduce_196,
  6, 179, :_reduce_197,
  5, 179, :_reduce_198,
  5, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  4, 179, :_reduce_202,
  3, 179, :_reduce_203,
  3, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  4, 179, :_reduce_212,
  2, 179, :_reduce_213,
  2, 179, :_reduce_214,
  3, 179, :_reduce_215,
  3, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  1, 179, :_reduce_none,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  2, 179, :_reduce_225,
  2, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  3, 179, :_reduce_230,
  3, 179, :_reduce_231,
  6, 179, :_reduce_232,
  1, 179, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  3, 211, :_reduce_238,
  3, 211, :_reduce_239,
  1, 214, :_reduce_none,
  1, 215, :_reduce_none,
  2, 215, :_reduce_none,
  4, 215, :_reduce_243,
  2, 215, :_reduce_244,
  1, 209, :_reduce_none,
  3, 209, :_reduce_246,
  3, 220, :_reduce_247,
  0, 221, :_reduce_248,
  1, 221, :_reduce_none,
  0, 174, :_reduce_250,
  1, 174, :_reduce_none,
  2, 174, :_reduce_none,
  4, 174, :_reduce_253,
  2, 174, :_reduce_254,
  1, 190, :_reduce_255,
  2, 190, :_reduce_256,
  2, 190, :_reduce_257,
  4, 190, :_reduce_258,
  1, 190, :_reduce_259,
  0, 224, :_reduce_260,
  2, 185, :_reduce_261,
  2, 223, :_reduce_262,
  2, 222, :_reduce_263,
  0, 222, :_reduce_264,
  1, 217, :_reduce_265,
  2, 217, :_reduce_266,
  3, 217, :_reduce_267,
  4, 217, :_reduce_268,
  1, 168, :_reduce_269,
  1, 168, :_reduce_none,
  3, 167, :_reduce_271,
  4, 167, :_reduce_272,
  2, 167, :_reduce_273,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_284,
  0, 247, :_reduce_285,
  4, 212, :_reduce_286,
  0, 248, :_reduce_287,
  0, 249, :_reduce_288,
  5, 212, :_reduce_289,
  0, 250, :_reduce_290,
  4, 212, :_reduce_291,
  3, 212, :_reduce_292,
  3, 212, :_reduce_293,
  2, 212, :_reduce_294,
  3, 212, :_reduce_295,
  3, 212, :_reduce_296,
  1, 212, :_reduce_297,
  4, 212, :_reduce_298,
  3, 212, :_reduce_299,
  1, 212, :_reduce_300,
  5, 212, :_reduce_301,
  4, 212, :_reduce_302,
  3, 212, :_reduce_303,
  2, 212, :_reduce_304,
  1, 212, :_reduce_none,
  2, 212, :_reduce_306,
  2, 212, :_reduce_307,
  6, 212, :_reduce_308,
  6, 212, :_reduce_309,
  0, 251, :_reduce_310,
  0, 252, :_reduce_311,
  7, 212, :_reduce_312,
  0, 253, :_reduce_313,
  0, 254, :_reduce_314,
  7, 212, :_reduce_315,
  5, 212, :_reduce_316,
  4, 212, :_reduce_317,
  0, 255, :_reduce_318,
  0, 256, :_reduce_319,
  9, 212, :_reduce_320,
  0, 257, :_reduce_321,
  6, 212, :_reduce_322,
  0, 258, :_reduce_323,
  7, 212, :_reduce_324,
  0, 259, :_reduce_325,
  5, 212, :_reduce_326,
  0, 260, :_reduce_327,
  6, 212, :_reduce_328,
  0, 261, :_reduce_329,
  0, 262, :_reduce_330,
  9, 212, :_reduce_331,
  1, 212, :_reduce_332,
  1, 212, :_reduce_333,
  1, 212, :_reduce_334,
  1, 212, :_reduce_335,
  1, 173, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  2, 238, :_reduce_339,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 239, :_reduce_none,
  5, 239, :_reduce_343,
  1, 156, :_reduce_none,
  2, 156, :_reduce_345,
  1, 242, :_reduce_none,
  1, 242, :_reduce_none,
  1, 263, :_reduce_348,
  3, 263, :_reduce_349,
  1, 266, :_reduce_350,
  3, 266, :_reduce_351,
  1, 265, :_reduce_none,
  4, 265, :_reduce_353,
  6, 265, :_reduce_354,
  3, 265, :_reduce_355,
  5, 265, :_reduce_356,
  2, 265, :_reduce_357,
  4, 265, :_reduce_358,
  1, 265, :_reduce_359,
  3, 265, :_reduce_360,
  4, 267, :_reduce_361,
  2, 267, :_reduce_362,
  2, 267, :_reduce_363,
  1, 267, :_reduce_364,
  2, 272, :_reduce_365,
  0, 272, :_reduce_366,
  6, 273, :_reduce_367,
  8, 273, :_reduce_368,
  4, 273, :_reduce_369,
  6, 273, :_reduce_370,
  4, 273, :_reduce_371,
  2, 273, :_reduce_none,
  6, 273, :_reduce_373,
  2, 273, :_reduce_374,
  4, 273, :_reduce_375,
  6, 273, :_reduce_376,
  2, 273, :_reduce_377,
  4, 273, :_reduce_378,
  2, 273, :_reduce_379,
  4, 273, :_reduce_380,
  1, 273, :_reduce_none,
  0, 277, :_reduce_382,
  1, 277, :_reduce_383,
  3, 278, :_reduce_384,
  1, 278, :_reduce_385,
  4, 278, :_reduce_386,
  1, 279, :_reduce_387,
  4, 279, :_reduce_388,
  1, 280, :_reduce_389,
  3, 280, :_reduce_390,
  1, 281, :_reduce_391,
  1, 281, :_reduce_none,
  0, 285, :_reduce_393,
  0, 286, :_reduce_394,
  4, 237, :_reduce_395,
  4, 283, :_reduce_396,
  1, 283, :_reduce_397,
  3, 284, :_reduce_398,
  3, 284, :_reduce_399,
  3, 288, :_reduce_400,
  2, 182, :_reduce_401,
  4, 182, :_reduce_402,
  5, 182, :_reduce_403,
  5, 182, :_reduce_404,
  2, 236, :_reduce_405,
  4, 236, :_reduce_406,
  4, 236, :_reduce_407,
  3, 236, :_reduce_408,
  3, 236, :_reduce_409,
  3, 236, :_reduce_410,
  2, 236, :_reduce_411,
  1, 236, :_reduce_412,
  4, 236, :_reduce_413,
  3, 235, :_reduce_414,
  3, 235, :_reduce_415,
  0, 291, :_reduce_416,
  0, 292, :_reduce_417,
  4, 187, :_reduce_418,
  0, 293, :_reduce_419,
  0, 294, :_reduce_420,
  4, 289, :_reduce_421,
  5, 241, :_reduce_422,
  1, 295, :_reduce_423,
  1, 295, :_reduce_none,
  6, 155, :_reduce_425,
  0, 155, :_reduce_426,
  1, 296, :_reduce_427,
  1, 296, :_reduce_none,
  1, 296, :_reduce_none,
  2, 297, :_reduce_430,
  1, 297, :_reduce_none,
  2, 157, :_reduce_432,
  1, 157, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 226, :_reduce_437,
  1, 299, :_reduce_438,
  2, 299, :_reduce_439,
  3, 300, :_reduce_440,
  1, 300, :_reduce_441,
  1, 300, :_reduce_442,
  3, 227, :_reduce_443,
  4, 228, :_reduce_444,
  3, 229, :_reduce_445,
  0, 304, :_reduce_446,
  3, 304, :_reduce_447,
  1, 305, :_reduce_448,
  2, 305, :_reduce_449,
  3, 231, :_reduce_450,
  0, 307, :_reduce_451,
  3, 307, :_reduce_452,
  3, 230, :_reduce_453,
  3, 232, :_reduce_454,
  0, 308, :_reduce_455,
  3, 308, :_reduce_456,
  0, 309, :_reduce_457,
  3, 309, :_reduce_458,
  0, 301, :_reduce_459,
  2, 301, :_reduce_460,
  0, 302, :_reduce_461,
  2, 302, :_reduce_462,
  0, 303, :_reduce_463,
  2, 303, :_reduce_464,
  1, 306, :_reduce_465,
  2, 306, :_reduce_466,
  0, 311, :_reduce_467,
  4, 306, :_reduce_468,
  1, 310, :_reduce_469,
  1, 310, :_reduce_470,
  1, 310, :_reduce_471,
  1, 310, :_reduce_none,
  1, 206, :_reduce_473,
  3, 207, :_reduce_474,
  1, 298, :_reduce_475,
  2, 298, :_reduce_476,
  1, 210, :_reduce_477,
  1, 210, :_reduce_478,
  1, 210, :_reduce_479,
  1, 210, :_reduce_480,
  1, 198, :_reduce_481,
  1, 198, :_reduce_482,
  1, 198, :_reduce_483,
  1, 198, :_reduce_484,
  1, 198, :_reduce_485,
  1, 199, :_reduce_486,
  1, 199, :_reduce_487,
  1, 199, :_reduce_488,
  1, 199, :_reduce_489,
  1, 199, :_reduce_490,
  1, 199, :_reduce_491,
  1, 199, :_reduce_492,
  1, 233, :_reduce_493,
  1, 233, :_reduce_494,
  1, 172, :_reduce_495,
  1, 172, :_reduce_496,
  1, 177, :_reduce_497,
  1, 177, :_reduce_498,
  0, 312, :_reduce_499,
  4, 243, :_reduce_500,
  0, 243, :_reduce_501,
  3, 245, :_reduce_502,
  0, 314, :_reduce_503,
  3, 245, :_reduce_504,
  4, 313, :_reduce_505,
  2, 313, :_reduce_506,
  2, 313, :_reduce_507,
  1, 313, :_reduce_508,
  2, 316, :_reduce_509,
  0, 316, :_reduce_510,
  6, 287, :_reduce_511,
  8, 287, :_reduce_512,
  4, 287, :_reduce_513,
  6, 287, :_reduce_514,
  4, 287, :_reduce_515,
  6, 287, :_reduce_516,
  2, 287, :_reduce_517,
  4, 287, :_reduce_518,
  6, 287, :_reduce_519,
  2, 287, :_reduce_520,
  4, 287, :_reduce_521,
  2, 287, :_reduce_522,
  4, 287, :_reduce_523,
  1, 287, :_reduce_524,
  0, 287, :_reduce_525,
  1, 282, :_reduce_526,
  1, 282, :_reduce_527,
  1, 282, :_reduce_528,
  1, 282, :_reduce_529,
  1, 264, :_reduce_none,
  1, 264, :_reduce_531,
  1, 318, :_reduce_532,
  1, 319, :_reduce_533,
  3, 319, :_reduce_534,
  1, 274, :_reduce_535,
  3, 274, :_reduce_536,
  1, 320, :_reduce_537,
  2, 321, :_reduce_538,
  1, 321, :_reduce_539,
  2, 322, :_reduce_540,
  1, 322, :_reduce_541,
  1, 268, :_reduce_542,
  3, 268, :_reduce_543,
  1, 315, :_reduce_544,
  3, 315, :_reduce_545,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  2, 269, :_reduce_548,
  1, 269, :_reduce_549,
  3, 324, :_reduce_550,
  3, 325, :_reduce_551,
  1, 275, :_reduce_552,
  3, 275, :_reduce_553,
  1, 317, :_reduce_554,
  3, 317, :_reduce_555,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  2, 276, :_reduce_558,
  1, 276, :_reduce_559,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  2, 271, :_reduce_562,
  2, 270, :_reduce_563,
  0, 270, :_reduce_564,
  1, 246, :_reduce_none,
  3, 246, :_reduce_566,
  0, 234, :_reduce_567,
  2, 234, :_reduce_none,
  1, 219, :_reduce_569,
  3, 219, :_reduce_570,
  3, 328, :_reduce_571,
  2, 328, :_reduce_572,
  4, 328, :_reduce_573,
  2, 328, :_reduce_574,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 176, :_reduce_587,
  1, 176, :_reduce_588,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 193, :_reduce_593,
  2, 175, :_reduce_594,
  0, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 244, :_reduce_598,
  1, 244, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 216, :_reduce_602 ]

racc_reduce_n = 603

racc_shift_n = 1034

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "command_rhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "brace_body",
  "fcall",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@2",
  "arg_rhs",
  "simple_numeric",
  "rel_expr",
  "primary",
  "relop",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@3",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@4",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_block_param",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "@21",
  "f_args",
  "do_block",
  "do_body",
  "operation3",
  "@22",
  "@23",
  "@24",
  "@25",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@26",
  "@27",
  "args_tail",
  "@28",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_3(val, _values, result)
                      result = []
                    
    result
end

def _reduce_4(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_5(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_9(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = []
                    
    result
end

def _reduce_12(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_14(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

# reduce 15 omitted

def _reduce_16(val, _values, result)
                      diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_18(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_21(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_27(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_32(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_39(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_40(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_41(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

# reduce 42 omitted

def _reduce_43(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

# reduce 44 omitted

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_48(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_49(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

def _reduce_55(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = [ val[0], *val[1], val[2] ]
                    
    result
end

# reduce 57 omitted

def _reduce_58(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_62(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
end

def _reduce_63(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_64(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_65(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_66(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_68(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_69(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_70(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_71(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_72(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 73 omitted

def _reduce_74(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_80(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_81(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_82(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_85(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_87(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_88(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_94(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_95(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_96(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_99(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_100(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_101(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_102(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_103(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_104(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_105(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_106(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_107(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_110(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_111(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

def _reduce_117(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_122(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 219 omitted

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_226(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_232(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

def _reduce_238(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

def _reduce_243(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

# reduce 245 omitted

def _reduce_246(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_247(val, _values, result)
                      result = val
                    
    result
end

def _reduce_248(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = []
                    
    result
end

# reduce 251 omitted

# reduce 252 omitted

def _reduce_253(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_257(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_258(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_259(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_261(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = []
                    
    result
end

def _reduce_265(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = @builder.array(nil, val[0], nil)
                    
    result
end

# reduce 270 omitted

def _reduce_271(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_273(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

def _reduce_284(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_286(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_288(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_289(val, _values, result)
                      @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[4])
                    
    result
end

def _reduce_290(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_291(val, _values, result)
                      result = @builder.begin(val[0], nil, val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_293(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_295(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_296(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_302(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_303(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_304(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 305 omitted

def _reduce_306(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_307(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_308(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_309(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_310(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_311(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_313(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_314(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_316(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_317(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_318(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_319(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_321(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_322(val, _values, result)
                      if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_323(val, _values, result)
                      result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_324(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend

                      @def_level = val[4]
                    
    result
end

def _reduce_325(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_326(val, _values, result)
                      if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_327(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_328(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_329(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_330(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_331(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_332(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_333(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_334(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_335(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

def _reduce_343(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 344 omitted

def _reduce_345(val, _values, result)
                      result = val
                    
    result
end

# reduce 346 omitted

# reduce 347 omitted

def _reduce_348(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_358(val, _values, result)
                      result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_359(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_361(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_362(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_366(val, _values, result)
                      result = []
                    
    result
end

def _reduce_367(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_369(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_371(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_374(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_375(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_377(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_378(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_379(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_380(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_383(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_384(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_385(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_386(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = []
                    
    result
end

def _reduce_388(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_389(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_391(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_394(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_395(val, _values, result)
                      @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
end

def _reduce_396(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_397(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0], val[1], val[2] ]
                    
    result
end

def _reduce_399(val, _values, result)
                      result = [ val[0], val[1], val[2] ]
                    
    result
end

def _reduce_400(val, _values, result)
                      result = [ val[0], *val[1], val[2] ]
                    
    result
end

def _reduce_401(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_402(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_403(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_404(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_405(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_406(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_407(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_408(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_409(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_410(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_411(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_412(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_413(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_414(val, _values, result)
                      result = [ val[0], *val[1], val[2] ]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = [ val[0], *val[1], val[2] ]
                    
    result
end

def _reduce_416(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_418(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg = val[1]
                      @lexer.cmdarg.pop
                    
    result
end

def _reduce_419(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
end

def _reduce_421(val, _values, result)
                      result = [ val[2], val[3] ]

                      @static_env.unextend
                      @lexer.cmdarg = val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 424 omitted

def _reduce_425(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = []
                    
    result
end

def _reduce_427(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 428 omitted

# reduce 429 omitted

def _reduce_430(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 431 omitted

def _reduce_432(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 433 omitted

# reduce 434 omitted

# reduce 435 omitted

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_438(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_439(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_440(val, _values, result)
                      string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_441(val, _values, result)
                      string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_442(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_443(val, _values, result)
                      string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
end

def _reduce_444(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = []
                    
    result
end

def _reduce_447(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = []
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = []
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = []
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[0] << @builder.symbol_internal(val[1])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = []
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = []
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = []
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_468(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_469(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 472 omitted

def _reduce_473(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_474(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_476(val, _values, result)
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], val[1])
                      else
                        result = @builder.unary_num(val[0], val[1])
                      end
                    
    result
end

def _reduce_477(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_479(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.rational(val[0])
                    
    result
end

def _reduce_480(val, _values, result)
                      @lexer.state = :expr_endarg
                      result = @builder.complex(val[0])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_487(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_488(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_489(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_491(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_492(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_493(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_495(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_496(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_497(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_499(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_501(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_502(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_503(val, _values, result)
                      result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
end

def _reduce_504(val, _values, result)
                      @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
end

def _reduce_505(val, _values, result)
                      result = val[0].concat(val[2]).concat(val[3])
                    
    result
end

def _reduce_506(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_507(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_508(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_509(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = []
                    
    result
end

def _reduce_511(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_512(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_513(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_514(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_515(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_517(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_519(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_520(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_521(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_525(val, _values, result)
                      result = []
                    
    result
end

def _reduce_526(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_527(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_528(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_529(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_534(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_535(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_537(val, _values, result)
                      check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_539(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_540(val, _values, result)
                      result = @builder.kwoptarg(val[0], val[1])
                    
    result
end

def _reduce_541(val, _values, result)
                      result = @builder.kwarg(val[0])
                    
    result
end

def _reduce_542(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_545(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 546 omitted

# reduce 547 omitted

def _reduce_548(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
end

def _reduce_549(val, _values, result)
                      result = [ @builder.kwrestarg(val[0]) ]
                    
    result
end

def _reduce_550(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_551(val, _values, result)
                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_552(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_553(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_554(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_555(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 556 omitted

# reduce 557 omitted

def _reduce_558(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_559(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 560 omitted

# reduce 561 omitted

def _reduce_562(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_563(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_564(val, _values, result)
                      result = []
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_567(val, _values, result)
                      result = []
                    
    result
end

# reduce 568 omitted

def _reduce_569(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_570(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_571(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_572(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_574(val, _values, result)
                      result = @builder.kwsplat(val[0], val[1])
                    
    result
end

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

# reduce 580 omitted

# reduce 581 omitted

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_588(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 589 omitted

# reduce 590 omitted

# reduce 591 omitted

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_594(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 595 omitted

# reduce 596 omitted

# reduce 597 omitted

def _reduce_598(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

def _reduce_602(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby25
  end   # module Parser
