# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

module Parser
  class RubyMotion < Parser::Base


  def version
    19 # closest released match: v1_9_0_2
  end

  def default_encoding
    Encoding::BINARY
  end
##### State transition tables begin ###

clist = [
'-451,5,63,64,65,7,51,-451,-451,-451,57,58,-451,-451,-451,61,-451,59',
'60,62,23,24,66,67,-451,272,-451,-451,-451,22,28,27,90,89,91,92,-451',
'-451,17,-451,-451,-451,-451,-451,6,41,8,9,94,93,95,84,50,86,85,87,551',
'88,96,97,530,82,83,38,39,37,-451,-451,-451,-451,-451,-451,-451,-451',
'-451,-451,-451,-451,-451,-451,458,451,-451,-451,-451,36,-451,-451,30',
'682,-451,52,53,-451,-451,54,-451,32,-451,572,-451,40,-451,-451,-451',
'-451,-451,-451,-451,18,-451,271,-451,-89,81,73,76,77,498,78,79,500,-93',
'751,74,80,-451,-451,-451,-451,-448,-451,56,-451,75,-451,-451,-448,-448',
'-448,-92,416,-448,-448,-448,-87,-448,646,-91,536,530,204,205,207,-448',
'-88,-448,-448,-448,204,205,550,571,204,205,655,-448,-448,682,-448,-448',
'-448,-448,-448,102,530,-86,-89,-522,101,-90,102,-86,-90,-93,-88,101',
'204,205,102,208,-93,541,734,101,604,-448,-448,-448,-448,-448,-448,-448',
'-448,-448,-448,-448,-448,-448,-448,102,912,-448,-448,-448,101,-448,-448',
'-81,-87,-448,530,-79,-448,-448,-523,-448,-85,-448,603,-448,576,-448',
'-448,-448,-448,-448,-448,-448,-279,-448,208,-448,-90,530,-84,-279,-279',
'-279,208,-79,577,-279,-279,-522,-279,-448,-448,-448,-448,-80,-448,-91',
'-448,102,-448,-448,-91,102,101,654,-91,682,101,915,-279,-279,208,-279',
'-279,-279,-279,-279,-92,580,-82,604,-78,-79,102,-86,-89,798,-82,101',
'-86,-89,-90,-93,-88,-461,-80,-90,-93,-88,-279,-279,-279,-279,-279,-279',
'-279,-279,-279,-279,-279,-279,-279,-279,815,603,-279,-279,-279,-79,592',
'542,-79,733,-279,543,561,-279,-87,-79,102,-523,-279,-87,-279,101,-279',
'-279,-279,-279,-279,-279,-279,-526,-279,-86,-279,204,205,485,-526,-526',
'-526,102,-82,665,-526,-526,101,-526,-279,-279,-80,-83,-87,-279,272,102',
'-526,-279,-91,-83,101,-88,-448,272,-520,793,646,-526,-526,-448,-526',
'-526,-526,-526,-526,563,562,604,-82,498,-92,-82,500,561,714,-92,-80',
'-92,-82,-80,561,498,666,-259,500,208,-80,-526,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,-526,-526,603,665,-526,-526,-526,-451',
'589,267,498,-448,-526,497,-451,-526,102,-526,267,-520,-526,101,-526',
'-451,-526,-526,-526,-526,-526,-526,-526,271,-526,-526,-526,563,562,566',
'604,-73,271,-520,563,562,568,561,-59,-279,-526,-526,375,-81,825,-526',
'-279,-279,-279,-526,-89,-279,-279,-279,372,-279,267,-451,102,374,373',
'-526,-451,101,603,-279,-279,-279,-526,-451,204,205,363,-522,73,-279',
'-279,-526,-279,-279,-279,-279,-279,74,485,594,673,-81,513,512,511,517',
'514,75,917,-526,102,-458,563,562,559,101,480,481,-458,-279,-279,-279',
'-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-526,-451,-279',
'-279,-279,853,592,-279,-84,853,-279,204,205,-279,-279,-92,-279,585,-279',
'227,-279,227,-279,-279,-279,-279,-279,-279,-279,227,-279,227,-279,-522',
'-81,744,-458,513,512,511,517,514,561,298,299,900,-279,-279,-279,-279',
'-526,-279,921,-279,-457,-279,-91,-526,-526,-526,-82,-457,-526,-526,-526',
'902,-526,-90,793,646,-81,208,519,-81,227,-526,-526,-526,-526,493,-81',
'523,522,526,525,208,-526,-526,203,-526,-526,-526,-526,-526,673,208,513',
'512,511,517,514,-459,561,563,562,573,224,-73,-459,102,226,225,-457,628',
'101,657,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,102,-85,-526,-526,-526,101,735,-526,-93,853,-526,208,-456',
'-526,-526,491,-526,584,-526,-456,-526,639,-526,-526,-526,-526,-526,-526',
'-526,-459,-526,-526,-526,563,562,564,201,-453,201,930,853,853,789,545',
'-453,200,-526,-526,-526,-526,-274,-526,547,-526,198,-526,-89,-274,-274',
'-274,-80,-461,-274,-274,-274,646,-274,-88,853,208,-456,934,-279,-454',
'657,659,-274,-274,-274,-279,-454,661,664,667,-523,675,-274,-274,-279',
'-274,-274,-274,-274,-274,202,-453,202,676,678,722,208,-455,536,201,-78',
'201,685,902,-455,713,557,-86,265,716,98,-260,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-279,-454,-274,-274,-274',
'227,723,-274,458,449,-274,458,-79,-274,-274,208,-274,297,-274,-87,-274',
'208,-274,-274,-274,-274,-274,-274,-274,-455,-274,202,-274,202,737,296',
'-280,224,-322,748,451,226,225,-280,449,-322,-274,-274,-274,-274,-286',
'-274,-280,-274,-322,-274,208,-286,-286,-286,639,208,-286,-286,-286,673',
'-286,513,512,511,517,514,201,227,267,267,-286,-286,774,413,513,512,511',
'-519,514,639,-286,-286,414,-286,-286,-286,-286,-286,-280,774,-322,513',
'512,511,227,514,519,227,762,224,246,-259,766,226,225,222,223,526,525',
'657,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'-286,202,784,-286,-286,-286,-448,787,-286,665,276,-286,208,-448,-286',
'-286,646,-286,-519,-286,797,-286,-448,-286,-286,-286,-286,-286,-286',
'-286,208,-286,208,-286,806,-280,-261,227,902,950,-519,951,-280,953,817',
'819,-232,-286,-286,822,-286,-280,-286,-232,-232,-232,-286,823,-232,-232',
'-232,201,-232,-460,-448,657,826,853,892,224,-460,197,-232,226,225,222',
'223,890,853,-460,208,833,-232,-232,201,-232,-232,-232,-232,-232,-273',
'477,834,-280,639,201,201,-273,201,196,475,-279,920,489,853,539,-273',
'842,-279,843,208,547,414,-523,537,845,846,-279,849,202,851,-460,853',
'-232,853,-232,208,858,860,-523,-232,862,-232,-232,-232,267,-232,-232',
'-232,-232,195,-232,202,104,105,106,107,108,-273,194,-232,-232,-232,202',
'202,-522,202,193,-232,-279,415,-232,-232,417,-232,-232,-232,-232,-232',
'708,709,418,-232,710,96,97,207,-232,868,870,673,-232,513,512,511,517',
'514,208,873,-262,880,-232,-232,-232,-232,-232,-232,-232,-232,-232,-232',
'-232,-232,-232,-232,853,884,-232,-232,-232,885,887,-232,449,267,-232',
'893,669,-232,-232,447,-232,449,-232,451,-232,672,-232,-232,-232,-232',
'-232,-232,-232,540,-232,-232,-232,902,-58,208,470,673,471,513,512,511',
'517,514,478,-527,-232,-232,276,-232,208,-232,-527,-527,-527,-232,267',
'-527,-527,-527,516,-527,513,512,511,517,514,482,904,486,-527,-527,-527',
'-527,669,104,105,106,107,108,487,-527,-527,857,-527,-527,-527,-527,-527',
'673,227,513,512,511,517,514,905,519,703,673,493,513,512,511,517,514',
'523,522,526,525,494,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527',
'-527,-527,-527,-527,501,669,-527,-527,-527,502,451,-527,910,536,-527',
'669,365,-527,-527,,-527,,-527,,-527,,-527,-527,-527,-527,-527,-527,-527',
',-527,-527,-527,673,,513,512,511,517,514,104,105,106,107,108,,-527,-527',
'-527,-527,-232,-527,,-527,,-527,,-232,-232,-232,,,-232,-232,-232,,-232',
',,516,519,513,512,511,517,514,-232,,,,,526,525,,,,-232,-232,,-232,-232',
'-232,-232,-232,,,,,673,,513,512,511,517,514,,519,673,,513,512,511,517',
'514,,523,522,526,525,,,,,,,,,-232,,-528,,,,,-232,519,-528,-528,-528',
'267,-232,-528,-528,-528,669,-528,526,525,,,,,,672,-528,-528,-528,-528',
',,,,-232,,,-528,-528,,-528,-528,-528,-528,-528,,,,-232,,,,,-232,,,673',
'-232,513,512,511,517,514,,,,,-528,-528,-528,-528,-528,-528,-528,-528',
'-528,-528,-528,-528,-528,-528,,,-528,-528,-528,,,-528,,,-528,,669,-528',
'-528,,-528,,-528,,-528,,-528,-528,-528,-528,-528,-528,-528,,-528,-528',
'-528,744,,513,512,511,517,514,,,,,,,-528,-528,-528,-528,-391,-528,,-528',
',-528,,-391,-391,-391,,,-391,-391,-391,,-391,227,,,519,,,,,-391,-391',
'-391,,523,522,526,525,241,242,,-391,-391,,-391,-391,-391,-391,-391,',
',,,,224,,230,,226,225,222,223,,,228,,229,,,,,-391,-391,-391,-391,-391',
'-391,-391,-391,-391,-391,-391,-391,-391,-391,,,-391,-391,-391,,,-391',
',267,-391,,,-391,-391,,-391,,-391,,-391,,-391,-391,-391,-391,-391,-391',
'-391,,-391,-391,-391,,673,,513,512,511,517,514,,,,,,-391,-391,,-391',
',-391,,,,-391,5,63,64,65,7,51,,,,57,58,,,,61,519,59,60,62,23,24,66,67',
',,,526,525,22,28,27,90,89,91,92,,673,17,513,512,511,517,514,6,41,8,9',
'94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,673,,513,512,511,517',
'514,673,669,513,512,511,517,514,,,,,,36,,,30,,,52,53,,,54,,32,,,,40',
'673,669,513,512,511,517,514,18,519,,,,81,73,76,77,,78,79,526,525,,74',
'80,5,63,64,65,7,51,56,,75,57,58,,,519,61,,59,60,62,23,24,66,67,,526',
'525,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,673,,513,512,511,517,514,,,,,,36,,',
'278,,,52,53,,,54,,32,,,,40,673,,513,512,511,517,514,18,519,,,,81,73',
'76,77,,78,79,526,525,,74,80,5,63,64,65,7,51,56,,75,57,58,,,519,61,,59',
'60,62,23,24,66,67,,526,525,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9',
'94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,227,,,,,,,673,,513',
'512,511,517,514,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226',
'225,222,223,,,,18,519,,,,81,73,76,77,,78,79,526,525,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,227,-547,-547,-547,-547,233,235,,,-547,-547,,,,,,241,242,,36,,,30',
',,52,53,,,54,,32,224,,230,40,226,225,222,223,234,232,228,18,229,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,227,-547,-547,-547,-547,233,235',
',,-547,-547,,,,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225',
'222,223,234,232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,227,231,236,237,238,233,235,243,,239,240,,,,,,241,242,,36,,,30,,',
'52,53,,,54,,32,224,,230,40,226,225,222,223,234,232,228,18,229,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,227,,,,,,,,,,,,,,,,241,242,,36',
',,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,,,228,18,229,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,227,-547,-547,-547,-547,233,235',
',,-547,-547,,,,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225',
'222,223,234,232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,227,231,236,237,238,233,235,243,244,239,240,,-547,-547,,,241,242',
',36,,,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,234,232,228,18',
'229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61',
',59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,227,231,236,237,238,233',
'235,243,244,239,240,,-547,-547,,,241,242,,36,,,30,,,52,53,,,54,,32,224',
',230,40,226,225,222,223,234,232,228,18,229,,,,81,73,76,77,,78,79,,,',
'74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,',
'22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88',
'96,97,,82,83,38,39,37,227,-547,-547,-547,-547,233,235,,,-547,-547,,',
',,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,234',
'232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75',
'57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,',
',,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,227,-547',
'-547,-547,-547,233,235,,,-547,-547,,,,,,241,242,,36,,,30,,,52,53,,,54',
',32,224,,230,40,226,225,222,223,234,232,228,18,229,,,,81,73,76,77,,78',
'79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,227,-547,-547,-547,-547,233,235,,,-547,-547',
',,,,,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,234',
'232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75',
'57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,',
',,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,227,231',
'236,237,238,233,235,,,239,240,,,,,,241,242,,36,,,30,,,52,53,,,54,,32',
'224,,230,40,226,225,222,223,234,232,228,18,229,,,,81,73,76,77,,78,79',
',,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,',
',,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,',
'88,96,97,,82,83,38,39,37,227,,,,,,,,,,,,,,,,241,242,,36,,,30,,,52,53',
',,54,,32,224,,230,40,226,225,222,223,,,228,18,229,,,,81,73,76,77,,78',
'79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,227,,,,,,,,,,,,,,,,241,242,,36,,,278,,,52',
'53,,,54,,32,224,,230,40,226,225,222,223,,,228,18,229,,,,81,73,76,77',
',78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66',
'67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,227,,,,,,,,,,,,,,,,241,242,,36,,,30,,,52',
'53,,,54,,32,224,,230,40,226,225,222,223,,,,18,,,,,81,73,76,77,,78,79',
',,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,',
',,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,',
'88,96,97,,82,83,38,39,37,227,,,,,,,,,,,,,,,,241,242,,36,,,30,,,52,53',
',,54,,32,224,,,40,226,225,222,223,,,,18,,,,,81,73,76,77,,78,79,,,,74',
'80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40',
',,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57',
'58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6',
'41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78',
'79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32',
',,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,',
'75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17',
',,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,',
',,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,',
',54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7',
'51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92',
',,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53',
',,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52',
'53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64',
'65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,36,,,278,,,52,53,,,54,,32,,,,40,,,,,,,,18,',
',,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93',
'95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,',
'30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28',
'27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,254',
',40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,7,51,56,,75',
'57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,',
',,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,',
',,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77',
',78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66',
'67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,',
',219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93',
'95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,',
',,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,',
',,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261',
'88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,',
'256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91',
'92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,516,293',
'513,512,511,517,514,,,,,,,,,,,,,,,286,,,283,,,52,53,,,54,,282,,,,519',
',,,,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,578,289,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,,293',
',227,231,236,237,238,233,235,243,244,239,240,,220,221,,,241,242,286',
',,218,,,52,53,,,54,,,,224,,230,,226,225,222,223,234,232,228,,229,,,81',
'73,76,77,,78,79,,,,74,80,,,245,295,-226,,56,,75,63,64,65,,51,,,,57,58',
',,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,',
',,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,',
',,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,',
'78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66',
'67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,',
'54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91',
'92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52',
'53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89',
'91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,,,40,,,,,,,,217',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,',
',212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,',
',74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,',
',,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,',
',94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,',
',,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,',
',74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22',
'28,27,90,89,91,92,,,17,,,,,581,,41,,,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,227,231,236,237,238,233,235,243,244,239,240,,220',
'221,,,241,242,,212,,,218,,,52,53,,,54,,,224,,230,40,226,225,222,223',
'234,232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,102,245,,,,101,56',
',75,63,64,65,,51,,,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,,516,293,513,512,511,517,514,,,,,,,,,,,,,,,328,,,30,,,52,53,',
',54,,32,,,,519,505,,,,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,333,50,86,85,334,,88,96,97',
',82,83,,744,293,513,512,511,517,514,,,,,,,,,,,,340,,,335,,,218,,,52',
'53,,,54,,,,,,519,,,,,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,333,50,86,85,334,,88,96,97',
',82,83,,516,293,513,512,511,517,514,,,,,,,,,,,,,,,335,,,218,,,52,53',
',,54,,,,,,519,703,,,,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80',
',63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27',
'90,89,91,92,,,17,,,,,578,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,38,39,37,227,231,236,237,238,233,235,243,244,239,240,,220,221',
',,241,242,,36,,,30,,,52,53,,,54,,32,224,,230,40,226,225,222,223,234',
'232,228,18,229,,,,81,73,76,77,,78,79,,,,74,80,,245,,,,365,56,,75,63',
'64,65,,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,',
',,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,',
'54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,7,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,382,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,382,,,,40,,,,,,,,217,,,,',
'81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,',
'81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52',
'53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,208,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218',
',,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292',
'90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93',
'95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,',
',,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,',
',,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261',
'88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,463,53,,,54',
',256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,',
'51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91',
'92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217',
',,,,81,73,76,77,,78,79,,,,74,80,208,63,64,65,,51,56,,75,57,58,,,,61',
',59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,289',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,,293,227,231,236,237,238',
'233,235,243,244,239,240,,220,221,,,241,242,,286,,,218,,,52,53,,,54,',
',224,,230,,226,225,222,223,234,232,228,,229,,,,81,73,76,77,,78,79,,',
',74,80,,245,,473,,,56,,75,63,64,65,,51,,,,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,,744,293,513,512,511,517,514,,,,,,,,,,',
',,,,286,,,283,,,52,53,,,54,,,,,,519,,,,,,,,,523,522,526,525,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259',
'66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,491,,52',
'53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,',
',,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,',
'54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50',
'86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67',
',,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,609,,254,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,',
',212,,,218,,,52,53,,,54,,,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,',
',,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54',
',,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17',
',,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,',
',,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,254,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,,516,293,513,512,511,517,514,,,,,,,,,,',
',,,,286,,,283,,,52,53,,,54,,,,,,519,,,,,,,,,523,522,526,525,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259',
'66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52',
'53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292',
'90,89,91,92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97,,82',
'83,,516,293,513,512,511,517,514,,,,,,,,,,,,,,,286,,,283,,,52,53,,,54',
',,,,,519,,,,,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,',
',94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,',
',,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,',
',74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,',
',257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88',
'96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,382',
',,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75',
'57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219',
',,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,',
',,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,609,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218',
',,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292',
'90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,,,40,,,,,,',
',217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61',
',59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,',
'94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,212,,,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77',
',78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66',
'67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85',
'87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218',
',,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292',
'90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,720,,,,40,,,,,,',
',217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61',
',59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,',
',,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40',
',,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,',
',,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40',
',,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58',
',,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,',
',,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,',
',,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,',
'78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66',
'67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,',
'54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91',
'92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,516,293',
'513,512,511,517,514,,,,,,,,,,,,,,,286,,,283,,,52,53,,,54,,,,,,519,,',
',,,,,,523,522,526,525,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,',
'75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92',
',,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,,293,,,',
',,,,,,,,,,,,,,,,286,,,283,,,52,53,,,54,,,,,,,,,,,,,,,,,,,81,73,76,77',
',78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66',
'67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,',
'54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,',
',,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259',
'66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53',
',,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,',
',,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,',
',52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,,,,,,217,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,,,,,40,,,',
',,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,',
',,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,',
',,,,,,,,,,,212,,,218,,,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258',
'259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84',
'50,86,85,87,261,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218',
',,52,53,,,54,,256,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,,,293,,,,,,,,,,,,,,,,,,,,839,,,218,,,52,53,,,54,,,,,,,,,,,,,',
',,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288,292,90',
'89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,,609,,,,40,,,,,,,,217',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,,,,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,288',
'292,90,89,91,92,,,219,,,,,,,289,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,,,293,,,,,,,,,,,,,,,,,,,,882,,,218,,,52,53,,,54,,,,,,,,,,,,,',
',,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,258,259,66,67,,,,,,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212',
',,218,,,52,53,,,54,,609,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,',
',,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,',
',,257,288,292,90,89,91,92,,,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261',
'88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,212,,,218,,,52,53,,,54,',
'609,,254,,40,,,,,,,,217,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92',
',,219,,,,,,,41,,,94,93,95,84,50,86,85,87,261,88,96,97,,82,83,38,39,37',
'227,231,236,237,238,233,235,243,244,239,240,,220,221,,,241,242,,212',
',-226,218,,,52,53,,,54,,256,224,254,230,40,226,225,222,223,234,232,228',
'217,229,,,,81,73,76,77,,78,79,,,,74,80,,245,,-226,,,56,,75,160,171,161',
'184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158,172',
'176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,,155',
'162,153,154,150,151,152,112,114,,,113,,,,,,,,145,146,,142,124,125,126',
'133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123,144',
'141,140,136,137,131,129,121,143,122,,,149,81,,,,,,,,,,,80,160,171,161',
'184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158,172',
'176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,,155',
'162,153,154,150,151,152,112,114,111,,113,,,,,,,,145,146,,142,124,125',
'126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,,,149,81,,,,,,,,,,,80,160,171',
'161,184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158',
'172,176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,',
'155,162,153,154,150,151,152,112,114,,,113,,,,,,,,145,146,,142,124,125',
'126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,,,149,81,,,,,,,,,,,80,160,171',
'161,184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158',
'172,176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,',
'155,162,153,154,150,151,152,112,114,,,113,,,,,,,,145,146,,142,124,125',
'126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,,,149,81,,,,,,,,,,,80,160,171',
'161,184,157,177,167,166,187,188,182,165,164,159,185,189,190,169,158',
'172,176,178,170,163,,,,179,186,181,180,173,183,168,156,175,174,,,,,',
'155,162,153,154,150,151,152,112,114,,,113,,,,,,,,145,146,,142,124,125',
'126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,,,149,160,171,161,184,157,177',
'167,166,187,188,182,165,164,159,185,189,190,169,158,172,176,178,170',
'163,,,,179,186,181,350,349,351,348,156,175,174,,,,,,155,162,153,154',
'345,346,347,343,114,86,85,344,,88,,,,,,145,146,,142,124,125,126,133',
'130,132,,,127,128,,,,147,148,134,135,,,,,,355,,,,,,,,139,138,,123,144',
'141,140,136,137,131,129,121,143,122,597,402,149,,598,,,,,,,,145,146',
',142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,267,',
',,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,944,402,149',
',943,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148',
'134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121',
'143,122,595,395,149,,596,,,,,,,,145,146,,142,124,125,126,133,130,132',
',,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140',
'136,137,131,129,121,143,122,688,395,149,,689,,,,,,,,145,146,,142,124',
'125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139',
'138,,123,144,141,140,136,137,131,129,121,143,122,927,402,149,,928,,',
',,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135',
',,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122',
'635,402,149,,636,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128',
',,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137',
'131,129,121,143,122,391,395,149,,392,,,,,,,,145,146,,142,124,125,126',
'133,130,132,,,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,632,395,149,,633,,,,,,,,145',
'146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,267',
',,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,925,395',
'149,,926,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147',
'148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131,129',
'121,143,122,397,402,149,,399,,,,,,,,145,146,,142,124,125,126,133,130',
'132,,,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141',
'140,136,137,131,129,121,143,122,455,395,149,,456,,,,,,,,145,146,,142',
'124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139',
'138,,123,144,141,140,136,137,131,129,121,143,122,455,395,149,,456,,',
',,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135',
',,,,,,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,595',
'395,149,,596,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,',
',,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131',
'129,121,143,122,690,402,149,,691,,,,,,,,145,146,,142,124,125,126,133',
'130,132,,,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144',
'141,140,136,137,131,129,121,143,122,693,402,149,,694,,,,,,,,145,146',
',142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,267,',
',,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,455,395,149',
',456,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148',
'134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121',
'143,122,597,402,149,,598,,,,,,,,145,146,,142,124,125,126,133,130,132',
',,127,128,,,,147,148,134,135,,,,,,267,,,,,,,,139,138,,123,144,141,140',
'136,137,131,129,121,143,122,,,149,227,231,236,237,238,233,235,243,244',
'239,240,,220,221,,,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234',
'232,228,,229,,227,231,236,237,238,233,235,243,244,239,240,,220,221,',
'245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229',
',227,231,236,237,238,233,235,243,244,239,240,,220,221,,245,241,242,',
',,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229,,227,231,236',
'237,238,233,235,243,244,239,240,,220,221,208,245,241,242,,,,,,,,,,,',
',,,224,,230,,226,225,222,223,234,232,228,,229,,227,231,236,237,238,233',
'235,243,244,239,240,,220,221,,245,241,242,,,,,,,,,,,,,,,224,,230,,226',
'225,222,223,234,232,228,,229,,227,231,236,237,238,233,235,243,244,239',
'240,,220,221,,245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234',
'232,228,,229,,227,231,236,237,238,233,235,243,244,239,240,,220,221,',
'245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229',
',227,231,236,237,238,233,235,243,244,239,240,,220,221,,245,241,242,',
',,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229,,227,231,236',
'237,238,233,235,243,244,239,240,,220,221,,245,241,242,,,,,,,,,,,,,,',
'224,,230,,226,225,222,223,234,232,228,,229,,227,231,236,237,238,233',
'235,243,244,239,240,,220,221,,245,241,242,,,,,,,,,,,,,,,224,,230,,226',
'225,222,223,234,232,228,,229,,227,231,236,237,238,233,235,243,244,239',
'240,,220,221,,245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234',
'232,228,,229,,227,231,236,237,238,233,235,243,244,239,240,,220,221,',
'245,241,242,,,,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229',
',227,231,236,237,238,233,235,243,244,239,240,,220,221,,245,241,242,',
',,,,,,,,,,,,,224,,230,,226,225,222,223,234,232,228,,229,,,,,,,,,,,,',
',,,,245' ]
        racc_action_table = arr = ::Array.new(23312, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'87,799,799,799,799,799,799,87,87,87,799,799,87,87,87,799,87,799,799',
'799,799,799,799,799,87,55,87,87,87,799,799,799,799,799,799,799,87,87',
'799,87,87,87,87,87,799,799,799,799,799,799,799,799,799,799,799,799,339',
'799,799,799,319,799,799,799,799,799,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,266,619,87,87,87,799,87,87,799,533,87,799,799,87,87,799,87',
'799,87,361,87,799,87,87,87,87,87,87,87,799,87,55,87,690,799,799,799',
'799,652,799,799,652,329,619,799,799,87,87,87,87,84,87,799,87,799,87',
'87,84,84,84,540,213,84,84,84,800,84,866,928,866,765,558,558,17,84,688',
'84,84,84,643,643,339,361,15,15,504,84,84,532,84,84,84,84,84,319,686',
'837,927,690,319,689,339,326,926,840,925,339,409,409,533,17,213,330,596',
'533,465,84,84,84,84,84,84,84,84,84,84,84,84,84,84,323,874,84,84,84,323',
'84,84,690,946,84,861,758,84,84,928,84,329,84,465,84,376,84,84,84,84',
'84,84,84,399,84,558,84,596,320,540,399,399,399,643,800,377,399,399,927',
'399,84,84,84,84,688,84,928,84,765,84,84,928,532,765,504,691,801,532',
'875,399,399,409,399,399,399,399,399,893,383,689,616,326,758,686,837',
'927,686,633,686,837,927,926,840,925,211,632,926,840,925,399,399,399',
'399,399,399,399,399,399,399,399,399,399,399,736,616,399,399,399,758',
'399,335,758,595,399,335,569,399,946,758,861,691,399,946,399,861,399',
'399,399,399,399,399,399,397,399,211,399,552,552,415,397,397,397,320',
'633,516,397,397,320,397,399,399,632,399,736,399,26,801,397,399,399,691',
'801,595,343,290,334,936,936,397,397,343,397,397,397,397,397,569,569',
'464,633,313,893,633,313,359,569,893,632,415,633,632,360,310,516,385',
'310,389,632,397,397,397,397,397,397,397,397,397,397,397,397,397,397',
'464,744,397,397,397,334,397,26,309,343,397,309,334,397,552,693,290,334',
'397,552,397,334,397,397,397,397,397,397,397,26,397,397,397,359,359,359',
'445,627,290,334,360,360,360,357,627,598,397,397,191,397,744,397,598',
'598,598,397,397,598,598,598,111,598,398,334,704,111,111,693,344,704',
'445,598,598,598,693,344,307,307,98,693,71,598,598,693,598,598,598,598',
'598,71,297,411,857,635,857,857,857,857,857,71,876,693,698,345,357,357',
'357,698,293,293,345,598,598,598,598,598,598,598,598,598,598,598,598',
'598,598,693,344,598,598,598,877,598,598,297,879,598,318,318,598,598',
'297,598,392,598,423,598,424,598,598,598,598,598,598,598,425,598,426',
'598,635,635,603,345,603,603,603,603,603,362,37,37,857,598,598,598,598',
'597,598,882,598,346,598,598,597,597,597,392,346,597,597,597,948,597',
'392,677,677,635,460,603,635,422,597,597,597,597,889,635,603,603,603',
'603,466,597,597,14,597,597,597,597,597,672,468,672,672,672,672,672,347',
'358,362,362,362,422,469,347,3,422,422,346,472,3,603,597,597,597,597',
'597,597,597,597,597,597,597,597,597,597,551,14,597,597,597,551,597,597',
'14,958,597,474,348,597,597,479,597,391,597,348,597,483,597,597,597,597',
'597,597,597,347,597,597,597,358,358,358,337,349,13,895,896,897,672,337',
'349,13,597,597,597,597,50,597,337,597,13,597,597,50,50,50,391,35,50',
'50,50,492,50,391,898,495,348,899,694,350,506,507,50,50,50,694,350,508',
'509,517,694,524,50,50,694,50,50,50,50,50,337,349,13,527,529,582,41,351',
'534,353,35,25,535,901,351,566,353,35,25,572,1,579,50,50,50,50,50,50',
'50,50,50,50,50,50,50,50,694,350,50,50,50,421,583,50,586,922,50,590,582',
'50,50,924,50,36,50,582,50,599,50,50,50,50,50,50,50,351,50,353,50,25',
'601,34,478,421,42,606,608,421,421,478,620,42,50,50,50,50,28,50,478,50',
'42,50,622,28,28,28,629,631,28,28,28,853,28,853,853,853,853,853,210,440',
'634,637,28,28,845,210,845,845,845,333,845,638,28,28,210,28,28,28,28',
'28,478,657,42,657,657,657,641,657,853,642,644,440,20,647,648,440,440',
'440,440,853,853,656,28,28,28,28,28,28,28,28,28,28,28,28,28,28,210,665',
'28,28,28,333,671,28,673,28,28,674,333,28,28,679,28,333,28,684,28,333',
'28,28,28,28,28,28,28,687,28,696,28,701,543,719,441,935,937,333,938,543',
'939,738,739,457,28,28,740,28,543,28,457,457,457,28,742,457,457,457,838',
'457,284,333,743,746,940,838,441,284,12,457,441,441,441,441,838,941,284',
'754,755,457,457,285,457,457,457,457,457,287,285,756,543,757,881,300',
'287,327,11,285,636,881,300,942,327,287,769,636,770,771,881,300,636,327',
'772,776,636,777,838,780,284,781,457,783,393,786,788,791,943,457,794',
'393,393,393,457,457,393,393,393,10,393,285,4,4,4,4,4,287,9,393,393,393',
'881,300,944,327,8,457,636,212,393,393,214,393,393,393,393,393,562,562',
'215,457,562,562,562,219,457,803,807,669,457,669,669,669,669,669,808',
'811,812,824,393,393,393,393,393,393,393,393,393,393,393,393,393,393',
'947,827,393,393,393,828,829,393,831,393,393,839,669,393,393,251,393',
'252,393,255,393,669,393,393,393,393,393,393,393,328,393,393,393,859',
'277,279,280,787,281,787,787,787,787,787,286,402,393,393,288,393,289',
'393,402,402,402,393,292,402,402,402,554,402,554,554,554,554,554,294',
'863,298,402,402,402,402,787,109,109,109,109,109,299,402,402,787,402',
'402,402,402,402,789,302,789,789,789,789,789,864,554,554,858,305,858',
'858,858,858,858,554,554,554,554,306,402,402,402,402,402,402,402,402',
'402,402,402,402,402,402,311,789,402,402,402,312,314,402,869,324,402',
'858,325,402,402,,402,,402,,402,,402,402,402,402,402,402,402,,402,402',
'402,849,,849,849,849,849,849,364,364,364,364,364,,402,402,402,402,454',
'402,,402,,402,,454,454,454,,,454,454,454,,454,,,505,849,505,505,505',
'505,505,454,,,,,849,849,,,,454,454,,454,454,454,454,454,,,,,953,,953',
'953,953,953,953,,505,519,,519,519,519,519,519,,505,505,505,505,,,,,',
',,,454,,403,,,,,454,953,403,403,403,454,454,403,403,403,519,403,953',
'953,,,,,,519,403,403,403,403,,,,,454,,,403,403,,403,403,403,403,403',
',,,454,,,,,454,,,902,454,902,902,902,902,902,,,,,403,403,403,403,403',
'403,403,403,403,403,403,403,403,403,,,403,403,403,,,403,,,403,,902,403',
'403,,403,,403,,403,,403,403,403,403,403,403,403,,403,403,403,912,,912',
'912,912,912,912,,,,,,,403,403,403,403,27,403,,403,,403,,27,27,27,,,27',
'27,27,,27,431,,,912,,,,,27,27,27,,912,912,912,912,431,431,,27,27,,27',
'27,27,27,27,,,,,,431,,431,,431,431,431,431,,,431,,431,,,,,27,27,27,27',
'27,27,27,27,27,27,27,27,27,27,,,27,27,27,,,27,,27,27,,,27,27,,27,,27',
',27,,27,27,27,27,27,27,27,,27,27,27,,915,,915,915,915,915,915,,,,,,27',
'27,,27,,27,,,,27,0,0,0,0,0,0,,,,0,0,,,,0,915,0,0,0,0,0,0,0,,,,915,915',
'0,0,0,0,0,0,0,,900,0,900,900,900,900,900,0,0,0,0,0,0,0,0,0,0,0,0,,0',
'0,0,,0,0,0,0,0,934,,934,934,934,934,934,917,900,917,917,917,917,917',
',,,,,0,,,0,,,0,0,,,0,,0,,,,0,822,934,822,822,822,822,822,0,917,,,,0',
'0,0,0,,0,0,917,917,,0,0,283,283,283,283,283,283,0,,0,283,283,,,822,283',
',283,283,283,283,283,283,283,,822,822,,,283,283,283,283,283,283,283',
',,283,,,,,,283,283,283,283,283,283,283,283,283,283,283,283,,283,283',
'283,,283,283,283,283,283,,,,,,,,930,,930,930,930,930,930,,,,,,283,,',
'283,,,283,283,,,283,,283,,,,283,851,,851,851,851,851,851,283,930,,,',
'283,283,283,283,,283,283,930,930,,283,283,697,697,697,697,697,697,283',
',283,697,697,,,851,697,,697,697,697,697,697,697,697,,851,851,,,697,697',
'697,697,697,697,697,,,697,,,,,,697,697,697,697,697,697,697,697,697,697',
'697,697,,697,697,697,,697,697,697,697,697,428,,,,,,,664,,664,664,664',
'664,664,,,428,428,,697,,,697,,,697,697,,,697,,697,428,,428,697,428,428',
'428,428,,,,697,664,,,,697,697,697,697,,697,697,664,664,,697,697,605',
'605,605,605,605,605,697,,697,605,605,,,,605,,605,605,605,605,605,605',
'605,,,,,,605,605,605,605,605,605,605,,,605,,,,,,605,605,605,605,605',
'605,605,605,605,605,605,605,,605,605,605,,605,605,605,605,605,436,436',
'436,436,436,436,436,,,436,436,,,,,,436,436,,605,,,605,,,605,605,,,605',
',605,436,,436,605,436,436,436,436,436,436,436,605,436,,,,605,605,605',
'605,,605,605,,,,605,605,553,553,553,553,553,553,605,,605,553,553,,,',
'553,,553,553,553,553,553,553,553,,,,,,553,553,553,553,553,553,553,,',
'553,,,,,,553,553,553,553,553,553,553,553,553,553,553,553,,553,553,553',
',553,553,553,553,553,430,430,430,430,430,430,430,,,430,430,,,,,,430',
'430,,553,,,553,,,553,553,,,553,,553,430,,430,553,430,430,430,430,430',
'430,430,553,430,,,,553,553,553,553,,553,553,,,,553,553,796,796,796,796',
'796,796,553,,553,796,796,,,,796,,796,796,796,796,796,796,796,,,,,,796',
'796,796,796,796,796,796,,,796,,,,,,796,796,796,796,796,796,796,796,796',
'796,796,796,,796,796,796,,796,796,796,796,796,443,443,443,443,443,443',
'443,443,,443,443,,,,,,443,443,,796,,,796,,,796,796,,,796,,796,443,,443',
'796,443,443,443,443,443,443,443,796,443,,,,796,796,796,796,,796,796',
',,,796,796,218,218,218,218,218,218,796,,796,218,218,,,,218,,218,218',
'218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,218',
'218,218,218,218,218,218,218,218,218,218,218,,218,218,218,,218,218,218',
'218,218,432,,,,,,,,,,,,,,,,432,432,,218,,,218,,,218,218,,,218,,218,432',
',432,218,432,432,432,432,,,432,218,432,,,,218,218,218,218,,218,218,',
',,218,218,795,795,795,795,795,795,218,,218,795,795,,,,795,,795,795,795',
'795,795,795,795,,,,,,795,795,795,795,795,795,795,,,795,,,,,,795,795',
'795,795,795,795,795,795,795,795,795,795,,795,795,795,,795,795,795,795',
'795,435,435,435,435,435,435,435,,,435,435,,,,,,435,435,,795,,,795,,',
'795,795,,,795,,795,435,,435,795,435,435,435,435,435,435,435,795,435',
',,,795,795,795,795,,795,795,,,,795,795,762,762,762,762,762,762,795,',
'795,762,762,,,,762,,762,762,762,762,762,762,762,,,,,,762,762,762,762',
'762,762,762,,,762,,,,,,762,762,762,762,762,762,762,762,762,762,762,762',
',762,762,762,,762,762,762,762,762,420,420,420,420,420,420,420,420,420',
'420,420,,420,420,,,420,420,,762,,,762,,,762,762,,,762,,762,420,,420',
'762,420,420,420,420,420,420,420,762,420,,,,762,762,762,762,,762,762',
',,,762,762,531,531,531,531,531,531,762,,762,531,531,,,,531,,531,531',
'531,531,531,531,531,,,,,,531,531,531,531,531,531,531,,,531,,,,,,531',
'531,531,531,531,531,531,531,531,531,531,531,,531,531,531,,531,531,531',
'531,531,419,419,419,419,419,419,419,419,419,419,419,,419,419,,,419,419',
',531,,,531,,,531,531,,,531,,531,419,,419,531,419,419,419,419,419,419',
'419,531,419,,,,531,531,531,531,,531,531,,,,531,531,528,528,528,528,528',
'528,531,,531,528,528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528',
'528,528,528,528,528,,,528,,,,,,528,528,528,528,528,528,528,528,528,528',
'528,528,,528,528,528,,528,528,528,528,528,439,439,439,439,439,439,439',
',,439,439,,,,,,439,439,,528,,,528,,,528,528,,,528,,528,439,,439,528',
'439,439,439,439,439,439,439,528,439,,,,528,528,528,528,,528,528,,,,528',
'528,51,51,51,51,51,51,528,,528,51,51,,,,51,,51,51,51,51,51,51,51,,,',
',,51,51,51,51,51,51,51,,,51,,,,,,51,51,51,51,51,51,51,51,51,51,51,51',
',51,51,51,,51,51,51,51,51,437,437,437,437,437,437,437,,,437,437,,,,',
',437,437,,51,,,51,,,51,51,,,51,,51,437,,437,51,437,437,437,437,437,437',
'437,51,437,,,,51,51,51,51,,51,51,,,,51,51,750,750,750,750,750,750,51',
',51,750,750,,,,750,,750,750,750,750,750,750,750,,,,,,750,750,750,750',
'750,750,750,,,750,,,,,,750,750,750,750,750,750,750,750,750,750,750,750',
',750,750,750,,750,750,750,750,750,438,438,438,438,438,438,438,,,438',
'438,,,,,,438,438,,750,,,750,,,750,750,,,750,,750,438,,438,750,438,438',
'438,438,438,438,438,750,438,,,,750,750,750,750,,750,750,,,,750,750,712',
'712,712,712,712,712,750,,750,712,712,,,,712,,712,712,712,712,712,712',
'712,,,,,,712,712,712,712,712,712,712,,,712,,,,,,712,712,712,712,712',
'712,712,712,712,712,712,712,,712,712,712,,712,712,712,712,712,442,442',
'442,442,442,442,442,,,442,442,,,,,,442,442,,712,,,712,,,712,712,,,712',
',712,442,,442,712,442,442,442,442,442,442,442,712,442,,,,712,712,712',
'712,,712,712,,,,712,712,702,702,702,702,702,702,712,,712,702,702,,,',
'702,,702,702,702,702,702,702,702,,,,,,702,702,702,702,702,702,702,,',
'702,,,,,,702,702,702,702,702,702,702,702,702,702,702,702,,702,702,702',
',702,702,702,702,702,434,,,,,,,,,,,,,,,,434,434,,702,,,702,,,702,702',
',,702,,702,434,,434,702,434,434,434,434,,,434,702,434,,,,702,702,702',
'702,,702,702,,,,702,702,278,278,278,278,278,278,702,,702,278,278,,,',
'278,,278,278,278,278,278,278,278,,,,,,278,278,278,278,278,278,278,,',
'278,,,,,,278,278,278,278,278,278,278,278,278,278,278,278,,278,278,278',
',278,278,278,278,278,433,,,,,,,,,,,,,,,,433,433,,278,,,278,,,278,278',
',,278,,278,433,,433,278,433,433,433,433,,,433,278,433,,,,278,278,278',
'278,,278,278,,,,278,278,655,655,655,655,655,655,278,,278,655,655,,,',
'655,,655,655,655,655,655,655,655,,,,,,655,655,655,655,655,655,655,,',
'655,,,,,,655,655,655,655,655,655,655,655,655,655,655,655,,655,655,655',
',655,655,655,655,655,427,,,,,,,,,,,,,,,,427,427,,655,,,655,,,655,655',
',,655,,655,427,,427,655,427,427,427,427,,,,655,,,,,655,655,655,655,',
'655,655,,,,655,655,909,909,909,909,909,909,655,,655,909,909,,,,909,',
'909,909,909,909,909,909,909,,,,,,909,909,909,909,909,909,909,,,909,',
',,,,909,909,909,909,909,909,909,909,909,909,909,909,,909,909,909,,909',
'909,909,909,909,429,,,,,,,,,,,,,,,,429,429,,909,,,909,,,909,909,,,909',
',909,429,,,909,429,429,429,429,,,,909,,,,,909,909,909,909,,909,909,',
',,909,909,654,654,654,654,654,654,909,,909,654,654,,,,654,,654,654,654',
'654,654,654,654,,,,,,654,654,654,654,654,654,654,,,654,,,,,,654,654',
'654,654,654,654,654,654,654,654,654,654,,654,654,654,,654,654,654,654',
'654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,654,,,,654,,,,,,,',
'654,,,,,654,654,654,654,,654,654,,,,654,654,646,646,646,646,646,646',
'654,,654,646,646,,,,646,,646,646,646,646,646,646,646,,,,,,646,646,646',
'646,646,646,646,,,646,,,,,,646,646,646,646,646,646,646,646,646,646,646',
'646,,646,646,646,,646,646,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646,',
',646,646,,,646,,646,,,,646,,,,,,,,646,,,,,646,646,646,646,,646,646,',
',,646,646,903,903,903,903,903,903,646,,646,903,903,,,,903,,903,903,903',
'903,903,903,903,,,,,,903,903,903,903,903,903,903,,,903,,,,,,903,903',
'903,903,903,903,903,903,903,903,903,903,,903,903,903,,903,903,903,903',
'903,,,,,,,,,,,,,,,,,,,,903,,,903,,,903,903,,,903,,903,,,,903,,,,,,,',
'903,,,,,903,903,903,903,,903,903,,,,903,903,911,911,911,911,911,911',
'903,,903,911,911,,,,911,,911,911,911,911,911,911,911,,,,,,911,911,911',
'911,911,911,911,,,911,,,,,,911,911,911,911,911,911,911,911,911,911,911',
'911,,911,911,911,,911,911,911,911,911,,,,,,,,,,,,,,,,,,,,911,,,911,',
',911,911,,,911,,911,,,,911,,,,,,,,911,,,,,911,911,911,911,,911,911,',
',,911,911,836,836,836,836,836,836,911,,911,836,836,,,,836,,836,836,836',
'836,836,836,836,,,,,,836,836,836,836,836,836,836,,,836,,,,,,836,836',
'836,836,836,836,836,836,836,836,836,836,,836,836,836,,836,836,836,836',
'836,,,,,,,,,,,,,,,,,,,,836,,,836,,,836,836,,,836,,836,,,,836,,,,,,,',
'836,,,,,836,836,836,836,,836,836,,,,836,836,625,625,625,625,625,625',
'836,,836,625,625,,,,625,,625,625,625,625,625,625,625,,,,,,625,625,625',
'625,625,625,625,,,625,,,,,,625,625,625,625,625,625,625,625,625,625,625',
'625,,625,625,625,,625,625,625,625,625,,,,,,,,,,,,,,,,,,,,625,,,625,',
',625,625,,,625,,625,,,,625,,,,,,,,625,,,,,625,625,625,625,,625,625,',
',,625,625,624,624,624,624,624,624,625,,625,624,624,,,,624,,624,624,624',
'624,624,624,624,,,,,,624,624,624,624,624,624,624,,,624,,,,,,624,624',
'624,624,624,624,624,624,624,624,624,624,,624,624,624,,624,624,624,624',
'624,,,,,,,,,,,,,,,,,,,,624,,,624,,,624,624,,,624,,624,,,,624,,,,,,,',
'624,,,,,624,624,624,624,,624,624,,,,624,624,193,193,193,193,193,193',
'624,,624,193,193,,,,193,,193,193,193,193,193,193,193,,,,,,193,193,193',
'193,193,193,193,,,193,,,,,,193,193,193,193,193,193,193,193,193,193,193',
'193,,193,193,193,,193,193,193,193,193,,,,,,,,,,,,,,,,,,,,193,,,193,',
',193,193,,,193,,193,,,,193,,,,,,,,193,,,,,193,193,193,193,,193,193,',
',,193,193,194,194,194,194,194,194,193,,193,194,194,,,,194,,194,194,194',
'194,194,194,194,,,,,,194,194,194,194,194,194,194,,,194,,,,,,194,194',
'194,194,194,194,194,194,194,194,194,194,,194,194,194,,194,194,194,194',
'194,,,,,,,,,,,,,,,,,,,,194,,,194,,,194,194,,,194,,194,,,,194,,,,,,,',
'194,,,,,194,194,194,194,,194,194,,,,194,194,30,30,30,30,30,30,194,,194',
'30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,',
',,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,30,,30,30,30,30,30,,,,',
',,,,,,,,,,,,,,,30,,,30,,,30,30,,,30,,30,,,,30,,,,,,,,30,,,,,30,30,30',
'30,,30,30,,,,30,30,805,805,805,805,805,805,30,,30,805,805,,,,805,,805',
'805,805,805,805,805,805,,,,,,805,805,805,805,805,805,805,,,805,,,,,',
'805,805,805,805,805,805,805,805,805,805,805,805,,805,805,805,,805,805',
'805,805,805,,,,,,,,,,,,,,,,,,,,805,,,805,,,805,805,,,805,,805,,,,805',
',,,,,,,805,,,,,805,805,805,805,,805,805,,,,805,805,,198,198,198,,198',
'805,,805,198,198,,,,198,,198,198,198,198,198,198,198,,,,,,198,198,198',
'198,198,198,198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,198,198',
'198,198,198,,198,198,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,,198',
'198,,,198,,198,,198,,198,,,,,,,,198,,,,,198,198,198,198,,198,198,,,',
'198,198,,5,5,5,5,5,198,,198,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5',
'5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,',
',,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5,,,,5,5,,18,18',
'18,,18,5,,5,18,18,,,,18,,18,18,18,18,18,18,18,,,,,,18,18,18,18,18,18',
'18,,,18,,,,,,,18,,,18,18,18,18,18,18,18,18,,18,18,18,,18,18,18,18,18',
',,,,,,,,,,,,,,,,,,,18,,,18,,,18,18,,,18,,,,,,18,,,,,,,,18,,,,,18,18',
'18,18,,18,18,,,,18,18,,22,22,22,,22,18,,18,22,22,,,,22,,22,22,22,22',
'22,22,22,,,,,,22,22,22,22,22,22,22,,,22,,,,,,,22,,,22,22,22,22,22,22',
'22,22,22,22,22,22,,22,22,22,22,22,,,,,,,,,,,,,,,,,,,,22,,,22,,,22,22',
',,22,,22,,22,,22,,,,,,,,22,,,,,22,22,22,22,,22,22,,,,22,22,,23,23,23',
',23,22,,22,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23',
'23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,23,23,23,23,,23,23,23,23',
'23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,23,,23,,23,,,,,,,,23,,,',
',23,23,23,23,,23,23,,,,23,23,,24,24,24,,24,23,,23,24,24,,,,24,,24,24',
'24,24,24,24,24,,,,,,24,24,24,24,24,24,24,,,24,,,,,,,24,,,24,24,24,24',
'24,24,24,24,24,24,24,24,,24,24,24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24,',
',24,24,,,24,,24,,24,,24,,,,,,,,24,,,,,24,24,24,24,,24,24,,,,24,24,,31',
'31,31,,31,24,,24,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31',
'31,31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,,31,31,31,,31,31,,846',
'31,846,846,846,846,846,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,,,846',
',,,,,,,,846,846,846,846,31,31,31,31,,31,31,,,,31,31,,32,32,32,,32,31',
',31,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32',
',,,,,380,32,,,32,32,32,32,32,32,32,32,,32,32,32,,32,32,,,32,,380,380',
'380,380,380,380,380,380,380,380,380,,380,380,,,380,380,32,,,32,,,32',
'32,,,32,,,,380,,380,,380,380,380,380,380,380,380,,380,,,32,32,32,32',
',32,32,,,,32,32,,,380,32,380,,32,,32,38,38,38,,38,,,,38,38,,,,38,,38',
'38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38',
'38,38,38,38,38,,38,38,38,,38,38,38,38,38,,,,,,,,,,,,,,,,,,,,38,,,38',
',,38,38,,,38,,,,,,38,,,,,,,,38,,,,,38,38,38,38,,38,38,,,,38,38,,39,39',
'39,,39,38,,38,39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39,39,39,39,39',
'39,39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39,39,39,,39,39,39,39',
'39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,,,,,39,,,,,,,,39,,,,,39',
'39,39,39,,39,39,,,,39,39,,40,40,40,,40,39,,39,40,40,,,,40,,40,40,40',
'40,40,40,40,,,,,,40,40,40,40,40,40,40,,,40,,,,,,,40,,,40,40,40,40,40',
'40,40,40,,40,40,40,,40,40,40,40,40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,40',
',,40,,,,,,40,,,,,,,,40,,,,,40,40,40,40,,40,40,,,,40,40,,52,52,52,,52',
'40,,40,52,52,,,,52,,52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52,52,',
',52,,,,,,,52,,,52,52,52,52,52,52,52,52,,52,52,52,,52,52,52,52,52,,,',
',,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,52,,,,,52,52,52',
'52,,52,52,,,,52,52,,53,53,53,,53,52,,52,53,53,,,,53,,53,53,53,53,53',
'53,53,,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53,53,53,53,53,53,53',
'53,53,53,53,53,,53,53,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,53,,',
'53,,53,,,,53,,,,,,,,53,,,,,53,53,53,53,,53,53,,,,53,53,,54,54,54,,54',
'53,,53,54,54,,,,54,,54,54,54,54,54,54,54,,,,,,54,54,54,54,54,54,54,',
',54,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,54,54,,54,54,54,54,54,',
',,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,,54,,,,,,54,,,,,,,,54,,,,,54,54,54',
'54,,54,54,,,,54,54,,57,57,57,,57,54,,54,57,57,,,,57,,57,57,57,57,57',
'57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57,57,57,57,57,57',
'57,,57,57,57,,57,57,57,57,57,,,,,,,,,,,,,,,,,,,,57,,,57,,,57,57,,,57',
',,,,,57,,,,,,,,57,,,,,57,57,57,57,,57,57,,,,57,57,,58,58,58,,58,57,',
'57,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58',
',,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58,,58,58,58,58,58,,,,,,,',
',,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,,,,,,58,,,,,58,58,58,58,',
'58,58,,,,58,58,,61,61,61,,61,58,,58,61,61,,,,61,,61,61,61,61,61,61,61',
',,,,,61,61,61,61,61,61,61,,,61,,,,,388,,61,,,61,61,61,61,61,61,61,61',
',61,61,61,,61,61,61,61,61,388,388,388,388,388,388,388,388,388,388,388',
',388,388,,,388,388,,61,,,61,,,61,61,,,61,,,388,,388,61,388,388,388,388',
'388,388,388,61,388,,,,61,61,61,61,,61,61,,,,61,61,61,388,,,,61,61,,61',
'62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62',
'62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,,62,62,62,,62,62,,317',
'62,317,317,317,317,317,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,317',
'317,,,,,,,,317,317,317,317,62,62,62,62,,62,62,,,,62,62,,63,63,63,,63',
'62,,62,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,',
',63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,817,63,817',
'817,817,817,817,,,,,,,,,,,,63,,,63,,,63,,,63,63,,,63,,,,,,817,,,,,,',
',,817,817,817,817,63,63,63,63,,63,63,,,,63,63,,64,64,64,,64,63,,63,64',
'64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,',
'64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,,872,64,872,872,872,872',
'872,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,872,872,,,,,,,,872,872,872',
'872,64,64,64,64,,64,64,,,,64,64,,100,100,100,100,100,64,,64,100,100',
',,,100,,100,100,100,100,100,100,100,,,,,,100,100,100,100,100,100,100',
',,100,,,,,600,100,100,100,100,100,100,100,100,100,100,100,100,,100,100',
'100,,100,100,100,100,100,600,600,600,600,600,600,600,600,600,600,600',
',600,600,,,600,600,,100,,,100,,,100,100,,,100,,100,600,,600,100,600',
'600,600,600,600,600,600,100,600,,,,100,100,100,100,,100,100,,,,100,100',
',600,,,,100,100,,100,104,104,104,,104,,,,104,104,,,,104,,104,104,104',
'104,104,104,104,,,,,,104,104,104,104,104,104,104,,,104,,,,,,,104,,,104',
'104,104,104,104,104,104,104,,104,104,104,,104,104,104,104,104,,,,,,',
',,,,,,,,,,,,,104,,,104,,,104,104,,,104,,,,,,104,,,,,,,,104,,,,,104,104',
'104,104,,104,104,,,,104,104,,105,105,105,,105,104,,104,105,105,,,,105',
',105,105,105,105,105,105,105,,,,,,105,105,105,105,105,105,105,,,105',
',,,,,,105,,,105,105,105,105,105,105,105,105,,105,105,105,,105,105,105',
'105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,105,,,105,,,,,,105,,,,,,',
',105,,,,,105,105,105,105,,105,105,,,,105,105,,106,106,106,,106,105,',
'105,106,106,,,,106,,106,106,106,106,106,106,106,,,,,,106,106,106,106',
'106,106,106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,106,,106,106',
'106,,106,106,106,106,106,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,106,,,106',
',,,,,106,,,,,,,,106,,,,,106,106,106,106,,106,106,,,,106,106,,107,107',
'107,,107,106,,106,107,107,,,,107,,107,107,107,107,107,107,107,,,,,,107',
'107,107,107,107,107,107,,,107,,,,,,,107,,,107,107,107,107,107,107,107',
'107,,107,107,107,,107,107,107,107,107,,,,,,,,,,,,,,,,,,,,107,,,107,',
',107,107,,,107,,,,,,107,,,,,,,,107,,,,,107,107,107,107,,107,107,,,,107',
'107,,108,108,108,108,108,107,,107,108,108,,,,108,,108,108,108,108,108',
'108,108,,,,,,108,108,108,108,108,108,108,,,108,,,,,,108,108,108,108',
'108,108,108,108,108,108,108,108,,108,108,108,,108,108,108,108,108,,',
',,,,,,,,,,,,,,,,,108,,,108,,,108,108,,,108,,108,,,,108,,,,,,,,108,,',
',,108,108,108,108,,108,108,,,,108,108,,195,195,195,,195,108,,108,195',
'195,,,,195,,195,195,195,195,195,195,195,,,,,,195,195,195,195,195,195',
'195,,,195,,,,,,,195,,,195,195,195,195,195,195,195,195,,195,195,195,',
'195,195,195,195,195,,,,,,,,,,,,,,,,,,,,195,,,195,,,195,195,,,195,,195',
',,,195,,,,,,,,195,,,,,195,195,195,195,,195,195,,,,195,195,,196,196,196',
',196,195,,195,196,196,,,,196,,196,196,196,196,196,196,196,,,,,,196,196',
'196,196,196,196,196,,,196,,,,,,,196,,,196,196,196,196,196,196,196,196',
',196,196,196,,196,196,196,196,196,,,,,,,,,,,,,,,,,,,,196,,,196,,,196',
'196,,,196,,196,,,,196,,,,,,,,196,,,,,196,196,196,196,,196,196,,,,196',
'196,,197,197,197,,197,196,,196,197,197,,,,197,,197,197,197,197,197,197',
'197,,,,,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197,197,197,197',
'197,197,197,197,,197,197,197,,197,197,197,197,197,,,,,,,,,,,,,,,,,,',
',197,,,197,,,197,197,,,197,,,,,,197,,,,,,,,197,,,,,197,197,197,197,',
'197,197,,,,197,197,,203,203,203,,203,197,,197,203,203,,,,203,,203,203',
'203,203,203,203,203,,,,,,203,203,203,203,203,203,203,,,203,,,,,,,203',
',,203,203,203,203,203,203,203,203,,203,203,203,,203,203,203,203,203',
',,,,,,,,,,,,,,,,,,,203,,,203,,,203,203,,,203,,,,,,203,,,,,,,,203,,,',
',203,203,203,203,,203,203,,,,203,203,,204,204,204,,204,203,,203,204',
'204,,,,204,,204,204,204,204,204,204,204,,,,,,204,204,204,204,204,204',
'204,,,204,,,,,,,204,,,204,204,204,204,204,204,204,204,,204,204,204,',
'204,204,204,204,204,,,,,,,,,,,,,,,,,,,,204,,,204,,,204,204,,,204,,,',
',,204,,,,,,,,204,,,,,204,204,204,204,,204,204,,,,204,204,,205,205,205',
',205,204,,204,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205',
'205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,205',
',205,205,205,,205,205,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205',
'205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205,205,,205,205,,,,205,205',
',206,206,206,,206,205,,205,206,206,,,,206,,206,206,206,206,206,206,206',
',,,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206',
'206,206,206,,206,206,206,,206,206,206,206,206,,,,,,,,,,,,,,,,,,,,206',
',,206,,,206,206,,,206,,,,,,206,,,,,,,,206,,,,,206,206,206,206,,206,206',
',,,206,206,,207,207,207,,207,206,,206,207,207,,,,207,,207,207,207,207',
'207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207',
'207,207,207,207,207,207,,207,207,207,,207,207,207,207,207,,,,,,,,,,',
',,,,,,,,,207,,,207,,,207,207,,,207,,,,,,207,,,,,,,,207,,,,,207,207,207',
'207,,207,207,,,,207,207,207,217,217,217,,217,207,,207,217,217,,,,217',
',217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217',
',,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217,217',
'217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,',
',217,,,,,217,217,217,217,,217,217,,,,217,217,,220,220,220,,220,217,',
'217,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220',
'220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220',
'220,,220,220,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220',
',,,,,220,,,,,,,,220,,,,,220,220,220,220,,220,220,,,,220,220,,221,221',
'221,,221,220,,220,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221',
'221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221',
'221,,221,221,221,,221,221,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,',
',221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,,221,221,,,,221',
'221,,222,222,222,,222,221,,221,222,222,,,,222,,222,222,222,222,222,222',
'222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222',
'222,222,222,222,,222,222,222,,222,222,222,222,222,,,,,,,,,,,,,,,,,,',
',222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222,222,',
'222,222,,,,222,222,,223,223,223,,223,222,,222,223,223,,,,223,,223,223',
'223,223,223,223,223,,,,,,223,223,223,223,223,223,223,,,223,,,,,,,223',
',,223,223,223,223,223,223,223,223,,223,223,223,,223,223,223,223,223',
',,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,,,,,,223,,,,,,,,223,,,',
',223,223,223,223,,223,223,,,,223,223,,224,224,224,,224,223,,223,224',
'224,,,,224,,224,224,224,224,224,224,224,,,,,,224,224,224,224,224,224',
'224,,,224,,,,,,,224,,,224,224,224,224,224,224,224,224,,224,224,224,',
'224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,,,',
',,224,,,,,,,,224,,,,,224,224,224,224,,224,224,,,,224,224,,225,225,225',
',225,224,,224,225,225,,,,225,,225,225,225,225,225,225,225,,,,,,225,225',
'225,225,225,225,225,,,225,,,,,,,225,,,225,225,225,225,225,225,225,225',
',225,225,225,,225,225,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225',
'225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225,225,,225,225,,,,225,225',
',226,226,226,,226,225,,225,226,226,,,,226,,226,226,226,226,226,226,226',
',,,,,226,226,226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226',
'226,226,226,,226,226,226,,226,226,226,226,226,,,,,,,,,,,,,,,,,,,,226',
',,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,,,226,226,226,226,,226,226',
',,,226,226,,227,227,227,,227,226,,226,227,227,,,,227,,227,227,227,227',
'227,227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227',
'227,227,227,227,227,227,,227,227,227,,227,227,227,227,227,,,,,,,,,,',
',,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227,,,,,,,,227,,,,,227,227,227',
'227,,227,227,,,,227,227,,228,228,228,,228,227,,227,228,228,,,,228,,228',
'228,228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,',
',228,,,228,228,228,228,228,228,228,228,,228,228,228,,228,228,228,228',
'228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,,,,,,228,,,,,,,,228',
',,,,228,228,228,228,,228,228,,,,228,228,,229,229,229,,229,228,,228,229',
'229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229,229',
'229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229,,229,229,229,',
'229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,',
',,229,,,,,,,,229,,,,,229,229,229,229,,229,229,,,,229,229,,230,230,230',
',230,229,,229,230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230',
'230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230,230',
',230,230,230,,230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230',
'230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,,230,230,,,,230,230',
',231,231,231,,231,230,,230,231,231,,,,231,,231,231,231,231,231,231,231',
',,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231,231,231,231',
'231,231,231,,231,231,231,,231,231,231,231,231,,,,,,,,,,,,,,,,,,,,231',
',,231,,,231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231,,231,231',
',,,231,231,,232,232,232,,232,231,,231,232,232,,,,232,,232,232,232,232',
'232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232,232',
'232,232,232,232,232,232,,232,232,232,,232,232,232,232,232,,,,,,,,,,',
',,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232',
'232,,232,232,,,,232,232,,233,233,233,,233,232,,232,233,233,,,,233,,233',
'233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233,,,233,,,,,',
',233,,,233,233,233,233,233,233,233,233,,233,233,233,,233,233,233,233',
'233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233,,,,,,,,233',
',,,,233,233,233,233,,233,233,,,,233,233,,234,234,234,,234,233,,233,234',
'234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234',
'234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234,234,',
'234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,',
',,234,,,,,,,,234,,,,,234,234,234,234,,234,234,,,,234,234,,235,235,235',
',235,234,,234,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235',
'235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235',
',235,235,235,,235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235',
'235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,,235,235,,,,235,235',
',236,236,236,,236,235,,235,236,236,,,,236,,236,236,236,236,236,236,236',
',,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236',
'236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,,,,,,,236',
',,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,,236,236',
',,,236,236,,237,237,237,,237,236,,236,237,237,,,,237,,237,237,237,237',
'237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237',
'237,237,237,237,237,237,,237,237,237,,237,237,237,237,237,,,,,,,,,,',
',,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237',
'237,,237,237,,,,237,237,,238,238,238,,238,237,,237,238,238,,,,238,,238',
'238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,',
',238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238,238,238',
'238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238',
',,,,238,238,238,238,,238,238,,,,238,238,,239,239,239,,239,238,,238,239',
'239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239',
'239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,',
'239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,',
',,239,,,,,,,,239,,,,,239,239,239,239,,239,239,,,,239,239,,240,240,240',
',240,239,,239,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240',
'240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240',
',240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240',
'240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,,240,240,,,,240,240',
',241,241,241,,241,240,,240,241,241,,,,241,,241,241,241,241,241,241,241',
',,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241',
'241,241,241,,241,241,241,,241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241',
',,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,,241,241',
',,,241,241,,242,242,242,,242,241,,241,242,242,,,,242,,242,242,242,242',
'242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242',
'242,242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,',
',,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242',
'242,,242,242,,,,242,242,,243,243,243,,243,242,,242,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243',
',,,,243,243,243,243,,243,243,,,,243,243,,244,244,244,,244,243,,243,244',
'244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244',
'244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,',
'244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,',
',,244,,,,,,,,244,,,,,244,244,244,244,,244,244,,,,244,244,,245,245,245',
',245,244,,244,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245',
'245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245',
',245,245,245,,245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245',
'245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,,245,245,,,,245,245',
',254,254,254,,254,245,,245,254,254,,,,254,,254,254,254,254,254,254,254',
',,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254',
'254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,,,,,,,254',
',,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,,254,254',
',,,254,254,,256,256,256,,256,254,,254,256,256,,,,256,,256,256,256,256',
'256,256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256',
'256,256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,',
',,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256',
'256,,256,256,,,,256,256,,261,261,261,,261,256,,256,261,261,,,,261,,261',
'261,261,261,261,261,261,,,,,,261,261,261,261,261,261,261,,,261,,,,,',
',261,,,261,261,261,261,261,261,261,261,,261,261,261,,261,261,261,261',
'261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261,,,,,,261,,,,,,,,261',
',,,,261,261,261,261,,261,261,,,,261,261,,267,267,267,,267,261,,261,267',
'267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267',
'267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,267,267,267,267',
',267,267,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,267',
',267,,267,,,,,,,,267,,,,,267,267,267,267,,267,267,,,,267,267,,268,268',
'268,,268,267,,267,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268',
'268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268',
'268,268,268,268,268,,268,268,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268',
',,268,268,,,268,,268,,268,,268,,,,,,,,268,,,,,268,268,268,268,,268,268',
',,,268,268,,276,276,276,,276,268,,268,276,276,,,,276,,276,276,276,276',
'276,276,276,,,,,,276,276,276,276,276,276,276,,,276,,,,,,,276,,,276,276',
'276,276,276,276,276,276,276,276,276,276,,276,276,276,276,276,,,,,,,',
',,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276,,276,,,,,,,,276,,,,',
'276,276,276,276,,276,276,,,,276,276,276,282,282,282,,282,276,,276,282',
'282,,,,282,,282,282,282,282,282,282,282,,,,,,282,282,282,282,282,282',
'282,,,282,,,,,,,282,,,282,282,282,282,282,282,282,282,,282,282,282,',
'282,282,,,282,405,405,405,405,405,405,405,405,405,405,405,,405,405,',
',405,405,,282,,,282,,,282,282,,,282,,,405,,405,,405,405,405,405,405',
'405,405,,405,,,,282,282,282,282,,282,282,,,,282,282,,405,,282,,,282',
',282,295,295,295,,295,,,,295,295,,,,295,,295,295,295,295,295,295,295',
',,,,,295,295,295,295,295,295,295,,,295,,,,,,,295,,,295,295,295,295,295',
'295,295,295,,295,295,295,,295,295,,819,295,819,819,819,819,819,,,,,',
',,,,,,,,,295,,,295,,,295,295,,,295,,,,,,819,,,,,,,,,819,819,819,819',
'295,295,295,295,,295,295,,,,295,295,,304,304,304,,304,295,,295,304,304',
',,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304',
',,304,,,,,,,304,,,304,304,304,304,304,304,304,304,,304,304,304,,304',
'304,304,304,304,,,,,,,,,,,,,,,,,,,,304,,,304,304,,304,304,,,304,,,,',
',304,,,,,,,,304,,,,,304,304,304,304,,304,304,,,,304,304,,321,321,321',
',321,304,,304,321,321,,,,321,,321,321,321,321,321,321,321,,,,,,321,321',
'321,321,321,321,321,,,321,,,,,,,321,,,321,321,321,321,321,321,321,321',
',321,321,321,,321,321,321,321,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321',
'321,,,321,,,,,,321,,,,,,,,321,,,,,321,321,321,321,,321,321,,,,321,321',
',322,322,322,,322,321,,321,322,322,,,,322,,322,322,322,322,322,322,322',
',,,,,322,322,322,322,322,322,322,,,322,,,,,,,322,,,322,322,322,322,322',
'322,322,322,,322,322,322,,322,322,322,322,322,,,,,,,,,,,,,,,,,,,,322',
',,322,,,322,322,,,322,,,,,,322,,,,,,,,322,,,,,322,322,322,322,,322,322',
',,,322,322,,340,340,340,,340,322,,322,340,340,,,,340,,340,340,340,340',
'340,340,340,,,,,,340,340,340,340,340,340,340,,,340,,,,,,,340,,,340,340',
'340,340,340,340,340,340,,340,340,340,,340,340,340,340,340,,,,,,,,,,',
',,,,,,,,,340,,,340,,,340,340,,,340,,,,,,340,,,,,,,,340,,,,,340,340,340',
'340,,340,340,,,,340,340,,355,355,355,,355,340,,340,355,355,,,,355,,355',
'355,355,355,355,355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,',
',355,,,355,355,355,355,355,355,355,355,,355,355,355,,355,355,355,355',
'355,,,,,,,,,,,,,,,,,,,,355,,,355,,,355,355,,,355,,,,,,355,,,,,,,,355',
',,,,355,355,355,355,,355,355,,,,355,355,,382,382,382,,382,355,,355,382',
'382,,,,382,,382,382,382,382,382,382,382,,,,,,382,382,382,382,382,382',
'382,,,382,,,,,,,382,,,382,382,382,382,382,382,382,382,,382,382,382,',
'382,382,382,382,382,,,,,,,,,,,,,,,,,,,,382,,,382,,,382,382,,,382,,,',
',,382,,,,,,,,382,,,,,382,382,382,382,,382,382,,,,382,382,,414,414,414',
',414,382,,382,414,414,,,,414,,414,414,414,414,414,414,414,,,,,,414,414',
'414,414,414,414,414,,,414,,,,,,,414,,,414,414,414,414,414,414,414,414',
'414,414,414,414,,414,414,414,414,414,,,,,,,,,,,,,,,,,,,,414,,,414,,',
'414,414,,,414,,414,,414,,414,,,,,,,,414,,,,,414,414,414,414,,414,414',
',,,414,414,,416,416,416,,416,414,,414,416,416,,,,416,,416,416,416,416',
'416,416,416,,,,,,416,416,416,416,416,416,416,,,416,,,,,,,416,,,416,416',
'416,416,416,416,416,416,,416,416,416,,416,416,416,416,416,,,,,,,,,,',
',,,,,,,,,416,,,416,,,416,416,,,416,,,,,,416,,,,,,,,416,,,,,416,416,416',
'416,,416,416,,,,416,416,,417,417,417,,417,416,,416,417,417,,,,417,,417',
'417,417,417,417,417,417,,,,,,417,417,417,417,417,417,417,,,417,,,,,',
',417,,,417,417,417,417,417,417,417,417,,417,417,417,,417,417,417,417',
'417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417,,,417,,,,,,417,,,,,,,,417',
',,,,417,417,417,417,,417,417,,,,417,417,,418,418,418,,418,417,,417,418',
'418,,,,418,,418,418,418,418,418,418,418,,,,,,418,418,418,418,418,418',
'418,,,418,,,,,,,418,,,418,418,418,418,418,418,418,418,,418,418,418,',
'418,418,418,418,418,,,,,,,,,,,,,,,,,,,,418,,,418,,,418,418,,,418,,,',
',,418,,,,,,,,418,,,,,418,418,418,418,,418,418,,,,418,418,,447,447,447',
',447,418,,418,447,447,,,,447,,447,447,447,447,447,447,447,,,,,,447,447',
'447,447,447,447,447,,,447,,,,,,,447,,,447,447,447,447,447,447,447,447',
'447,447,447,447,,447,447,447,447,447,,,,,,,,,,,,,,,,,,,,447,,,447,,',
'447,447,,,447,,447,,447,,447,,,,,,,,447,,,,,447,447,447,447,,447,447',
',,,447,447,,449,449,449,,449,447,,447,449,449,,,,449,,449,449,449,449',
'449,449,449,,,,,,449,449,449,449,449,449,449,,,449,,,,,,,449,,,449,449',
'449,449,449,449,449,449,449,449,449,449,,449,449,449,449,449,,,,,,,',
',,,,,,,,,,,,449,,,449,,,449,449,,,449,,,,449,,449,,,,,,,,449,,,,,449',
'449,449,449,,449,449,,,,449,449,,451,451,451,,451,449,,449,451,451,',
',,451,,451,451,451,451,451,451,451,,,,,,451,451,451,451,451,451,451',
',,451,,,,,,,451,,,451,451,451,451,451,451,451,451,,451,451,451,,451',
'451,451,451,451,,,,,,,,,,,,,,,,,,,,451,,,451,,,451,451,,,451,,,,,,451',
',,,,,,,451,,,,,451,451,451,451,,451,451,,,,451,451,,463,463,463,,463',
'451,,451,463,463,,,,463,,463,463,463,463,463,463,463,,,,,,463,463,463',
'463,463,463,463,,,463,,,,,,,463,,,463,463,463,463,463,463,463,463,463',
'463,463,463,,463,463,463,463,463,,,,,,,,,,,,,,,,,,,,463,,,463,,,463',
'463,,,463,,,,463,,463,,,,,,,,463,,,,,463,463,463,463,,463,463,,,,463',
'463,,473,473,473,,473,463,,463,473,473,,,,473,,473,473,473,473,473,473',
'473,,,,,,473,473,473,473,473,473,473,,,473,,,,,,,473,,,473,473,473,473',
'473,473,473,473,,473,473,473,,473,473,,659,473,659,659,659,659,659,',
',,,,,,,,,,,,,473,,,473,,,473,473,,,473,,,,,,659,,,,,,,,,659,659,659',
'659,473,473,473,473,,473,473,,,,473,473,,475,475,475,,475,473,,473,475',
'475,,,,475,,475,475,475,475,475,475,475,,,,,,475,475,475,475,475,475',
'475,,,475,,,,,,,475,,,475,475,475,475,475,475,475,475,475,475,475,475',
',475,475,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475,,,475,475,,,475,,475',
',475,,475,,,,,,,,475,,,,,475,475,475,475,,475,475,,,,475,475,,482,482',
'482,,482,475,,475,482,482,,,,482,,482,482,482,482,482,482,482,,,,,,482',
'482,482,482,482,482,482,,,482,,,,,,,482,,,482,482,482,482,482,482,482',
'482,,482,482,482,,482,482,,661,482,661,661,661,661,661,,,,,,,,,,,,,',
',482,,,482,,,482,482,,,482,,,,,,661,,,,,,,,,661,661,661,661,482,482',
'482,482,,482,482,,,,482,482,,485,485,485,,485,482,,482,485,485,,,,485',
',485,485,485,485,485,485,485,,,,,,485,485,485,485,485,485,485,,,485',
',,,,,,485,,,485,485,485,485,485,485,485,485,,485,485,485,,485,485,485',
'485,485,,,,,,,,,,,,,,,,,,,,485,,,485,,,485,485,,,485,,,,,,485,,,,,,',
',485,,,,,485,485,485,485,,485,485,,,,485,485,,486,486,486,,486,485,',
'485,486,486,,,,486,,486,486,486,486,486,486,486,,,,,,486,486,486,486',
'486,486,486,,,486,,,,,,,486,,,486,486,486,486,486,486,486,486,,486,486',
'486,,486,486,486,486,486,,,,,,,,,,,,,,,,,,,,486,,,486,,,486,486,,,486',
',,,,,486,,,,,,,,486,,,,,486,486,486,486,,486,486,,,,486,486,,487,487',
'487,,487,486,,486,487,487,,,,487,,487,487,487,487,487,487,487,,,,,,487',
'487,487,487,487,487,487,,,487,,,,,,,487,,,487,487,487,487,487,487,487',
'487,,487,487,487,,487,487,487,487,487,,,,,,,,,,,,,,,,,,,,487,,,487,',
',487,487,,,487,,,,,,487,,,,,,,,487,,,,,487,487,487,487,,487,487,,,,487',
'487,,491,491,491,,491,487,,487,491,491,,,,491,,491,491,491,491,491,491',
'491,,,,,,491,491,491,491,491,491,491,,,491,,,,,,,491,,,491,491,491,491',
'491,491,491,491,,491,491,491,,491,491,491,491,491,,,,,,,,,,,,,,,,,,',
',491,,,491,,,491,491,,,491,,,,,,491,,,,,,,,491,,,,,491,491,491,491,',
'491,491,,,,491,491,,493,493,493,,493,491,,491,493,493,,,,493,,493,493',
'493,493,493,493,493,,,,,,493,493,493,493,493,493,493,,,493,,,,,,,493',
',,493,493,493,493,493,493,493,493,,493,493,493,,493,493,493,493,493',
',,,,,,,,,,,,,,,,,,,493,,,493,,,493,493,,,493,,493,,,,493,,,,,,,,493',
',,,,493,493,493,493,,493,493,,,,493,493,,497,497,497,,497,493,,493,497',
'497,,,,497,,497,497,497,497,497,497,497,,,,,,497,497,497,497,497,497',
'497,,,497,,,,,,,497,,,497,497,497,497,497,497,497,497,497,497,497,497',
',497,497,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,497',
',,,497,,,,,,,,497,,,,,497,497,497,497,,497,497,,,,497,497,,500,500,500',
',500,497,,497,500,500,,,,500,,500,500,500,500,500,500,500,,,,,,500,500',
'500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500,500,500,500',
'500,500,500,500,,500,500,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,',
'500,500,,,500,,,,,,500,,,,,,,,500,,,,,500,500,500,500,,500,500,,,,500',
'500,,536,536,536,,536,500,,500,536,536,,,,536,,536,536,536,536,536,536',
'536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536,,,536,536,536,536',
'536,536,536,536,,536,536,536,,536,536,536,536,536,,,,,,,,,,,,,,,,,,',
',536,,,536,,,536,536,,,536,,536,,,,536,,,,,,,,536,,,,,536,536,536,536',
',536,536,,,,536,536,,537,537,537,,537,536,,536,537,537,,,,537,,537,537',
'537,537,537,537,537,,,,,,537,537,537,537,537,537,537,,,537,,,,,,,537',
',,537,537,537,537,537,537,537,537,537,537,537,537,,537,537,537,537,537',
',,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,,537,,537,,537,,537,,,,,,,,537',
',,,,537,537,537,537,,537,537,,,,537,537,,547,547,547,,547,537,,537,547',
'547,,,,547,,547,547,547,547,547,547,547,,,,,,547,547,547,547,547,547',
'547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,547,547,547,547,547',
',547,547,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,547,,,547,,547',
',547,,547,,,,,,,,547,,,,,547,547,547,547,,547,547,,,,547,547,,550,550',
'550,,550,547,,547,550,550,,,,550,,550,550,550,550,550,550,550,,,,,,550',
'550,550,550,550,550,550,,,550,,,,,,,550,,,550,550,550,550,550,550,550',
'550,,550,550,550,,550,550,550,550,550,,,,,,,,,,,,,,,,,,,,550,,,550,',
',550,550,,,550,,,,,,550,,,,,,,,550,,,,,550,550,550,550,,550,550,,,,550',
'550,,578,578,578,,578,550,,550,578,578,,,,578,,578,578,578,578,578,578',
'578,,,,,,578,578,578,578,578,578,578,,,578,,,,,,,578,,,578,578,578,578',
'578,578,578,578,,578,578,578,,578,578,578,578,578,,,,,,,,,,,,,,,,,,',
',578,,,578,,,578,578,,,578,,,,,,578,,,,,,,,578,,,,,578,578,578,578,',
'578,578,,,,578,578,,580,580,580,,580,578,,578,580,580,,,,580,,580,580',
'580,580,580,580,580,,,,,,580,580,580,580,580,580,580,,,580,,,,,,,580',
',,580,580,580,580,580,580,580,580,,580,580,580,,580,580,580,580,580',
',,,,,,,,,,,,,,,,,,,580,,,580,,,580,580,,,580,,580,,,,580,,,,,,,,580',
',,,,580,580,580,580,,580,580,,,,580,580,,581,581,581,,581,580,,580,581',
'581,,,,581,,581,581,581,581,581,581,581,,,,,,581,581,581,581,581,581',
'581,,,581,,,,,,,581,,,581,581,581,581,581,581,581,581,,581,581,581,',
'581,581,581,581,581,,,,,,,,,,,,,,,,,,,,581,,,581,,,581,581,,,581,,,',
',,581,,,,,,,,581,,,,,581,581,581,581,,581,581,,,,581,581,,584,584,584',
',584,581,,581,584,584,,,,584,,584,584,584,584,584,584,584,,,,,,584,584',
'584,584,584,584,584,,,584,,,,,,,584,,,584,584,584,584,584,584,584,584',
',584,584,584,,584,584,584,584,584,,,,,,,,,,,,,,,,,,,,584,,,584,,,584',
'584,,,584,,,,,,584,,,,,,,,584,,,,,584,584,584,584,,584,584,,,,584,584',
',585,585,585,,585,584,,584,585,585,,,,585,,585,585,585,585,585,585,585',
',,,,,585,585,585,585,585,585,585,,,585,,,,,,,585,,,585,585,585,585,585',
'585,585,585,,585,585,585,,585,585,585,585,585,,,,,,,,,,,,,,,,,,,,585',
',,585,,,585,585,,,585,,,,,,585,,,,,,,,585,,,,,585,585,585,585,,585,585',
',,,585,585,,589,589,589,,589,585,,585,589,589,,,,589,,589,589,589,589',
'589,589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,,,589,,,589,589',
'589,589,589,589,589,589,,589,589,589,,589,589,589,589,589,,,,,,,,,,',
',,,,,,,,,589,,,589,,,589,589,,,589,,,,,,589,,,,,,,,589,,,,,589,589,589',
'589,,589,589,,,,589,589,,592,592,592,,592,589,,589,592,592,,,,592,,592',
'592,592,592,592,592,592,,,,,,592,592,592,592,592,592,592,,,592,,,,,',
',592,,,592,592,592,592,592,592,592,592,,592,592,592,,592,592,592,592',
'592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,,,,,592,,,,,,,,592',
',,,,592,592,592,592,,592,592,,,,592,592,,609,609,609,,609,592,,592,609',
'609,,,,609,,609,609,609,609,609,609,609,,,,,,609,609,609,609,609,609',
'609,,,609,,,,,,,609,,,609,609,609,609,609,609,609,609,,609,609,609,',
'609,609,609,609,609,,,,,,,,,,,,,,,,,,,,609,,,609,,,609,609,,,609,,,',
',,609,,,,,,,,609,,,,,609,609,609,609,,609,609,,,,609,609,,628,628,628',
',628,609,,609,628,628,,,,628,,628,628,628,628,628,628,628,,,,,,628,628',
'628,628,628,628,628,,,628,,,,,,,628,,,628,628,628,628,628,628,628,628',
',628,628,628,,628,628,,703,628,703,703,703,703,703,,,,,,,,,,,,,,,628',
',,628,,,628,628,,,628,,,,,,703,,,,,,,,,703,703,703,703,628,628,628,628',
',628,628,,,,628,628,,639,639,639,,639,628,,628,639,639,,,,639,,639,639',
'639,639,639,639,639,,,,,,639,639,639,639,639,639,639,,,639,,,,,,,639',
',,639,639,639,639,639,639,639,639,,639,639,639,,639,639,,,639,,,,,,',
',,,,,,,,,,,,,639,,,639,,,639,639,,,639,,,,,,,,,,,,,,,,,,,639,639,639',
'639,,639,639,,,,639,639,,666,666,666,,666,639,,639,666,666,,,,666,,666',
'666,666,666,666,666,666,,,,,,666,666,666,666,666,666,666,,,666,,,,,',
',666,,,666,666,666,666,666,666,666,666,,666,666,666,,666,666,666,666',
'666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,,,,,,666,,,,,,,,666',
',,,,666,666,666,666,,666,666,,,,666,666,,692,692,692,,692,666,,666,692',
'692,,,,692,,692,692,692,692,692,692,692,,,,,,692,692,692,692,692,692',
'692,,,692,,,,,,,692,,,692,692,692,692,692,692,692,692,,692,692,692,',
'692,692,692,692,692,,,,,,,,,,,,,,,,,,,,692,,,692,,,692,692,,,692,,,',
',,692,,,,,,,,692,,,,,692,692,692,692,,692,692,,,,692,692,,720,720,720',
',720,692,,692,720,720,,,,720,,720,720,720,720,720,720,720,,,,,,720,720',
'720,720,720,720,720,,,720,,,,,,,720,,,720,720,720,720,720,720,720,720',
',720,720,720,,720,720,720,720,720,,,,,,,,,,,,,,,,,,,,720,,,720,,,720',
'720,,,720,,,,,,720,,,,,,,,720,,,,,720,720,720,720,,720,720,,,,720,720',
',722,722,722,,722,720,,720,722,722,,,,722,,722,722,722,722,722,722,722',
',,,,,722,722,722,722,722,722,722,,,722,,,,,,,722,,,722,722,722,722,722',
'722,722,722,,722,722,722,,722,722,722,722,722,,,,,,,,,,,,,,,,,,,,722',
',,722,,,722,722,,,722,,,,,,722,,,,,,,,722,,,,,722,722,722,722,,722,722',
',,,722,722,,733,733,733,,733,722,,722,733,733,,,,733,,733,733,733,733',
'733,733,733,,,,,,733,733,733,733,733,733,733,,,733,,,,,,,733,,,733,733',
'733,733,733,733,733,733,,733,733,733,,733,733,733,733,733,,,,,,,,,,',
',,,,,,,,,733,,,733,,,733,733,,,733,,,,,,733,,,,,,,,733,,,,,733,733,733',
'733,,733,733,,,,733,733,,734,734,734,,734,733,,733,734,734,,,,734,,734',
'734,734,734,734,734,734,,,,,,734,734,734,734,734,734,734,,,734,,,,,',
',734,,,734,734,734,734,734,734,734,734,,734,734,734,,734,734,734,734',
'734,,,,,,,,,,,,,,,,,,,,734,,,734,,,734,734,,,734,,,,,,734,,,,,,,,734',
',,,,734,734,734,734,,734,734,,,,734,734,,735,735,735,,735,734,,734,735',
'735,,,,735,,735,735,735,735,735,735,735,,,,,,735,735,735,735,735,735',
'735,,,735,,,,,,,735,,,735,735,735,735,735,735,735,735,,735,735,735,',
'735,735,735,735,735,,,,,,,,,,,,,,,,,,,,735,,,735,,,735,735,,,735,,,',
',,735,,,,,,,,735,,,,,735,735,735,735,,735,735,,,,735,735,,737,737,737',
',737,735,,735,737,737,,,,737,,737,737,737,737,737,737,737,,,,,,737,737',
'737,737,737,737,737,,,737,,,,,,,737,,,737,737,737,737,737,737,737,737',
',737,737,737,,737,737,737,737,737,,,,,,,,,,,,,,,,,,,,737,,,737,,,737',
'737,,,737,,,,,,737,,,,,,,,737,,,,,737,737,737,737,,737,737,,,,737,737',
',748,748,748,,748,737,,737,748,748,,,,748,,748,748,748,748,748,748,748',
',,,,,748,748,748,748,748,748,748,,,748,,,,,,,748,,,748,748,748,748,748',
'748,748,748,748,748,748,748,,748,748,748,748,748,,,,,,,,,,,,,,,,,,,',
'748,,,748,,,748,748,,,748,,748,,748,,748,,,,,,,,748,,,,,748,748,748',
'748,,748,748,,,,748,748,,751,751,751,,751,748,,748,751,751,,,,751,,751',
'751,751,751,751,751,751,,,,,,751,751,751,751,751,751,751,,,751,,,,,',
',751,,,751,751,751,751,751,751,751,751,751,751,751,751,,751,751,751',
'751,751,,,,,,,,,,,,,,,,,,,,751,,,751,,,751,751,,,751,,751,,751,,751',
',,,,,,,751,,,,,751,751,751,751,,751,751,,,,751,751,,766,766,766,,766',
'751,,751,766,766,,,,766,,766,766,766,766,766,766,766,,,,,,766,766,766',
'766,766,766,766,,,766,,,,,,,766,,,766,766,766,766,766,766,766,766,,766',
'766,766,,766,766,,,766,,,,,,,,,,,,,,,,,,,,766,,,766,,,766,766,,,766',
',,,,,,,,,,,,,,,,,,766,766,766,766,,766,766,,,,766,766,,793,793,793,',
'793,766,,766,793,793,,,,793,,793,793,793,793,793,793,793,,,,,,793,793',
'793,793,793,793,793,,,793,,,,,,,793,,,793,793,793,793,793,793,793,793',
',793,793,793,,793,793,793,793,793,,,,,,,,,,,,,,,,,,,,793,,,793,,,793',
'793,,,793,,,,,,793,,,,,,,,793,,,,,793,793,793,793,,793,793,,,,793,793',
',798,798,798,,798,793,,793,798,798,,,,798,,798,798,798,798,798,798,798',
',,,,,798,798,798,798,798,798,798,,,798,,,,,,,798,,,798,798,798,798,798',
'798,798,798,,798,798,798,,798,798,798,798,798,,,,,,,,,,,,,,,,,,,,798',
',,798,,,798,798,,,798,,798,,,,798,,,,,,,,798,,,,,798,798,798,798,,798',
'798,,,,798,798,,815,815,815,,815,798,,798,815,815,,,,815,,815,815,815',
'815,815,815,815,,,,,,815,815,815,815,815,815,815,,,815,,,,,,,815,,,815',
'815,815,815,815,815,815,815,,815,815,815,,815,815,815,815,815,,,,,,',
',,,,,,,,,,,,,815,,,815,,,815,815,,,815,,,,,,815,,,,,,,,815,,,,,815,815',
'815,815,,815,815,,,,815,815,,825,825,825,,825,815,,815,825,825,,,,825',
',825,825,825,825,825,825,825,,,,,,825,825,825,825,825,825,825,,,825',
',,,,,,825,,,825,825,825,825,825,825,825,825,,825,825,825,,825,825,,',
'825,,,,,,,,,,,,,,,,,,,,825,,,825,,,825,825,,,825,,,,,,,,,,,,,,,,,,,825',
'825,825,825,,825,825,,,,825,825,,884,884,884,,884,825,,825,884,884,',
',,884,,884,884,884,884,884,884,884,,,,,,884,884,884,884,884,884,884',
',,884,,,,,,,884,,,884,884,884,884,884,884,884,884,,884,884,884,,884',
'884,884,884,884,,,,,,,,,,,,,,,,,,,,884,,,884,,,884,884,,,884,,884,,884',
',884,,,,,,,,884,,,,,884,884,884,884,,884,884,,,,884,884,,887,887,887',
',887,884,,884,887,887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887',
'887,887,887,887,887,,,887,,,,,,,887,,,887,887,887,887,887,887,887,887',
'887,887,887,887,,887,887,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,',
'887,887,,,887,,887,,887,,887,,,,,,,,887,,,,,887,887,887,887,,887,887',
',,,887,887,,890,890,890,,890,887,,887,890,890,,,,890,,890,890,890,890',
'890,890,890,,,,,,890,890,890,890,890,890,890,,,890,,,,,,,890,,,890,890',
'890,890,890,890,890,890,890,890,890,890,,890,890,890,890,890,618,618',
'618,618,618,618,618,618,618,618,618,,618,618,,,618,618,,890,,618,890',
',,890,890,,,890,,890,618,890,618,890,618,618,618,618,618,618,618,890',
'618,,,,890,890,890,890,,890,890,,,,890,890,,618,,618,,,890,,890,371',
'371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371',
'371,371,371,371,371,371,,,,371,371,371,371,371,371,371,371,371,371,',
',,,,371,371,371,371,371,371,371,371,371,,,371,,,,,,,,371,371,,371,371',
'371,371,371,371,371,,,371,371,,,,371,371,371,371,,,,,,,,,,,,,,371,371',
',371,371,371,371,371,371,371,371,371,371,371,,,371,371,,,,,,,,,,,371',
'6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,,,,6,6,6,6,6,6,6,6,6',
'6,,,,,,6,6,6,6,6,6,6,6,6,6,,6,,,,,,,,6,6,,6,6,6,6,6,6,6,,,6,6,,,,6,6',
'6,6,,,,,,,,,,,,,,6,6,,6,6,6,6,6,6,6,6,6,6,6,,,6,6,,,,,,,,,,,6,7,7,7',
'7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,,,7,7,7,7,7,7,7,7,7,7,,,',
',,7,7,7,7,7,7,7,7,7,,,7,,,,,,,,7,7,,7,7,7,7,7,7,7,,,7,7,,,,7,7,7,7,',
',,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7,,,7,7,,,,,,,,,,,7,575,575,575',
'575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575,575',
'575,575,575,575,,,,575,575,575,575,575,575,575,575,575,575,,,,,,575',
'575,575,575,575,575,575,575,575,,,575,,,,,,,,575,575,,575,575,575,575',
'575,575,575,,,575,575,,,,575,575,575,575,,,,,,,,,,,,,,575,575,,575,575',
'575,575,575,575,575,575,575,575,575,,,575,575,,,,,,,,,,,575,705,705',
'705,705,705,705,705,705,705,705,705,705,705,705,705,705,705,705,705',
'705,705,705,705,705,,,,705,705,705,705,705,705,705,705,705,705,,,,,',
'705,705,705,705,705,705,705,705,705,,,705,,,,,,,,705,705,,705,705,705',
'705,705,705,705,,,705,705,,,,705,705,705,705,,,,,,,,,,,,,,705,705,,705',
'705,705,705,705,705,705,705,705,705,705,,,705,65,65,65,65,65,65,65,65',
'65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,,,,65,65,65,65,65,65',
'65,65,65,65,,,,,,65,65,65,65,65,65,65,65,65,65,65,65,,65,,,,,,65,65',
',65,65,65,65,65,65,65,,,65,65,,,,65,65,65,65,,,,,,65,,,,,,,,65,65,,65',
'65,65,65,65,65,65,65,65,65,65,489,489,65,,489,,,,,,,,489,489,,489,489',
'489,489,489,489,489,,,489,489,,,,489,489,489,489,,,,,,489,,,,,,,,489',
'489,,489,489,489,489,489,489,489,489,489,489,489,920,920,489,,920,,',
',,,,,920,920,,920,920,920,920,920,920,920,,,920,920,,,,920,920,920,920',
',,,,,920,,,,,,,,920,920,,920,920,920,920,920,920,920,920,920,920,920',
'488,488,920,,488,,,,,,,,488,488,,488,488,488,488,488,488,488,,,488,488',
',,,488,488,488,488,,,,,,488,,,,,,,,488,488,,488,488,488,488,488,488',
'488,488,488,488,488,538,538,488,,538,,,,,,,,538,538,,538,538,538,538',
'538,538,538,,,538,538,,,,538,538,538,538,,,,,,538,,,,,,,,538,538,,538',
'538,538,538,538,538,538,538,538,538,538,892,892,538,,892,,,,,,,,892',
'892,,892,892,892,892,892,892,892,,,892,892,,,,892,892,892,892,,,,,,892',
',,,,,,,892,892,,892,892,892,892,892,892,892,892,892,892,892,477,477',
'892,,477,,,,,,,,477,477,,477,477,477,477,477,477,477,,,477,477,,,,477',
'477,477,477,,,,,,477,,,,,,,,477,477,,477,477,477,477,477,477,477,477',
'477,477,477,199,199,477,,199,,,,,,,,199,199,,199,199,199,199,199,199',
'199,,,199,199,,,,199,199,199,199,,,,,,199,,,,,,,,199,199,,199,199,199',
'199,199,199,199,199,199,199,199,476,476,199,,476,,,,,,,,476,476,,476',
'476,476,476,476,476,476,,,476,476,,,,476,476,476,476,,,,,,476,,,,,,',
',476,476,,476,476,476,476,476,476,476,476,476,476,476,891,891,476,,891',
',,,,,,,891,891,,891,891,891,891,891,891,891,,,891,891,,,,891,891,891',
'891,,,,,,891,,,,,,,,891,891,,891,891,891,891,891,891,891,891,891,891',
'891,200,200,891,,200,,,,,,,,200,200,,200,200,200,200,200,200,200,,,200',
'200,,,,200,200,200,200,,,,,,200,,,,,,,,200,200,,200,200,200,200,200',
'200,200,200,200,200,200,265,265,200,,265,,,,,,,,265,265,,265,265,265',
'265,265,265,265,,,265,265,,,,265,265,265,265,,,,,,,,,,,,,,265,265,,265',
'265,265,265,265,265,265,265,265,265,265,264,264,265,,264,,,,,,,,264',
'264,,264,264,264,264,264,264,264,,,264,264,,,,264,264,264,264,,,,,,',
',,,,,,,264,264,,264,264,264,264,264,264,264,264,264,264,264,412,412',
'264,,412,,,,,,,,412,412,,412,412,412,412,412,412,412,,,412,412,,,,412',
'412,412,412,,,,,,412,,,,,,,,412,412,,412,412,412,412,412,412,412,412',
'412,412,412,539,539,412,,539,,,,,,,,539,539,,539,539,539,539,539,539',
'539,,,539,539,,,,539,539,539,539,,,,,,539,,,,,,,,539,539,,539,539,539',
'539,539,539,539,539,539,539,539,545,545,539,,545,,,,,,,,545,545,,545',
'545,545,545,545,545,545,,,545,545,,,,545,545,545,545,,,,,,545,,,,,,',
',545,545,,545,545,545,545,545,545,545,545,545,545,545,546,546,545,,546',
',,,,,,,546,546,,546,546,546,546,546,546,546,,,546,546,,,,546,546,546',
'546,,,,,,546,,,,,,,,546,546,,546,546,546,546,546,546,546,546,546,546',
'546,413,413,546,,413,,,,,,,,413,413,,413,413,413,413,413,413,413,,,413',
'413,,,,413,413,413,413,,,,,,413,,,,,,,,413,413,,413,413,413,413,413',
'413,413,413,413,413,413,,,413,721,721,721,721,721,721,721,721,721,721',
'721,,721,721,,,721,721,,,,,,,,,,,,,,,721,,721,,721,721,721,721,721,721',
'721,,721,,718,718,718,718,718,718,718,718,718,718,718,,718,718,,721',
'718,718,,,,,,,,,,,,,,,718,,718,,718,718,718,718,718,718,718,,718,,444',
'444,444,444,444,444,444,444,444,444,444,,444,444,,718,444,444,,,,,,',
',,,,,,,,444,,444,,444,444,444,444,444,444,444,,444,,249,249,249,249',
'249,249,249,249,249,249,249,,249,249,444,444,249,249,,,,,,,,,,,,,,,249',
',249,,249,249,249,249,249,249,249,,249,,19,19,19,19,19,19,19,19,19,19',
'19,,19,19,,249,19,19,,,,,,,,,,,,,,,19,,19,,19,19,19,19,19,19,19,,19',
',814,814,814,814,814,814,814,814,814,814,814,,814,814,,19,814,814,,',
',,,,,,,,,,,,814,,814,,814,814,814,814,814,814,814,,814,,640,640,640',
'640,640,640,640,640,640,640,640,,640,640,,814,640,640,,,,,,,,,,,,,,',
'640,,640,,640,640,640,640,640,640,640,,640,,732,732,732,732,732,732',
'732,732,732,732,732,,732,732,,640,732,732,,,,,,,,,,,,,,,732,,732,,732',
'732,732,732,732,732,732,,732,,730,730,730,730,730,730,730,730,730,730',
'730,,730,730,,732,730,730,,,,,,,,,,,,,,,730,,730,,730,730,730,730,730',
'730,730,,730,,727,727,727,727,727,727,727,727,727,727,727,,727,727,',
'730,727,727,,,,,,,,,,,,,,,727,,727,,727,727,727,727,727,727,727,,727',
',816,816,816,816,816,816,816,816,816,816,816,,816,816,,727,816,816,',
',,,,,,,,,,,,,816,,816,,816,816,816,816,816,816,816,,816,,490,490,490',
'490,490,490,490,490,490,490,490,,490,490,,816,490,490,,,,,,,,,,,,,,',
'490,,490,,490,490,490,490,490,490,490,,490,,725,725,725,725,725,725',
'725,725,725,725,725,,725,725,,490,725,725,,,,,,,,,,,,,,,725,,725,,725',
'725,725,725,725,725,725,,725,,,,,,,,,,,,,,,,,725' ]
        racc_action_check = arr = ::Array.new(23312, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1666,   797,   nil,   536,  1046,  5416, 21080, 21204,   988,   980,
   946,   905,   927,   644,   555,   127,   nil,    64,  5541, 22816,
   892,   nil,  5666,  5791,  5916,   711,   346,  1531,   863,   nil,
  5041,  6041,  6166,   nil,   719,   658,   775,   535,  6299,  6424,
  6549,   657,   774,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   733,  3041,  6674,  6799,  6924,     0,   nil,  7049,  7174,   nil,
   nil,  7299,  7432,  7557,  7682, 21564,   nil,   nil,   nil,   nil,
   nil,   393,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   130,   nil,   nil,     0,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   506,   nil,
  7807,   nil,   nil,   nil,  7940,  8065,  8190,  8315,  8440,  1183,
   nil,   435,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   347,   nil,  4791,  4916,  8565,  8690,  8815,  5291, 21984,
 22164,   nil,   nil,  8940,  9065,  9190,  9315,  9440,   nil,   nil,
   808,   214,  1047,    55,   969,  1027,   nil,  9565,  2416,  1029,
  9690,  9815,  9940, 10065, 10190, 10315, 10440, 10565, 10690, 10815,
 10940, 11065, 11190, 11315, 11440, 11565, 11690, 11815, 11940, 12065,
 12190, 12315, 12440, 12565, 12690, 12815,   nil,   nil,   nil, 22770,
   nil,  1033,  1035,   nil, 12940,  1079, 13065,   nil,   nil,   nil,
   nil, 13190,   nil,   nil, 22284, 22224,   -16, 13315, 13440,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 13565,  1045,  3541,  1056,
  1093,  1056, 13690,  1791,   928,   949,  1136,   955,  1106,  1071,
   355,   nil,  1114,   475,  1085, 13823,   nil,   432,  1150,  1161,
   961,   nil,  1171,   nil, 13948,  1240,  1248,   468,   nil,   310,
   282,  1178,  1165,   270,  1191,   nil,   nil,  7445,   528,    48,
   232, 14073, 14198,    84,  1265,  1153,   158,   963,  1121,    98,
   168,   nil,   nil,   871,   356,   275,   nil,   642,   nil,    55,
 14323,   nil,   nil,   302,   419,   454,   530,   577,   618,   643,
   679,   707,   nil,   709,   nil, 14448,   nil,   411,   595,   340,
   347,    39,   535,   nil,  1273,   nil,   nil,   nil,   nil,   nil,
   nil, 20956,   nil,   nil,   nil,   nil,   119,   139,   nil,   nil,
  6167,   nil, 14573,   155,   nil,   281,   nil,   nil,  7299,   286,
   nil,   614,   484,  1067,   nil,   nil,   nil,   348,   401,   239,
   nil,   nil,  1192,  1401,   nil, 13690,   nil,   nil,   nil,   151,
   nil,   429, 22344, 22584, 14698,   268, 14823, 14948, 15073,  2791,
  2666,   752,   561,   506,   508,   516,   518,  3666,  1916,  3791,
  2166,  1482,  2416,  3541,  3416,  2541,  2041,  3041,  3166,  2916,
   820,   913,  3291,  2291, 22724,   390,   nil, 15198,   nil, 15323,
   nil, 15448,   nil,   nil,  1322,   nil,   nil,   988,   nil,   nil,
   498,   nil,   nil, 15573,   320,   121,   512,   nil,   522,   531,
   nil,   nil,   537, 15698,   568, 15823, 22044, 21924,   772,   609,
   nil,   nil, 15948,   575,   nil, 16073, 16198, 16323, 21744, 21624,
 23138, 16448,   734, 16573,   nil,   626,   nil, 16698,   nil,   nil,
 16823,   nil,   nil,   nil,   137,  1290,   626,   629,   635,   636,
   nil,   nil,   nil,   nil,   nil,   nil,   273,   715,   nil,  1328,
   nil,   nil,   nil,   nil,   717,   nil,   nil,   729,  2916,   769,
   nil,  2791,   142,    63,   769,   780, 16948, 17073, 21804, 22404,
   116,   nil,   nil,   900,   nil, 22464, 22524, 17198,   nil,   nil,
 17323,   557,   316,  2166,  1156,   nil,   nil,   nil,   115,   nil,
   nil,   nil,  1058,   nil,   nil,   nil,   674,   nil,   nil,   271,
   nil,   nil,   666,   nil,   nil, 21328,   nil,   nil, 17448,   669,
 17573, 17698,   696,   725, 17823, 17948,   725,   nil,   nil, 18073,
   728,   nil, 18198,   nil,   nil,   242,   107,   603,   473,   708,
  7807,   719,   nil,   537,   nil,  2041,   723,   nil,   766, 18323,
   nil,   nil,   nil,   nil,   nil,   nil,   212,   nil, 20823,    -6,
   728,   nil,   743,   nil,  4666,  4541,   nil,   336, 18448,   744,
   nil,   748,   277,   269,   798,   497,   966,   799,   769, 18573,
 22908,   847,   850,   123,   909,   nil,  4041,   791,   834,   nil,
   nil,   nil,    -8,   nil,  3916,  3666,   797,   857,   nil, 15711,
   nil, 15961,   nil,   nil,  1938,   893, 18698,   nil,   nil,  1071,
   nil,   820,   596,   864,   828,   nil,   nil,   608,   nil,   944,
   nil,   nil,   nil,   nil,   953,   nil,   163,   846,   131,   156,
    89,   247, 18823,   418,   678,   nil,   848,  1916,   404,   nil,
   nil,   967,  3416, 18461,   366, 21452,   nil,   nil,   nil,   nil,
   nil,   nil,  3291,   nil,   nil,   nil,   nil,   nil, 22678,   849,
 18948, 22632, 19073,   nil,   nil, 23184,   nil, 23046,   nil,   nil,
 23000,   nil, 22954, 19198, 19323, 19448,   233, 19573,   857,   858,
   862,   nil,   891,   876,   342,   nil,   999,   nil, 19698,   nil,
  3166, 19823,   nil,   nil,   896,   911,  1025,   907,   198,   nil,
   nil,   nil,  2666,   nil,   nil,   138, 19948,   nil,   nil,   937,
  1042,   926,   928,   nil,   nil,   nil,   929,   931,   nil,   nil,
   933,   935,   nil,   937,   nil,   nil,   942,  1133,   940,  1185,
   nil,  1061,   nil, 20073,  1064,  2541,  2291,   nil, 20198,     0,
   121,   246,   nil,  1111,   nil,  5166,   nil,  1112,  1003,   nil,
   nil,  1018,  1002,   nil, 22862, 20323, 23092,  7570,   nil, 13836,
   nil,   nil,  1717,   nil,  1024, 20448,   nil,  1019,  1040,  1024,
   nil,  1026,   nil,   nil,   nil,   nil,  4416,   164,   926,  1103,
   172,   nil,   nil,   nil,   nil,   840,  6054,   nil,   nil,  1254,
   nil,  1842,   nil,   827,   nil,   nil,   nil,   469,  1195,  1051,
   nil,   209,   nil,  1206,  1234,   nil,   133,   nil,   nil,  1271,
   nil,   nil,  7695,   nil,    82,   145,   399,   429,   nil,   433,
   nil,   960,   550,   nil, 20573,   nil,   nil, 20698,   nil,   625,
 20823, 22104, 21864,   271,   nil,   593,   594,   595,   622,   625,
  1652,   661,  1405,  4166,   nil,   nil,   nil,   nil,   nil,  3791,
   nil,  4291,  1463,   nil,   nil,  1594,   nil,  1688,   nil,   nil,
 21684,   nil,   693,   nil,   702,   173,   171,   165,   136,   nil,
  1813,   nil,   nil,   nil,  1681,   851,   369,   972,   974,   856,
   880,   891,   917,   982,  1008,   nil,   207,  1018,   489,   nil,
   nil,   nil,   nil,  1319,   nil,   nil,   nil,   nil,   563,   nil ]

racc_action_default = [
    -4,  -547,    -1,  -533,    -5,  -547,  -547,  -547,  -547,  -547,
  -547,  -547,  -547,  -547,  -273,   -32,   -33,  -535,  -547,   -38,
   -40,   -41,  -283,  -318,  -319,   -45,  -248,  -248,  -248,   -58,
    -4,   -62,   -70,   -72,  -547,  -460,  -547,  -547,  -547,  -547,
  -547,  -535,  -225,  -266,  -267,  -268,  -269,  -270,  -271,  -272,
  -521,    -4,  -547,  -546,  -513,  -291,  -373,  -547,  -547,  -296,
  -299,  -533,  -547,  -547,  -547,  -547,  -320,  -321,  -409,  -410,
  -411,  -412,  -413,  -428,  -416,  -417,  -430,  -432,  -421,  -426,
  -442,  -430,  -444,  -445,  -519,  -449,  -450,  -520,  -452,  -453,
  -454,  -455,  -456,  -457,  -458,  -459,  -462,  -463,  -547,    -3,
  -534,  -542,  -543,  -544,  -547,  -547,  -547,  -547,  -547,    -7,
    -8,  -547,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,
  -107,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,
  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,   -13,  -108,    -4,    -4,  -547,  -547,  -547,  -234,  -547,
  -547,  -531,  -532,  -547,  -547,  -547,  -547,  -535,  -536,   -37,
  -547,  -460,  -547,  -273,  -547,  -547,  -217,  -547,    -4,  -547,
  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,  -547,
  -547,  -547,  -547,  -547,  -547,  -547,  -379,  -381,   -42,  -226,
  -236,  -258,  -258,  -241,  -547,  -259,  -547,  -283,  -318,  -319,
  -515,  -547,   -43,   -44,  -547,  -547,   -50,  -234,  -547,  -290,
  -384,  -393,  -395,   -56,  -390,   -57,  -535,   -60,    -4,  -535,
  -547,   -63,   -66,    -4,   -78,  -547,  -547,   -85,  -286,  -535,
  -547,  -322,  -391,  -547,   -68,  -547,   -74,  -280,  -446,  -447,
  -547,  -202,  -203,  -218,  -547,  -401,  -547,  -276,  -227,  -539,
  -539,  -547,  -547,  -539,  -547,  -292,  -293,  -483,   -39,  -547,
  -547,  -547,  -547,  -533,  -547,  -534,  -460,  -547,  -547,  -273,
  -547,  -332,  -333,   -94,   -95,  -547,   -97,  -547,  -273,  -547,
  -547,  -460,  -311,   -99,  -100,  -140,  -141,  -142,  -158,  -163,
  -170,  -173,  -313,  -547,  -511,  -547,  -414,  -547,  -547,  -547,
  -547,  -547,  -547,   960,    -6,  -545,   -14,   -15,   -16,   -17,
   -18,  -547,   -10,   -11,   -12,  -109,  -547,  -547,   -21,   -29,
  -181,  -259,  -547,  -547,   -22,   -30,   -31,   -23,  -183,  -535,
  -235,  -522,  -523,  -248,  -388,  -524,  -525,  -522,  -248,  -523,
  -387,  -389,  -524,  -525,   -28,  -191,   -34,   -35,   -36,  -535,
  -289,  -547,  -547,  -547,  -234,  -280,  -547,  -547,  -547,  -192,
  -193,  -194,  -195,  -196,  -197,  -198,  -199,  -204,  -205,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -214,  -215,  -216,
  -219,  -220,  -221,  -222,  -535,  -362,  -237,  -257,  -238,  -257,
  -255,  -547,  -260,  -518,  -248,  -522,  -523,  -248,   -48,   -51,
  -535,  -249,  -250,  -251,  -362,  -362,  -535,  -285,  -535,   -59,
  -278,   -75,   -64,  -547,  -535,  -234,  -547,  -547,   -84,  -547,
  -446,  -447,  -547,   -71,   -76,  -547,  -547,  -547,  -547,  -547,
  -223,  -547,  -546,  -546,  -275,  -535,  -228,  -541,  -540,  -230,
  -541,  -281,  -282,  -514,  -547,  -483,  -367,  -510,  -510,  -510,
  -482,  -484,  -485,  -486,  -487,  -488,  -489,  -547,  -492,  -547,
  -494,  -500,  -502,  -503,  -505,  -506,  -507,  -547,    -4,  -323,
  -324,    -4,  -547,  -547,  -547,  -547,  -547,  -234,  -547,  -547,
  -280,  -304,   -94,   -95,   -96,  -547,  -547,  -234,  -307,  -464,
  -547,  -547,  -547,    -4,  -483,  -315,  -529,  -530,  -535,  -415,
  -429,  -434,  -547,  -436,  -418,  -431,  -547,  -433,  -420,  -547,
  -423,  -425,  -547,  -443,    -9,  -547,   -19,   -20,  -547,  -265,
  -547,  -547,  -392,  -547,  -547,  -547,   -52,  -233,  -385,  -547,
   -54,  -386,  -547,  -288,  -537,  -522,  -523,  -522,  -523,  -535,
  -181,  -547,  -363,  -367,  -365,    -4,  -258,  -256,  -261,  -547,
  -516,  -517,   -46,  -382,   -47,  -383,  -362,  -231,   -38,  -547,
  -258,  -247,  -535,  -253,    -4,    -4,  -284,   -61,  -547,   -67,
   -73,  -535,  -522,  -523,  -232,  -526,   -83,  -547,   -69,  -547,
  -190,  -200,  -201,  -535,  -546,  -330,    -4,  -402,  -546,  -403,
  -404,  -277,  -539,  -374,    -4,    -4,  -367,  -547,  -376,  -547,
  -475,  -547,  -478,  -480,  -547,  -547,  -547,  -491,  -334,  -547,
  -336,  -338,  -345,  -489,  -535,  -504,  -508,  -546,  -325,  -546,
  -297,  -326,  -327,  -300,  -547,  -303,  -547,  -535,  -522,  -523,
  -526,  -279,  -547,   -94,   -95,   -98,  -535,    -4,  -547,  -466,
  -309,  -547,    -4,  -483,  -547,  -547,  -512,  -435,  -438,  -439,
  -440,  -441,    -4,  -419,  -422,  -424,  -427,  -110,  -182,  -263,
  -547,  -184,  -547,  -538,   -25,  -186,   -26,  -187,   -53,   -27,
  -188,   -55,  -189,  -547,  -547,  -547,  -392,  -547,  -510,  -510,
  -510,  -361,  -547,  -367,  -489,  -498,  -547,  -239,  -257,  -262,
    -4,  -547,  -244,  -252,  -535,  -547,  -547,   -65,  -392,   -77,
  -287,    -2,    -4,  -408,  -331,  -547,  -547,  -406,  -229,  -547,
  -547,  -535,  -368,  -369,  -371,  -372,  -510,  -510,  -495,  -509,
  -510,  -510,  -501,  -510,  -490,  -496,  -535,  -547,  -343,  -547,
  -493,  -547,  -328,  -547,  -547,    -4,    -4,  -302,  -547,    -4,
  -392,  -547,  -392,  -547,  -465,    -4,  -312,  -547,  -535,  -468,
  -316,  -547,  -264,   -24,  -185,  -547,  -224,  -352,  -354,  -547,
  -357,  -359,  -547,  -364,  -547,  -547,  -380,  -258,  -547,  -258,
  -243,  -258,  -254,  -394,  -396,  -407,    -4,  -460,  -547,  -547,
  -273,  -405,  -377,  -378,  -375,  -547,  -547,  -471,  -473,  -547,
  -476,  -547,  -479,  -547,  -481,  -335,  -337,  -341,  -547,  -346,
  -294,  -547,  -295,  -547,  -547,  -261,  -546,  -305,  -308,  -547,
  -314,  -467,  -483,  -437,  -510,  -510,  -510,  -510,  -499,  -510,
  -366,  -497,  -547,  -240,  -257,   -49,  -242,  -257,  -245,  -401,
  -234,  -547,  -547,  -280,  -370,  -510,  -510,  -510,  -510,  -339,
  -547,  -344,  -547,    -4,  -298,  -301,  -397,  -398,  -399,    -4,
  -310,    -4,  -547,  -349,  -351,  -547,  -355,  -547,  -358,  -360,
  -547,  -280,  -258,  -400,  -535,  -522,  -523,  -526,  -279,  -469,
  -547,  -472,  -474,  -477,  -547,  -342,  -546,  -547,  -547,  -510,
  -510,  -510,  -510,  -279,  -526,  -246,  -392,  -510,  -340,  -329,
  -306,  -317,  -347,  -547,  -350,  -353,  -356,  -470,  -510,  -348 ]

clist = [
'115,115,206,492,14,352,118,118,308,14,535,209,459,644,506,281,309,306',
'791,250,250,250,99,310,313,702,304,389,110,192,270,274,12,294,14,287',
'287,12,120,120,610,528,531,739,103,393,398,740,266,273,275,510,277,496',
'499,14,582,503,279,115,379,386,12,773,680,683,329,338,338,607,544,607',
'199,109,775,782,778,248,262,263,324,605,353,12,264,621,674,291,291,483',
'856,610,668,859,555,560,460,567,570,878,624,625,103,777,14,780,613,339',
'342,615,454,457,14,446,448,495,358,321,291,291,291,362,795,13,322,796',
'692,909,13,697,805,553,12,554,705,658,872,461,743,623,12,210,311,575',
'616,210,210,210,772,1,371,504,653,13,285,285,317,332,383,383,319,320',
'901,247,323,445,464,465,364,906,648,765,356,357,13,210,370,359,360,569',
'210,210,191,361,210,327,337,337,378,384,387,707,878,712,403,250,404',
'14,14,776,794,100,656,394,935,856,316,366,367,368,369,761,315,312,354',
'330,548,754,622,,684,,14,13,,12,12,210,210,210,210,13,742,,778,,786',
',948,510,,,668,599,,788,,,,,12,894,750,,,,,874,393,398,782,875,775,876',
'250,250,736,629,,412,778,,,250,479,,638,949,,484,695,,14,472,,771,287',
'14,510,,895,,,,270,,274,,758,287,277,,,,631,277,468,715,,,12,474,,,',
'12,13,13,210,210,210,210,634,462,,,210,210,210,210,210,466,728,867,634',
',731,741,291,610,,13,534,911,476,,,10,,,,291,10,,800,,939,,649,488,668',
',668,802,103,115,687,,,,607,118,824,830,583,,696,10,,,549,,,,634,,538',
'907,,,210,210,634,574,,,768,587,10,210,808,13,591,120,,285,13,403,799',
'331,,250,556,,,586,394,606,285,,590,,757,,532,533,,,,601,899,668,,620',
',,,510,,,,,,,210,210,,10,650,,,,,,,10,383,484,587,,,587,,210,,,484,652',
'747,,,403,250,668,,668,612,287,210,614,394,,752,403,,,287,836,,,,,394',
',,,,,,686,,,,,,,607,668,,607,,,,,,,,,,701,,,,,,,,,,291,,,14,403,250',
'14,,210,291,403,10,10,394,,250,,,,,,394,,908,,,,,14,,,12,,,12,,10,711',
',,115,,2,,681,681,118,,724,726,,,,729,903,583,12,210,923,,,,946,699',
'700,,,285,717,210,763,,280,,767,,285,510,120,,14,,,484,,210,,583,,,314',
',,,759,,10,,,14,14,10,,287,,,,,12,587,,,591,,287,,810,,,,,14,13,,698',
'13,,12,12,14,14,210,,,803,,,,,807,,210,,583,210,,,13,,12,,,583,,,291',
',12,12,,883,,886,,888,,291,,,,115,,14,,,,,14,210,210,,,827,210,,829',
'813,14,,,924,,831,,,,,,,13,12,,,,,12,,,634,,804,,,,,12,809,,13,13,,',
'285,,,14,,,,,,381,385,285,,376,377,14,,,13,840,869,,,,,,13,13,,,,12',
',945,,,,,280,,,,,12,801,,,,14,14,,,14,,,,,,14,,,,,,210,,,,450,13,452',
'291,,,13,453,12,12,338,,12,,,,13,,12,,,14,,681,,,210,,,,280,,,,,280',
',,922,,,,,,,,,,,12,,,,,13,,10,,938,10,,,291,,,,13,403,250,,838,,,,,410',
'394,861,891,,,10,,,,,,,14,,583,,,,14,403,14,210,,13,13,,,13,,,,,,13',
',,26,,,,12,26,,,,,12,,12,,,,579,881,26,,,10,26,26,26,,,,13,,26,,467',
',,469,,,,,10,10,,,,,,,,,,26,26,,,,,26,26,,,26,10,,,,,,,,10,10,,,,,,',
',35,,608,210,314,35,611,,,,,,,,,,13,,619,,,26,13,,13,26,26,26,26,26',
'35,284,284,,10,,,,,10,,,,,,,,,647,10,,35,608,,,314,660,662,663,,,,326',
'341,341,341,,,,,,,,,,,,,,,,,,,,,593,10,,677,,381,679,,,,,,,10,35,,,841',
'307,,,,35,318,318,,,318,26,26,26,26,26,26,,,,,26,26,26,26,26,738,,,10',
'10,,719,10,617,,26,,,10,626,,627,,,,,,630,,,,,318,318,318,318,,,,,749',
',746,,,,,,651,10,,,,,,,,,,,,755,756,781,26,26,783,,,35,35,,,26,,26,',
',,,26,,,764,,,,,,,,769,770,,35,,,785,,,,,,,,,,,,,,706,,,,,10,,26,26',
',,10,,10,,,,,,,,406,407,408,409,,26,,,,,,,,,,,,811,,812,26,,35,,,,284',
'35,,,,818,820,821,,,,,,284,,,,753,,,,,,,,,,,,828,,,,,,,,,760,,,835,',
'847,848,,,850,852,,854,,,26,,,,,,,,,,877,,,879,,,790,,865,,,863,864',
',,866,,,,,,,,,,,,896,318,318,897,,898,,,,,,,26,,,,,,,,552,,,,26,889',
',,,,,,,,,558,,,,,26,,,,,,,,,,,913,914,916,918,,919,,,832,,,,,,,940,865',
',941,608,942,929,931,932,933,844,26,,,26,,,,947,,26,,,,,855,936,,,,26',
',937,26,,284,26,,,,,958,,,284,,,871,,,952,954,955,956,,,,,957,,,,,,',
',,26,26,959,,,26,,,,,307,,,,,,,,,,,26,,35,,,35,,,,,,,,,,,,643,,26,26',
',,,,,,35,,,,,,,,,,,,,,26,,,,,,,,26,26,,,,,,,,,,,,,,,,,,,,,,,,,,318,',
',35,,,,,,,,26,,,,,26,,,,,26,35,35,,,284,,,,,26,,,,,,284,,,,26,,,35,',
',,,,,,35,35,,,,,,,,,216,,,,249,249,249,26,,,,,,,,,,,,26,301,302,303',
',,,,,,,,,,35,,249,249,,35,,,,,,,,,,35,,26,,26,26,,,26,,,,,,26,,,,,,',
',,,,,,,,,,,318,,,,,,35,,,,,,,26,,,,,35,,,,837,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,35,35,,,35,,,,,,35,,,,,,26,,,,,,,,,,,,,26,341,,,,,26,,26,,,,35',
',,,,380,249,388,249,318,,,,405,,,,,,,,,,,,,,216,,,419,420,421,422,423',
'424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440',
'441,442,443,444,,,,,,,,,249,,249,35,,,,249,,35,,35,,249,249,,,,,,,,249',
',,,,,,,,,,,,,,,,,,,,,,,,,,,490,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,249,,405,600,388,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,249,,249,,',
',,,,,,,,,618,,,,,,,,,,,,249,,,,,,,,,,640,641,642,,,,,,249,,,,249,,,249',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,249,,,,,,,,,,249,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,718,,249,721,,,725,727,,,,730,,,732,,,,,,,,,,,,,,',
',,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,814,,,,,,,,',
',,725,727,730,,816,,,,,,,,,,,249,,,249,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,249,,,,,,,,,,,,,,,,,814,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,249,,,249,,,249' ]
        racc_goto_table = arr = ::Array.new(2547, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'50,50,27,4,22,49,53,53,58,22,85,15,35,5,123,43,59,3,83,29,29,29,8,61',
'61,89,27,19,11,11,62,62,17,44,22,22,22,17,54,54,150,82,82,111,88,33',
'33,112,34,34,34,114,39,60,60,22,20,60,40,50,23,23,17,118,84,84,22,22',
'22,65,47,65,21,9,119,146,145,31,31,31,8,36,90,17,21,65,107,56,56,45',
'105,150,106,108,91,140,19,140,140,147,36,36,88,112,22,112,63,48,48,63',
'33,33,22,64,64,92,136,93,56,56,56,136,94,18,95,96,97,98,18,99,100,101',
'17,102,103,116,104,67,109,66,17,18,57,55,37,18,18,18,117,1,26,120,121',
'18,18,18,122,16,59,59,13,13,108,124,13,125,127,128,9,129,130,131,134',
'135,18,18,9,137,138,139,18,18,12,141,18,18,18,18,15,15,15,142,147,143',
'50,29,15,22,22,144,5,10,123,62,108,105,81,13,13,13,13,6,79,78,77,86',
'87,70,69,,85,,22,18,,17,17,18,18,18,18,18,116,,145,,107,,108,114,,,106',
'19,,106,,,,,17,118,36,,,,,111,33,33,146,112,119,112,29,29,20,45,,21',
'145,,,29,27,,45,83,,43,47,,22,44,,116,22,22,114,,112,,,,62,,62,,20,22',
'39,,,,19,39,40,140,,,17,40,,,,17,18,18,18,18,18,18,33,31,,,18,18,18',
'18,18,31,35,84,33,,35,114,56,150,,18,8,89,21,,,14,,,,56,14,,20,,112',
',23,21,106,,106,20,88,50,19,,,,65,53,116,65,27,,19,14,,,88,,,,33,,21',
'5,,,18,18,33,11,,,60,62,14,18,123,18,62,54,,18,18,50,82,14,,29,21,,',
'34,62,61,18,,34,,45,,13,13,,,,27,106,106,,61,,,,114,,,,,,,18,18,,14',
'58,,,,,,,14,59,43,62,,,62,,18,,,43,61,64,,,50,29,106,,106,34,22,18,34',
'62,,64,50,,,22,82,,,,,62,,,,,,,59,,,,,,,65,106,,65,,,,,,,,,,3,,,,,,',
',,,56,,,22,50,29,22,,18,56,50,14,14,62,,29,,,,,,62,,85,,,,,22,,,17,',
',17,,14,22,,,50,,2,,88,88,53,,15,15,,,,15,82,27,17,18,4,,,,20,88,88',
',,18,11,18,58,,2,,58,,18,114,54,,22,,,43,,18,,27,,,24,,,,43,,14,,,22',
'22,14,,22,,,,,17,62,,,62,,22,,49,,,,,22,18,,13,18,,17,17,22,22,18,,',
'3,,,,,3,,18,,27,18,,,18,,17,,,27,,,56,,17,17,,64,,64,,64,,56,,,,50,',
'22,,,,,22,18,18,,,59,18,,59,15,22,,,19,,61,,,,,,,18,17,,,,,17,,,33,',
'88,,,,,17,88,,18,18,,,18,,,22,,,,,,24,24,18,,2,2,22,,,18,22,3,,,,,,18',
'18,,,,17,,64,,,,,2,,,,,17,13,,,,22,22,,,22,,,,,,22,,,,,,18,,,,24,18',
'24,56,,,18,24,17,17,22,,17,,,,18,,17,,,22,,88,,,18,,,,2,,,,,2,,,61,',
',,,,,,,,,17,,,,,18,,14,,3,14,,,56,,,,18,50,29,,18,,,,,41,62,13,21,,',
'14,,,,,,,22,,27,,,,22,50,22,18,,18,18,,,18,,,,,,18,,,38,,,,17,38,,,',
',17,,17,,,,24,18,38,,,14,38,38,38,,,,18,,38,,41,,,41,,,,,14,14,,,,,',
',,,,38,38,,,,,38,38,,,38,14,,,,,,,,14,14,,,,,,,,46,,24,18,24,46,24,',
',,,,,,,,18,,24,,,38,18,,18,38,38,38,38,38,46,46,46,,14,,,,,14,,,,,,',
',,24,14,,46,24,,,24,113,113,113,,,,46,46,46,46,,,,,,,,,,,,,,,,,,,,,41',
'14,,2,,24,2,,,,,,,14,46,,,14,25,,,,46,25,25,,,25,38,38,38,38,38,38,',
',,,38,38,38,38,38,110,,,14,14,,24,14,41,,38,,,14,41,,41,,,,,,41,,,,',
'25,25,25,25,,,,,24,,2,,,,,,41,14,,,,,,,,,,,,2,2,110,38,38,110,,,46,46',
',,38,,38,,,,,38,,,2,,,,,,,,2,2,,46,,,24,,,,,,,,,,,,,,41,,,,,14,,38,38',
',,14,,14,,,,,,,,25,25,25,25,,38,,,,,,,,,,,,2,,24,38,,46,,,,46,46,,,',
'113,113,113,,,,,,46,,,,41,,,,,,,,,,,,2,,,,,,,,,41,,,2,,113,113,,,113',
'113,,113,,,38,,,,,,,,,,110,,,110,,,41,,24,,,2,2,,,2,,,,,,,,,,,,110,25',
'25,110,,110,,,,,,,38,,,,,,,,25,,,,38,2,,,,,,,,,,25,,,,,38,,,,,,,,,,',
'113,113,113,113,,113,,,41,,,,,,,110,24,,110,24,110,113,113,113,113,41',
'38,,,38,,,,110,,38,,,,,41,2,,,,38,,2,38,,46,38,,,,,110,,,46,,,41,,,113',
'113,113,113,,,,,113,,,,,,,,,38,38,113,,,38,,,,,25,,,,,,,,,,,38,,46,',
',46,,,,,,,,,,,,25,,38,38,,,,,,,46,,,,,,,,,,,,,,38,,,,,,,,38,38,,,,,',
',,,,,,,,,,,,,,,,,,,,25,,,46,,,,,,,,38,,,,,38,,,,,38,46,46,,,46,,,,,38',
',,,,,46,,,,38,,,46,,,,,,,,46,46,,,,,,,,,28,,,,28,28,28,38,,,,,,,,,,',
',38,28,28,28,,,,,,,,,,,46,,28,28,,46,,,,,,,,,,46,,38,,38,38,,,38,,,',
',,38,,,,,,,,,,,,,,,,,,25,,,,,,46,,,,,,,38,,,,,46,,,,46,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,46,46,,,46,,,,,,46,,,,,,38,,,,,,,,,,,,,38,46,,,,,38,',
'38,,,,46,,,,,28,28,28,28,25,,,,28,,,,,,,,,,,,,,28,,,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,,,,,,',
'28,,28,46,,,,28,,46,,46,,28,28,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,28,28,28,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,28,,28,,28,,,,,,,,,,,,28,,,,,,,,,,,,28,,,,,,,,,,28',
'28,28,,,,,,28,,,,28,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,28,,',
',,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,28,28,,,28,28,,,,28,,,28',
',,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,28',
',,,,,,,,,,28,28,28,,28,,,,,,,,,,,28,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,28,,,28' ]
        racc_goto_check = arr = ::Array.new(2547, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   149,   571,   -34,  -302,  -479,  -433,   nil,    19,    68,
   198,    22,   175,   103,   347,    -7,    95,    32,   123,  -171,
  -333,    59,     4,  -135,   565,  1062,    40,   -15,  1656,    -3,
   nil,    55,   nil,  -154,    22,  -254,  -364,  -314,   931,    22,
    28,   687,   nil,   -16,     1,  -206,  1010,  -265,    44,   -60,
    -6,   nil,   nil,     0,    32,  -232,    56,    89,   -45,   -37,
  -256,   -30,     4,  -348,  -138,  -378,  -324,  -131,   nil,  -245,
  -406,   nil,   nil,   nil,   nil,   nil,   nil,   149,   159,   157,
   nil,   150,  -278,  -659,  -468,  -314,   153,  -123,    41,  -529,
    17,  -259,  -192,    58,  -558,    64,  -558,  -415,  -740,  -419,
  -570,  -211,  -219,  -421,  -674,  -697,  -427,  -433,  -696,  -465,
   536,  -560,  -556,   559,  -266,   nil,  -371,  -509,  -594,  -583,
  -166,  -352,   100,  -303,   143,   -81,   nil,  -105,  -105,  -697,
  -323,  -477,   nil,   nil,   101,   100,    40,   100,   100,  -181,
  -262,   104,  -371,  -370,  -460,  -583,  -586,  -720,   nil,   nil,
  -409 ]

racc_goto_default = [
   nil,   nil,   305,   nil,   nil,   792,   nil,     3,   nil,     4,
   325,   nil,   nil,   nil,   214,    16,    11,   215,   300,   nil,
   nil,   546,   213,   nil,   255,    15,   nil,   411,    19,    20,
    21,   390,    25,   637,   nil,   nil,   nil,   nil,   290,    29,
   nil,   nil,    31,    34,    33,   nil,   211,   336,   nil,   117,
   396,   116,   119,    69,    70,   nil,    42,   nil,   645,   251,
   nil,   252,   401,   588,   nil,   253,   nil,   nil,   268,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,   nil,   269,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   529,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   670,   518,   nil,   671,   nil,
   507,   nil,   509,   nil,   779,   602,   nil,   nil,   nil,   515,
   nil,   nil,   nil,   704,   nil,   nil,   400,   nil,   nil,   nil,
   nil,   nil,    68,    71,    72,   nil,   nil,   nil,   nil,   nil,
   565,   nil,   nil,   nil,   508,   520,   521,   745,   524,   527,
   260 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 139, :_reduce_none,
  4, 141, :_reduce_2,
  2, 140, :_reduce_3,
  0, 145, :_reduce_4,
  1, 145, :_reduce_5,
  3, 145, :_reduce_6,
  2, 145, :_reduce_7,
  0, 164, :_reduce_8,
  4, 147, :_reduce_9,
  3, 147, :_reduce_10,
  3, 147, :_reduce_11,
  3, 147, :_reduce_12,
  2, 147, :_reduce_13,
  3, 147, :_reduce_14,
  3, 147, :_reduce_15,
  3, 147, :_reduce_16,
  3, 147, :_reduce_17,
  3, 147, :_reduce_18,
  4, 147, :_reduce_19,
  4, 147, :_reduce_20,
  3, 147, :_reduce_21,
  3, 147, :_reduce_22,
  3, 147, :_reduce_23,
  6, 147, :_reduce_24,
  5, 147, :_reduce_25,
  5, 147, :_reduce_26,
  5, 147, :_reduce_27,
  3, 147, :_reduce_28,
  3, 147, :_reduce_29,
  3, 147, :_reduce_30,
  3, 147, :_reduce_31,
  1, 147, :_reduce_none,
  1, 163, :_reduce_none,
  3, 163, :_reduce_34,
  3, 163, :_reduce_35,
  3, 163, :_reduce_36,
  2, 163, :_reduce_37,
  1, 163, :_reduce_none,
  1, 151, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_42,
  2, 153, :_reduce_43,
  2, 153, :_reduce_44,
  1, 168, :_reduce_none,
  4, 168, :_reduce_46,
  4, 168, :_reduce_47,
  0, 175, :_reduce_48,
  5, 173, :_reduce_49,
  2, 167, :_reduce_50,
  3, 167, :_reduce_51,
  4, 167, :_reduce_52,
  5, 167, :_reduce_53,
  4, 167, :_reduce_54,
  5, 167, :_reduce_55,
  2, 167, :_reduce_56,
  2, 167, :_reduce_57,
  1, 154, :_reduce_58,
  3, 154, :_reduce_59,
  1, 178, :_reduce_60,
  3, 178, :_reduce_61,
  1, 177, :_reduce_none,
  2, 177, :_reduce_63,
  3, 177, :_reduce_64,
  5, 177, :_reduce_65,
  2, 177, :_reduce_66,
  4, 177, :_reduce_67,
  2, 177, :_reduce_68,
  4, 177, :_reduce_69,
  1, 177, :_reduce_70,
  3, 177, :_reduce_71,
  1, 181, :_reduce_none,
  3, 181, :_reduce_73,
  2, 180, :_reduce_74,
  3, 180, :_reduce_75,
  1, 183, :_reduce_76,
  3, 183, :_reduce_77,
  1, 182, :_reduce_78,
  4, 182, :_reduce_79,
  3, 182, :_reduce_80,
  3, 182, :_reduce_81,
  3, 182, :_reduce_82,
  3, 182, :_reduce_83,
  2, 182, :_reduce_84,
  1, 182, :_reduce_85,
  1, 152, :_reduce_86,
  4, 152, :_reduce_87,
  3, 152, :_reduce_88,
  3, 152, :_reduce_89,
  3, 152, :_reduce_90,
  3, 152, :_reduce_91,
  2, 152, :_reduce_92,
  1, 152, :_reduce_93,
  1, 185, :_reduce_94,
  1, 185, :_reduce_none,
  2, 186, :_reduce_96,
  1, 186, :_reduce_97,
  3, 186, :_reduce_98,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 190, :_reduce_104,
  1, 190, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 150, :_reduce_108,
  0, 193, :_reduce_109,
  4, 150, :_reduce_110,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  3, 166, :_reduce_181,
  5, 166, :_reduce_182,
  3, 166, :_reduce_183,
  5, 166, :_reduce_184,
  6, 166, :_reduce_185,
  5, 166, :_reduce_186,
  5, 166, :_reduce_187,
  5, 166, :_reduce_188,
  5, 166, :_reduce_189,
  4, 166, :_reduce_190,
  3, 166, :_reduce_191,
  3, 166, :_reduce_192,
  3, 166, :_reduce_193,
  3, 166, :_reduce_194,
  3, 166, :_reduce_195,
  3, 166, :_reduce_196,
  3, 166, :_reduce_197,
  3, 166, :_reduce_198,
  3, 166, :_reduce_199,
  4, 166, :_reduce_200,
  4, 166, :_reduce_201,
  2, 166, :_reduce_202,
  2, 166, :_reduce_203,
  3, 166, :_reduce_204,
  3, 166, :_reduce_205,
  3, 166, :_reduce_206,
  3, 166, :_reduce_207,
  3, 166, :_reduce_208,
  3, 166, :_reduce_209,
  3, 166, :_reduce_210,
  3, 166, :_reduce_211,
  3, 166, :_reduce_212,
  3, 166, :_reduce_213,
  3, 166, :_reduce_214,
  3, 166, :_reduce_215,
  3, 166, :_reduce_216,
  2, 166, :_reduce_217,
  2, 166, :_reduce_218,
  3, 166, :_reduce_219,
  3, 166, :_reduce_220,
  3, 166, :_reduce_221,
  3, 166, :_reduce_222,
  3, 166, :_reduce_223,
  6, 166, :_reduce_224,
  1, 166, :_reduce_none,
  1, 162, :_reduce_none,
  1, 195, :_reduce_none,
  2, 195, :_reduce_none,
  4, 195, :_reduce_229,
  2, 195, :_reduce_230,
  3, 200, :_reduce_231,
  0, 201, :_reduce_232,
  1, 201, :_reduce_none,
  0, 157, :_reduce_234,
  1, 157, :_reduce_none,
  1, 169, :_reduce_236,
  2, 169, :_reduce_237,
  2, 169, :_reduce_238,
  4, 169, :_reduce_239,
  6, 169, :_reduce_240,
  1, 169, :_reduce_241,
  4, 204, :_reduce_242,
  3, 204, :_reduce_243,
  2, 204, :_reduce_244,
  4, 204, :_reduce_245,
  6, 204, :_reduce_246,
  1, 204, :_reduce_247,
  0, 206, :_reduce_248,
  2, 172, :_reduce_249,
  1, 205, :_reduce_250,
  0, 207, :_reduce_251,
  3, 205, :_reduce_252,
  0, 208, :_reduce_253,
  4, 205, :_reduce_254,
  2, 203, :_reduce_255,
  2, 202, :_reduce_256,
  1, 202, :_reduce_257,
  0, 202, :_reduce_258,
  1, 197, :_reduce_259,
  2, 197, :_reduce_260,
  3, 197, :_reduce_261,
  4, 197, :_reduce_262,
  3, 161, :_reduce_263,
  4, 161, :_reduce_264,
  2, 161, :_reduce_265,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_274,
  3, 194, :_reduce_275,
  0, 230, :_reduce_276,
  4, 194, :_reduce_277,
  3, 194, :_reduce_278,
  3, 194, :_reduce_279,
  2, 194, :_reduce_280,
  3, 194, :_reduce_281,
  3, 194, :_reduce_282,
  1, 194, :_reduce_283,
  4, 194, :_reduce_284,
  3, 194, :_reduce_285,
  1, 194, :_reduce_286,
  5, 194, :_reduce_287,
  4, 194, :_reduce_288,
  3, 194, :_reduce_289,
  2, 194, :_reduce_290,
  1, 194, :_reduce_none,
  2, 194, :_reduce_292,
  2, 194, :_reduce_293,
  6, 194, :_reduce_294,
  6, 194, :_reduce_295,
  0, 231, :_reduce_296,
  0, 232, :_reduce_297,
  7, 194, :_reduce_298,
  0, 233, :_reduce_299,
  0, 234, :_reduce_300,
  7, 194, :_reduce_301,
  5, 194, :_reduce_302,
  4, 194, :_reduce_303,
  0, 235, :_reduce_304,
  0, 236, :_reduce_305,
  9, 194, :_reduce_306,
  0, 237, :_reduce_307,
  6, 194, :_reduce_308,
  0, 238, :_reduce_309,
  7, 194, :_reduce_310,
  0, 239, :_reduce_311,
  5, 194, :_reduce_312,
  0, 240, :_reduce_313,
  6, 194, :_reduce_314,
  0, 241, :_reduce_315,
  0, 242, :_reduce_316,
  9, 194, :_reduce_317,
  1, 194, :_reduce_318,
  1, 194, :_reduce_319,
  1, 194, :_reduce_320,
  1, 194, :_reduce_321,
  1, 156, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  2, 220, :_reduce_325,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 221, :_reduce_none,
  5, 221, :_reduce_329,
  1, 143, :_reduce_none,
  2, 143, :_reduce_331,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 243, :_reduce_none,
  3, 243, :_reduce_335,
  1, 246, :_reduce_336,
  3, 246, :_reduce_337,
  1, 245, :_reduce_none,
  4, 245, :_reduce_339,
  6, 245, :_reduce_340,
  3, 245, :_reduce_341,
  5, 245, :_reduce_342,
  2, 245, :_reduce_343,
  4, 245, :_reduce_344,
  1, 245, :_reduce_345,
  3, 245, :_reduce_346,
  6, 247, :_reduce_347,
  8, 247, :_reduce_348,
  4, 247, :_reduce_349,
  6, 247, :_reduce_350,
  4, 247, :_reduce_351,
  2, 247, :_reduce_none,
  6, 247, :_reduce_353,
  2, 247, :_reduce_354,
  4, 247, :_reduce_355,
  6, 247, :_reduce_356,
  2, 247, :_reduce_357,
  4, 247, :_reduce_358,
  2, 247, :_reduce_359,
  4, 247, :_reduce_360,
  1, 247, :_reduce_361,
  0, 174, :_reduce_362,
  1, 174, :_reduce_363,
  3, 253, :_reduce_364,
  1, 253, :_reduce_365,
  4, 253, :_reduce_366,
  0, 254, :_reduce_367,
  2, 254, :_reduce_368,
  1, 255, :_reduce_369,
  3, 255, :_reduce_370,
  1, 256, :_reduce_371,
  1, 256, :_reduce_none,
  0, 260, :_reduce_373,
  3, 219, :_reduce_374,
  4, 258, :_reduce_375,
  2, 258, :_reduce_376,
  3, 259, :_reduce_377,
  3, 259, :_reduce_378,
  0, 263, :_reduce_379,
  5, 262, :_reduce_380,
  2, 170, :_reduce_381,
  4, 170, :_reduce_382,
  4, 170, :_reduce_383,
  2, 218, :_reduce_384,
  4, 218, :_reduce_385,
  4, 218, :_reduce_386,
  3, 218, :_reduce_387,
  3, 218, :_reduce_388,
  3, 218, :_reduce_389,
  2, 218, :_reduce_390,
  1, 218, :_reduce_391,
  4, 218, :_reduce_392,
  0, 265, :_reduce_393,
  5, 217, :_reduce_394,
  0, 266, :_reduce_395,
  5, 217, :_reduce_396,
  5, 223, :_reduce_397,
  1, 267, :_reduce_398,
  1, 267, :_reduce_none,
  6, 142, :_reduce_400,
  0, 142, :_reduce_401,
  1, 268, :_reduce_402,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  2, 269, :_reduce_405,
  1, 269, :_reduce_none,
  2, 144, :_reduce_407,
  1, 144, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 210, :_reduce_412,
  1, 271, :_reduce_413,
  2, 271, :_reduce_414,
  3, 272, :_reduce_415,
  1, 272, :_reduce_416,
  1, 272, :_reduce_417,
  3, 211, :_reduce_418,
  4, 212, :_reduce_419,
  3, 213, :_reduce_420,
  0, 276, :_reduce_421,
  3, 276, :_reduce_422,
  1, 277, :_reduce_423,
  2, 277, :_reduce_424,
  3, 214, :_reduce_425,
  0, 279, :_reduce_426,
  3, 279, :_reduce_427,
  0, 273, :_reduce_428,
  2, 273, :_reduce_429,
  0, 274, :_reduce_430,
  2, 274, :_reduce_431,
  0, 275, :_reduce_432,
  2, 275, :_reduce_433,
  1, 278, :_reduce_434,
  2, 278, :_reduce_435,
  0, 281, :_reduce_436,
  4, 278, :_reduce_437,
  1, 280, :_reduce_438,
  1, 280, :_reduce_439,
  1, 280, :_reduce_440,
  1, 280, :_reduce_none,
  1, 191, :_reduce_442,
  3, 192, :_reduce_443,
  1, 270, :_reduce_444,
  1, 270, :_reduce_445,
  2, 270, :_reduce_446,
  2, 270, :_reduce_447,
  1, 184, :_reduce_448,
  1, 184, :_reduce_449,
  1, 184, :_reduce_450,
  1, 184, :_reduce_451,
  1, 184, :_reduce_452,
  1, 184, :_reduce_453,
  1, 184, :_reduce_454,
  1, 184, :_reduce_455,
  1, 184, :_reduce_456,
  1, 184, :_reduce_457,
  1, 184, :_reduce_458,
  1, 184, :_reduce_459,
  1, 215, :_reduce_460,
  1, 155, :_reduce_461,
  1, 160, :_reduce_462,
  1, 160, :_reduce_463,
  1, 225, :_reduce_464,
  3, 225, :_reduce_465,
  2, 225, :_reduce_466,
  3, 227, :_reduce_467,
  2, 227, :_reduce_468,
  6, 261, :_reduce_469,
  8, 261, :_reduce_470,
  4, 261, :_reduce_471,
  6, 261, :_reduce_472,
  4, 261, :_reduce_473,
  6, 261, :_reduce_474,
  2, 261, :_reduce_475,
  4, 261, :_reduce_476,
  6, 261, :_reduce_477,
  2, 261, :_reduce_478,
  4, 261, :_reduce_479,
  2, 261, :_reduce_480,
  4, 261, :_reduce_481,
  1, 261, :_reduce_482,
  0, 261, :_reduce_483,
  1, 257, :_reduce_484,
  1, 257, :_reduce_485,
  1, 257, :_reduce_486,
  1, 257, :_reduce_487,
  1, 244, :_reduce_none,
  1, 244, :_reduce_489,
  3, 244, :_reduce_490,
  2, 244, :_reduce_491,
  1, 283, :_reduce_none,
  3, 283, :_reduce_493,
  1, 248, :_reduce_494,
  3, 248, :_reduce_495,
  3, 284, :_reduce_496,
  3, 285, :_reduce_497,
  1, 249, :_reduce_498,
  3, 249, :_reduce_499,
  1, 282, :_reduce_500,
  3, 282, :_reduce_501,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  2, 250, :_reduce_504,
  1, 250, :_reduce_505,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 252, :_reduce_508,
  2, 251, :_reduce_509,
  0, 251, :_reduce_510,
  1, 228, :_reduce_none,
  3, 228, :_reduce_512,
  0, 216, :_reduce_513,
  2, 216, :_reduce_none,
  1, 199, :_reduce_515,
  3, 199, :_reduce_516,
  3, 288, :_reduce_517,
  2, 288, :_reduce_518,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 159, :_reduce_531,
  1, 159, :_reduce_532,
  0, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 165, :_reduce_none,
  1, 165, :_reduce_none,
  2, 179, :_reduce_537,
  2, 158, :_reduce_538,
  0, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 226, :_reduce_542,
  1, 226, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_none,
  0, 196, :_reduce_546 ]

racc_reduce_n = 547

racc_shift_n = 960

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUNARY_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tANDDOT => 135,
  :tEQL => 136,
  :tLOWEST => 137 }

racc_nt_base = 138

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUNARY_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "operation3",
  "@22",
  "@23",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@24",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_8(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_9(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_12(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_14(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_18(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_19(val, _values, result)
                      if in_def?
                        diagnostic :error, :begin_in_method, nil, val[0]
                      end

                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_28(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_48(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_49(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  *val[1])
                    
    result
end

def _reduce_51(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        *val[1])

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_52(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_53(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_55(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  *val[1])
                    
    result
end

def _reduce_57(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  *val[1])
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_64(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_68(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_69(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_70(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 95 omitted

def _reduce_96(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

def _reduce_104(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_109(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

def _reduce_181(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_182(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_183(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_184(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_185(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_189(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_190(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_191(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

def _reduce_229(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_231(val, _values, result)
                      result = val
                    
    result
end

def _reduce_232(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 233 omitted

def _reduce_234(val, _values, result)
                      result = []
                    
    result
end

# reduce 235 omitted

def _reduce_236(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_239(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_240(val, _values, result)
                      val[2][-1] = @builder.objc_varargs(val[2][-1], val[4])
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[5])
                    
    result
end

def _reduce_241(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_244(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_245(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
end

def _reduce_246(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_249(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ nil, val[0], nil ]
                    
    result
end

def _reduce_251(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_253(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_256(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = []
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_276(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_277(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_278(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_293(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_294(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_295(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_297(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_299(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_300(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_302(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_303(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_304(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_305(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_307(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_308(val, _values, result)
                      if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_310(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend

                      @def_level = val[4]
                    
    result
end

def _reduce_311(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_312(val, _values, result)
                      if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_313(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_316(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 322 omitted

# reduce 323 omitted

# reduce 324 omitted

def _reduce_325(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

def _reduce_329(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 330 omitted

def _reduce_331(val, _values, result)
                      result = val
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_337(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3]))
                    
    result
end

def _reduce_340(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_341(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2]))
                    
    result
end

def _reduce_342(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_344(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_345(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]) ]
                    
    result
end

def _reduce_346(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_354(val, _values, result)
                      if val[1].empty? && val[0].size == 1
                        result = [@builder.procarg0(val[0][0])]
                      else
                        result = val[0].concat(val[1])
                      end
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_363(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_364(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = []
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_371(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_374(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_375(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = @builder.args(nil, val[0].concat(val[1]), nil)
                    
    result
end

def _reduce_377(val, _values, result)
                      result = [ val[0], val[1], val[2] ]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = [ val[0], val[1], val[2] ]
                    
    result
end

def _reduce_379(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_381(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_382(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_383(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_384(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_385(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_386(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_387(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_388(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_389(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_390(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_391(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_392(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_393(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_394(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_395(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_396(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_397(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_401(val, _values, result)
                      result = []
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 403 omitted

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 406 omitted

def _reduce_407(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 408 omitted

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_414(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_416(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_419(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = []
                    
    result
end

def _reduce_422(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_426(val, _values, result)
                      result = []
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_428(val, _values, result)
                      result = []
                    
    result
end

def _reduce_429(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = []
                    
    result
end

def _reduce_431(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_432(val, _values, result)
                      result = []
                    
    result
end

def _reduce_433(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_437(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_438(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_439(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 441 omitted

def _reduce_442(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      num = @builder.integer(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_447(val, _values, result)
                      num = @builder.float(val[1])
                      if @builder.respond_to? :negate
                        # AST builder interface compatibility
                        result = @builder.negate(val[0], num)
                      else
                        result = @builder.unary_num(val[0], num)
                      end
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_465(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_466(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = []
                    
    result
end

def _reduce_484(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_485(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_486(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_487(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      @static_env.declare val[2][0]

                      result = @builder.objc_kwarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_491(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.objc_kwarg(val[0], nil, val[1])
                    
    result
end

# reduce 492 omitted

def _reduce_493(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_496(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_497(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 502 omitted

# reduce 503 omitted

def _reduce_504(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = []
                    
    result
end

# reduce 511 omitted

def _reduce_512(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_513(val, _values, result)
                      result = []
                    
    result
end

# reduce 514 omitted

def _reduce_515(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = [:dot, val[0][1]]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = [:anddot, val[0][1]]
                    
    result
end

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

def _reduce_537(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_538(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

def _reduce_542(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 543 omitted

# reduce 544 omitted

# reduce 545 omitted

def _reduce_546(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyMotion
  end   # module Parser
